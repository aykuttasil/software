<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>aspnetcore on Aykut Asil</title>
    <link>https://yazilim.aykutasil.com/categories/aspnetcore/</link>
    <description>Recent content in aspnetcore on Aykut Asil</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 24 Jun 2021 17:51:01 +0300</lastBuildDate>
    
	<atom:link href="https://yazilim.aykutasil.com/categories/aspnetcore/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>.Net Sqlite Konfigürasyonu</title>
      <link>https://yazilim.aykutasil.com/dotnet-sqlite-configuration/</link>
      <pubDate>Thu, 24 Jun 2021 17:51:01 +0300</pubDate>
      
      <guid>https://yazilim.aykutasil.com/dotnet-sqlite-configuration/</guid>
      <description>CLI ile Entity Framework işlemleri gerçekleştirmek için dotnet-ef toolunu yüklemelisiniz.
 dotnet tool install --global dotnet-ef dotnet add package Microsoft.EntityFrameworkCore.Design  SQLite provider&amp;rsquo;ı için ilgili paketi yüklemelisiniz
 dotnet add package Microsoft.EntityFrameworkCore dotnet add package Microsoft.EntityFrameworkCore.Sqlite  SQLite konfigürasyonu için startup.cs dosyasını aşağıdaki gibi güncellemelisiniz.
 public void ConfigureServices(IServiceCollection services) { services.AddDbContext&amp;lt;MainDbContext&amp;gt;(x =&amp;gt; x.UseSqlite(&amp;#34;DataSource=app.db&amp;#34;)); services.AddControllers(); services.AddSwaggerGen(c =&amp;gt; { c.SwaggerDoc(&amp;#34;v1&amp;#34;, new OpenApiInfo { Title = &amp;#34;ws_agt_ext_api&amp;#34;, Version = &amp;#34;v1&amp;#34; }); }); }  Users tablosunu oluşturmak için aşağıdaki gibi ilgili sınıfları oluşturmalısınız.</description>
    </item>
    
    <item>
      <title>Asp.Net Core launchSettings.json Kullanımı</title>
      <link>https://yazilim.aykutasil.com/aspnetcore-launchsettings-file/</link>
      <pubDate>Fri, 17 Apr 2020 21:02:16 +0300</pubDate>
      
      <guid>https://yazilim.aykutasil.com/aspnetcore-launchsettings-file/</guid>
      <description>launchSettings.json dosyası sadece local&amp;lsquo;de development yaparken kullanılan bir dosyadır. Visual Studio veya dotnet cli ile birlikte kullanılır.
 Not: Eğer uygulamamızı sunucuyu deploy ettikten sonra ulaşmak istediğimiz ayarlar var ise bunun belirtilmesi gereken yer launchSettings.json dosyası değildir. Bu tür ayarlar genelde appSettings.json dosyası içerisinde tanımlanır.
 launchSettings.json dosyası { &amp;#34;iisSettings&amp;#34;: { &amp;#34;windowsAuthentication&amp;#34;: false, &amp;#34;anonymousAuthentication&amp;#34;: true, &amp;#34;iisExpress&amp;#34;: { &amp;#34;applicationUrl&amp;#34;: &amp;#34;http://localhost:59119&amp;#34;, &amp;#34;sslPort&amp;#34;: 0 } }, &amp;#34;profiles&amp;#34;: { &amp;#34;IIS Express&amp;#34;: { &amp;#34;commandName&amp;#34;: &amp;#34;IISExpress&amp;#34;, &amp;#34;launchBrowser&amp;#34;: true, &amp;#34;environmentVariables&amp;#34;: { &amp;#34;ASPNETCORE_ENVIRONMENT&amp;#34;: &amp;#34;Development&amp;#34; } }, &amp;#34;FirstCoreWebApplication&amp;#34;: { &amp;#34;commandName&amp;#34;: &amp;#34;Project&amp;#34;, &amp;#34;launchBrowser&amp;#34;: true, &amp;#34;applicationUrl&amp;#34;: &amp;#34;http://localhost:5000,https://localhost:5000&amp;#34;, &amp;#34;environmentVariables&amp;#34;: { &amp;#34;ASPNETCORE_ENVIRONMENT&amp;#34;: &amp;#34;Development&amp;#34; } } } Yukarıdaki dosyayı inceleyecek olursak profiles tagı altında IIS Express ve FirstCoreWebApplication tagları olduğunu görürüz.</description>
    </item>
    
    <item>
      <title>Asp.Net Core Session</title>
      <link>https://yazilim.aykutasil.com/aspnetcore-session/</link>
      <pubDate>Tue, 12 Nov 2019 10:17:17 +0300</pubDate>
      
      <guid>https://yazilim.aykutasil.com/aspnetcore-session/</guid>
      <description>Asp.Net Core Session Kullanımı Asp.Net Core 2.1 ve üstü sürüme sahip projelerinizde Session kullanmak için Startup.cs dosyanızı aşağıdaki yöntemlerden birini seçerek güncellemeniz gerekmektedir.
Yöntem 1 Yöntem 2 Neden Asp.Net Core 2.1 ve sonrası? 2018&amp;rsquo;de uygulanması zorunlu hale gelen Avrupa Veri Koruma Kanunu ile birlikte, şirketlere kişisel verileri kullanması konusunda bazı kısıtlamalar ve uygulaması gereken bazı zorunluluklar getirilmiştir. Bu zorunluluklardan şu an için bizi ilgilendiren kısmı cookielerin kullanımı. Web siteleri cookie kullanımı için son kullanıcının onayını almak zorundadır.</description>
    </item>
    
    <item>
      <title>ASP.NET Core Filters</title>
      <link>https://yazilim.aykutasil.com/aspnetcore-filters/</link>
      <pubDate>Mon, 29 Apr 2019 10:05:05 +0300</pubDate>
      
      <guid>https://yazilim.aykutasil.com/aspnetcore-filters/</guid>
      <description>Not: Bu makale hazırlanırken kullanılan .net core versiyonu: 2.2
 ASP.NET Core&amp;lsquo;daki filter yapısı, middleware bileşenine benzer fakat bazı farklılıkları vardır. Filter&amp;lsquo;lar ile sadece request-response süreci arasına girilerek istenilen kod blokları çalıştırılabilir. Filter tipine göre request-response sürecinin hangi aşamasında çalıştırılacağı belirlenebilir. Oldukça özelleştirebilir bir yapı sunar bize Filter&amp;lsquo;lar.
Filter Tipleri Authorization Filters İlk çalışan filter&amp;lsquo;dır. İlgili mvc action metoduna erişmek için user&amp;lsquo;ın yetkisi olup olmadığını kontrol eder. Eğer koşullar sağlanıyor ise ilgili mvc action metodu çalışır.</description>
    </item>
    
    <item>
      <title>ASP.Net Core app.Run() Middleware</title>
      <link>https://yazilim.aykutasil.com/aspnetcore-run-middleware/</link>
      <pubDate>Mon, 15 Apr 2019 22:08:14 +0300</pubDate>
      
      <guid>https://yazilim.aykutasil.com/aspnetcore-run-middleware/</guid>
      <description>ASP.NET Core Run Method ASP.NET Core ile birlikte gelen middleware konsepti sayesinde request-response süreçleri arasına girerek kendi mantıksal devremizi yazmamız çok kolay hale gelmiştir.
Yukarıda ki gibi Startup.cs sınıfı içerisindeki Configure fonksiyonuna app.Run() diyerek middleware&amp;lsquo;ımızı ekleyebiliriz.
Peki tam olarak app.Run() metodu nasıl çalışıyor? app.Run() middlaware&amp;rsquo;ı ile istenilen bir kod bloğunu çalıştırabilir ve uygulamamıza kısa devre yaptırabiliriz. Yani pipeline akışı eğer Run() içerisine girerse, sonraki kod blokları çalışmayacaktır.
Yukarıda ki kodun çıktısı sadece Response 1 olacak ve sonraki kod bloğu çalışmayacaktır.</description>
    </item>
    
  </channel>
</rss>