[{"content":"Problem? Android işletim sisteminin ilk versiyonlarında SMS\u0026rsquo;lere erişim oldukça kolaydı. Fakat şimdi sadece özel izne sahip uygulamalar bu izne sahip olabiliyor. Google\u0026rsquo;a bir form doldurarak ve neden SMS okuma özelliğine kesin olarak ihtiyacınız olduğunu anlatarak bu izni talep ediyorsunuz. Peki bizim amacımız tek seferlik bir SMS okumak ise yine bu süreçten geçmeli miyiz? Hayır!\nGoogle tek seferlik SMS okuması yapabilmek için çeşitli API\u0026rsquo;ler çıkardı. Bu API\u0026rsquo;lere sayfanın en altında bulunan Kaynaklar bölümünden erişebilirsiniz.\nKısaca bu API\u0026rsquo;lerden biri süreci tamamen otomatize ederken, diğeri bazı manuel işlemler yapmamıza gerek duyuyor.\nBizim kullanacağımız SMS User Consent API. Yani bazı manuel süreçlere gereksinim duyan modeli inceleyeceğiz.\n SMS User Consent API SMS dinleme akışı kısaca aşağıdaki gibi olacaktır.\nSMS User Consent API ile içeriği belli şartları sağlayan ve dinlemeye start verildikten sonra gelecek olan sms\u0026rsquo;in tüm içeriğini yakalayabilirsiniz.\nNedir bu şartlar?  The message contains a 4-10 character alphanumeric string with at least one number. (İçinde en az 1 rakam bulunan ve en az 4-10 karakter olan) The message was sent by a phone number that\u0026rsquo;s not in the user\u0026rsquo;s contacts. (Rehber\u0026rsquo;de kayıtlı olmayan) If you specified the sender\u0026rsquo;s phone number, the message was sent by that number. (SMS\u0026rsquo;in hangi numaradan geleceğini biliyorsak, dinlemeyi bu telefon numarası özelinde yapabiliriz)   Kodlama Kaynaklar  https://developers.google.com/identity/sms-retriever https://developers.google.com/identity/sms-retriever/user-consent/overview https://developers.google.com/identity/sms-retriever/choose-an-api  ","permalink":"https://yazilim.aykutasil.com/android_sms_user_consent_api/","summary":"Problem? Android işletim sisteminin ilk versiyonlarında SMS\u0026rsquo;lere erişim oldukça kolaydı. Fakat şimdi sadece özel izne sahip uygulamalar bu izne sahip olabiliyor. Google\u0026rsquo;a bir form doldurarak ve neden SMS okuma özelliğine kesin olarak ihtiyacınız olduğunu anlatarak bu izni talep ediyorsunuz. Peki bizim amacımız tek seferlik bir SMS okumak ise yine bu süreçten geçmeli miyiz? Hayır!\nGoogle tek seferlik SMS okuması yapabilmek için çeşitli API\u0026rsquo;ler çıkardı. Bu API\u0026rsquo;lere sayfanın en altında bulunan Kaynaklar bölümünden erişebilirsiniz.","title":"Android SMS User Consent API Kullanımı"},{"content":" CLI ile Entity Framework işlemleri gerçekleştirmek için dotnet-ef toolunu yüklemelisiniz.\n dotnet tool install --global dotnet-ef dotnet add package Microsoft.EntityFrameworkCore.Design  SQLite provider\u0026rsquo;ı için ilgili paketi yüklemelisiniz\n dotnet add package Microsoft.EntityFrameworkCore dotnet add package Microsoft.EntityFrameworkCore.Sqlite  SQLite konfigürasyonu için startup.cs dosyasını aşağıdaki gibi güncellemelisiniz.\n  public void ConfigureServices(IServiceCollection services)  {   services.AddDbContext\u0026lt;MainDbContext\u0026gt;(x =\u0026gt; x.UseSqlite(\u0026#34;DataSource=app.db\u0026#34;));   services.AddControllers();  services.AddSwaggerGen(c =\u0026gt;  {  c.SwaggerDoc(\u0026#34;v1\u0026#34;, new OpenApiInfo { Title = \u0026#34;ws_agt_ext_api\u0026#34;, Version = \u0026#34;v1\u0026#34; });  });  }  Users tablosunu oluşturmak için aşağıdaki gibi ilgili sınıfları oluşturmalısınız.\n  public class User  {  public int Id { get; set; }  public string Name { get; set; }  public string Surname { get; set; }  public string Email { get; set; }  public int Age { get; set; }  public string Password { get; set; }  public string RefreshToken { get; set; }  public DateTime? RefreshTokenEndDate { get; set; }  }   public class MainDbContext : DbContext  {  public MainDbContext(DbContextOptions options) : base(options)  {  }   public DbSet\u0026lt;User\u0026gt; Users { get; set; }  }  Komut satırınıa aşağıdaki komutları yazarak app.db dosyası ve Users tablosunun oluşturulmasını sağlayabilirsiniz.\n dotnet ef migrations add InitialCreate dotnet ef database update  Eğer User tablosuna başka bir alan eklemek isterseniz aşağıdaki adımları takip ederek işlemi gerçekleştirebilirsiniz.\n User.cs\n ...  public string Company { get; set; } dotnet ef migrations add CompanyFieldMigration dotnet ef database update Ve User tablosuna Company sütunu eklenmiş oldu.\nKaynaklar  https://docs.microsoft.com/en-us/ef/core/get-started/overview/first-app?tabs=netcore-cli  ","permalink":"https://yazilim.aykutasil.com/dotnet-sqlite-configuration/","summary":"CLI ile Entity Framework işlemleri gerçekleştirmek için dotnet-ef toolunu yüklemelisiniz.\n dotnet tool install --global dotnet-ef dotnet add package Microsoft.EntityFrameworkCore.Design  SQLite provider\u0026rsquo;ı için ilgili paketi yüklemelisiniz\n dotnet add package Microsoft.EntityFrameworkCore dotnet add package Microsoft.EntityFrameworkCore.Sqlite  SQLite konfigürasyonu için startup.cs dosyasını aşağıdaki gibi güncellemelisiniz.\n  public void ConfigureServices(IServiceCollection services)  {   services.AddDbContext\u0026lt;MainDbContext\u0026gt;(x =\u0026gt; x.UseSqlite(\u0026#34;DataSource=app.db\u0026#34;));   services.AddControllers();  services.AddSwaggerGen(c =\u0026gt;  {  c.SwaggerDoc(\u0026#34;v1\u0026#34;, new OpenApiInfo { Title = \u0026#34;ws_agt_ext_api\u0026#34;, Version = \u0026#34;v1\u0026#34; });  });  }  Users tablosunu oluşturmak için aşağıdaki gibi ilgili sınıfları oluşturmalısınız.","title":".Net Sqlite Konfigürasyonu"},{"content":"Senaryo Kendi sunucunuz üzerine kurmuş olduğunuz Teamcity\u0026rsquo;e Slack entegrasyonu yaparak, build \u0026gt; deploy adımlarını Slack üzerinden nasıl izleriz?\nÇözüm  Öncelikle Slack yapılandırmaları ile başlayalım.  https://api.slack.com/apps adresine giriyoruz ve yeni bir App oluşturuyoruz.\n OAuth \u0026amp; Permissions tabına geçerek ilgili yetkilendirmeleri yapıyoruz.   Botumuza, ihtiyaç duyacağı tüm izinleri verdikten sonra Install to Workspace diyerek yetkilendirmeyi tamamlıyoruz. Oluşan tokenı Teamcity tarafında kullanıcaz.   Slack tarafında App\u0026lsquo;imizi oluşturduktan sonra şimdi Teamcity tarafında gerekli ayarlamaları yapabiliriz. Öncelikle Teamcity içerisindeki tüm projelerimizin parentı olan Root Project\u0026rsquo;e Slack connection bilgisini ekliyoruz. Böylece tüm child projeler bu connection\u0026rsquo;ı kullanabilecek.   Slack uygulaması üzerinden oluşturduğumuz App\u0026lsquo;i artık görebiliriz ve sonrasında bildirimlerin nereye düşmesini istiyorsak bunu belirtmemiz gerekiyor.   Ve son olarak Teamcity tarafında, hangi projemizin bildirim göndermesini istiyorsak gerekli düzenlemeyi yapıyoruz.  Kaynaklar  https://www.jetbrains.com/help/youtrack/standalone/Slack-Integration-HTML.html https://www.jetbrains.com/help/teamcity/notifications.html#Slack+Notifier https://api.slack.com/apps  ","permalink":"https://yazilim.aykutasil.com/teamcity-slack-integration/","summary":"Senaryo Kendi sunucunuz üzerine kurmuş olduğunuz Teamcity\u0026rsquo;e Slack entegrasyonu yaparak, build \u0026gt; deploy adımlarını Slack üzerinden nasıl izleriz?\nÇözüm  Öncelikle Slack yapılandırmaları ile başlayalım.  https://api.slack.com/apps adresine giriyoruz ve yeni bir App oluşturuyoruz.\n OAuth \u0026amp; Permissions tabına geçerek ilgili yetkilendirmeleri yapıyoruz.   Botumuza, ihtiyaç duyacağı tüm izinleri verdikten sonra Install to Workspace diyerek yetkilendirmeyi tamamlıyoruz. Oluşan tokenı Teamcity tarafında kullanıcaz.   Slack tarafında App\u0026lsquo;imizi oluşturduktan sonra şimdi Teamcity tarafında gerekli ayarlamaları yapabiliriz.","title":"Teamcity Slack Entegrasyonu"},{"content":"Senaryo Şu anda çalışmış olduğum şirkette, kendi local sunucularımız üzerine kurmuş olduğumuz Teamcity ile projelerin derlenip sunulma aşamasını otomatize etmeye çalışıyoruz. Teamcity kurmuş olduğumuz sunucu ile projelerin deploy olacağı sunucular farklı. Biz şimdilik bu deploy sürecini teamcity built-in FTP özelliğini kullanarak hallediyoruz. Fakat .net core projelerinin deploy olma sürecinde yaşanan bir problem var. Eğer .net core projeniz IIS arkasında konuşlanma şeklinde ayarlanmış ise IIS, projenizin .exe dosyasını çalıştıyor olacak ve bu çalışma süresince siz bu dosyayı değiştirme, silme vb. işlemlere sokamıyor olacaksınız. Dolayısıyla otomatize edilmiş deploy süreci bu adımda patlıyor olacak. Çözüm olarak microsoft\u0026lsquo;un önerdiği birkaç yöntem var. Bunlardan biri deploy adımında IIS\u0026lsquo;i durdurmak ve sonrasında tekrar çalıştırmak. Bir diğeri app_offline.htm dosyasını proje root klasörüne kopyalamak ve sonrasında silmek.\nBiz şu an için app_offline.htm dosyasını oluşturup, deploy sonrasında silme seçeneğini seçtik.\n Deploy adımı çalışmadan önce aşağıdaki Powershell komutu ile uzak sunucuya bağlanarak projemizin root klasöründe app_offline.htm dosyası oluşturuyoruz:  $Username = \u0026#39;uzak_masaustu_kullanicisi\u0026#39; $Password = \u0026#39;uzak_masaustu_kullanici_sifresi\u0026#39; $pass = ConvertTo-SecureString -AsPlainText $Password -Force $credential = new-object -typename System.Management.Automation.PSCredential -argumentlist $Username,$pass Invoke-Command -ComputerName uzakmasaustu.computername.com -Credential $credential -ScriptBlock { New-Item -Path \u0026#34;D:\\proje\\root\\path\u0026#34; -Name app_offline.htm }  Deploy adımı\n  Ve projenin IIS tarafından tekrar çalıştırılması için app_offline.htm dosyasını siliyoruz.\n  $Username = \u0026#39;uzak_masaustu_kullanicisi\u0026#39; $Password = \u0026#39;uzak_masaustu_kullanici_sifresi\u0026#39; $pass = ConvertTo-SecureString -AsPlainText $Password -Force $credential = new-object -typename System.Management.Automation.PSCredential -argumentlist $Username,$pass Invoke-Command -ComputerName uzakmasaustu.computername.com -Credential $credential -ScriptBlock { Remove-Item -Path \u0026#34;D:\\proje\\root\\path\\app_offline.htm\u0026#34; } ","permalink":"https://yazilim.aykutasil.com/powershell-invokecommand-ile-uzak-bilgisayarda-komut-calistirma/","summary":"Senaryo Şu anda çalışmış olduğum şirkette, kendi local sunucularımız üzerine kurmuş olduğumuz Teamcity ile projelerin derlenip sunulma aşamasını otomatize etmeye çalışıyoruz. Teamcity kurmuş olduğumuz sunucu ile projelerin deploy olacağı sunucular farklı. Biz şimdilik bu deploy sürecini teamcity built-in FTP özelliğini kullanarak hallediyoruz. Fakat .net core projelerinin deploy olma sürecinde yaşanan bir problem var. Eğer .net core projeniz IIS arkasında konuşlanma şeklinde ayarlanmış ise IIS, projenizin .exe dosyasını çalıştıyor olacak ve bu çalışma süresince siz bu dosyayı değiştirme, silme vb.","title":"PowerShell Invoke-Command ile Uzak Bilgisayarda Komut Çalıştırma"},{"content":"Problem Zaten halihazırda .gitignore dosyası eklenmiş şekilde bir git repunuz var. Sonradan .gitignore dosyasınızı yapılandırdınız fakat yine de bu dosyalar track(izlenmeye) devam ediyor.\nSebep Proje dosyalarını ilk commit yaptığınızda mevcut .gitignore yapılandırmanız baz alınarak dosyalar cachelenir. Ve sonrasında bu dosyalarda yapılan tüm değişikler izlenmeye devam eder. Sonradan .gitignore dosyanızda değişiklik yapsanız dahi cachelenmiş dosyalarda değişiklik olmaz.\nÇözüm git cache\u0026rsquo;ini temizleyerek izlenenen tüm dosyaları yeni .gitignore yapılandırmanıza göre tekrardan cachelenmesini sağlayabilirsiniz.\ngit rm -r --cached . git add . git commit -am \u0026#34;new gitignore conf\u0026#34; Not: Mevcut .git history\u0026rsquo;nizde bir değişiklik olmayacaktır.\n","permalink":"https://yazilim.aykutasil.com/reinitialize-project-with-gitignore/","summary":"Problem Zaten halihazırda .gitignore dosyası eklenmiş şekilde bir git repunuz var. Sonradan .gitignore dosyasınızı yapılandırdınız fakat yine de bu dosyalar track(izlenmeye) devam ediyor.\nSebep Proje dosyalarını ilk commit yaptığınızda mevcut .gitignore yapılandırmanız baz alınarak dosyalar cachelenir. Ve sonrasında bu dosyalarda yapılan tüm değişikler izlenmeye devam eder. Sonradan .gitignore dosyanızda değişiklik yapsanız dahi cachelenmiş dosyalarda değişiklik olmaz.\nÇözüm git cache\u0026rsquo;ini temizleyerek izlenenen tüm dosyaları yeni .gitignore yapılandırmanıza göre tekrardan cachelenmesini sağlayabilirsiniz.","title":"Düzeltilmiş .gitignore ile Projenin Yeniden Yapılandırılması"},{"content":"Fastlane, mobil ile ilgili neredeyse tüm süreçleri (build,test,deploy vs.) otomatize etmeye yarayan bir araçtır. Fastlane kullanarak hangi CI/CD platformunu kullanıyor olursanız olun uygulama süreçleriniz tekil hale getirebilirsiniz.\nKurulum brew install fastlane Fastlane aracının kurulumunu tamamladıktan sonra, ilk olarak projenizin root klasörüne gelip fastlane init komutunu çalıştırmalısınız.\n Komut satırında Package Name istenildiğinde uygulamamızın package name\u0026lsquo;ini (com.example.myapplication) giriyoruz. Diğer adımları şimdilik es geçebilirsiniz.  Proje yapılandırması tamamlandığında app klasörü ile aynı seviyede fastline isimli bir klasör oluşacak. Ve bu klasör içerisinde bulunan Fastfile isimli dosyayı projemizi yapılandırmak için kullanıcaz.\nDosyayı aşağıdaki gibi güncelleyebilirsiniz.\n# This file contains the fastlane.tools configuration # You can find the documentation at https://docs.fastlane.tools # # For a list of all available actions, check out # # https://docs.fastlane.tools/actions # # For a list of all available plugins, check out # # https://docs.fastlane.tools/plugins/available-plugins # # Uncomment the line if you want fastlane to automatically update itself update_fastlane default_platform(:android) platform :android do desc \u0026#34;Build\u0026#34; lane :build do gradle(task: \u0026#34;clean assembleRelease\u0026#34;) end desc \u0026#34;Runs all the tests\u0026#34; lane :test do gradle(task: \u0026#34;test\u0026#34;) end desc \u0026#34;Submit a new Beta Build to Crashlytics Beta\u0026#34; lane :beta do build crashlytics # sh \u0026#34;your_script.sh\u0026#34; # You can also use other beta testing services here end desc \u0026#34;Deploy a new version to the Google Play\u0026#34; lane :deploy do build upload_to_play_store end end Komut satırına fastlane build ya da fastlane test yazarak ilgili lane\u0026lsquo;i çalıştırabilirsiniz.\nYa da daha hızlı çalıştırabilmek için bundle exec fastlane test şeklinde yazabilirsiniz.\nEğer bundle exec komutunda bir problem yaşarsanız komut satırında belirttiği şekilde bundle aracının güncellenmesini sağlayabilirsiniz. Sonrasında problem ortadan kalkacaktır.\n Örnek proje için;\n  https://github.com/aykuttasil/fastlane-sample  Kaynaklar  https://fastlane.tools/ https://www.raywenderlich.com/10187451-fastlane-tutorial-for-android-getting-started  ","permalink":"https://yazilim.aykutasil.com/fastlane-setup/","summary":"Fastlane, mobil ile ilgili neredeyse tüm süreçleri (build,test,deploy vs.) otomatize etmeye yarayan bir araçtır. Fastlane kullanarak hangi CI/CD platformunu kullanıyor olursanız olun uygulama süreçleriniz tekil hale getirebilirsiniz.\nKurulum brew install fastlane Fastlane aracının kurulumunu tamamladıktan sonra, ilk olarak projenizin root klasörüne gelip fastlane init komutunu çalıştırmalısınız.\n Komut satırında Package Name istenildiğinde uygulamamızın package name\u0026lsquo;ini (com.example.myapplication) giriyoruz. Diğer adımları şimdilik es geçebilirsiniz.  Proje yapılandırması tamamlandığında app klasörü ile aynı seviyede fastline isimli bir klasör oluşacak.","title":"Android Fastlane Kurulumu"},{"content":"Fastlane kurulumunu henüz tamamlamadıysanız sizi buraya alalım.\nScreengrab  Mobil ekran görüntüsü alımını otomatize eden bu aracın kullanımı için öncelikle aşağıdaki komut ile ilgili aracı yüklüyoruz.   sudo gem install screengrab  Daha sonra AndroidManifest.xml dosyasına aşağıdaki bloğu eklemeliyiz.   \u0026lt;!-- Allows unlocking your device and activating its screen so UI tests can succeed --\u0026gt;  \u0026lt;uses-permission android:name=\u0026#34;android.permission.DISABLE_KEYGUARD\u0026#34; /\u0026gt;  \u0026lt;uses-permission android:name=\u0026#34;android.permission.WAKE_LOCK\u0026#34; /\u0026gt;   \u0026lt;!-- Allows for storing and retrieving screenshots --\u0026gt;  \u0026lt;uses-permission android:name=\u0026#34;android.permission.WRITE_EXTERNAL_STORAGE\u0026#34; /\u0026gt;  \u0026lt;uses-permission android:name=\u0026#34;android.permission.READ_EXTERNAL_STORAGE\u0026#34; /\u0026gt;   \u0026lt;!-- Allows changing locales --\u0026gt;  \u0026lt;uses-permission xmlns:tools=\u0026#34;http://schemas.android.com/tools\u0026#34;  android:name=\u0026#34;android.permission.CHANGE_CONFIGURATION\u0026#34;  tools:ignore=\u0026#34;ProtectedPermissions\u0026#34; /\u0026gt;  Gradle dosyasını aşağıdaki gibi güncellemeliyiz.   android {   ...   defaultConfig {  applicationId \u0026#34;com.example.myapplication\u0026#34;  minSdkVersion 21  targetSdkVersion 30  versionCode 1  versionName \u0026#34;1.0\u0026#34;   testInstrumentationRunner \u0026#34;androidx.test.runner.AndroidJUnitRunner\u0026#34;  }   ... }  dependencies {  implementation \u0026#34;org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\u0026#34;  implementation \u0026#39;androidx.core:core-ktx:1.3.2\u0026#39;  implementation \u0026#39;androidx.appcompat:appcompat:1.2.0\u0026#39;  implementation \u0026#39;com.google.android.material:material:1.2.1\u0026#39;  implementation \u0026#39;androidx.constraintlayout:constraintlayout:2.0.4\u0026#39;   testImplementation \u0026#39;junit:junit:4.13.1\u0026#39;   androidTestImplementation \u0026#39;androidx.test.ext:junit:1.1.2\u0026#39;  androidTestImplementation \u0026#39;androidx.test:rules:1.3.0\u0026#39;  androidTestImplementation \u0026#39;androidx.test.espresso:espresso-core:3.3.0\u0026#39;   androidTestImplementation \u0026#39;tools.fastlane:screengrab:2.0.0\u0026#39; }  Daha sonra app/src/androidTest/ klasörü altında, ExampleInstrumentedTest.kt isimli dosyamızı oluşturuyoruz ve aşağıdaki gibi düzenliyoruz.  package com.example.myapplication  import androidx.test.espresso.Espresso import androidx.test.espresso.action.ViewActions import androidx.test.espresso.assertion.ViewAssertions import androidx.test.espresso.matcher.ViewMatchers import androidx.test.platform.app.InstrumentationRegistry import androidx.test.rule.ActivityTestRule import org.junit.Assert.assertEquals import org.junit.Rule import org.junit.Test import org.junit.runner.RunWith import org.junit.runners.JUnit4 import tools.fastlane.screengrab.Screengrab import tools.fastlane.screengrab.UiAutomatorScreenshotStrategy import tools.fastlane.screengrab.locale.LocaleTestRule  /** * Instrumented test, which will execute on an Android device. * * See [testing documentation](http://d.android.com/tools/testing). */ @RunWith(JUnit4::class) class ExampleInstrumentedTest {   // JVMField needed!  @Rule  @JvmField  val localeTestRule = LocaleTestRule()   @get:Rule  var activityRule = ActivityTestRule(MainActivity::class.java, false, false)   @Test  fun testTakeScreenshot() {  activityRule.launchActivity(null)  //1  Screengrab.setDefaultScreenshotStrategy(UiAutomatorScreenshotStrategy())   Espresso.onView(ViewMatchers.withId(R.id.askButton))  .check(ViewAssertions.matches(ViewMatchers.isDisplayed()))   //2  Screengrab.screenshot(\u0026#34;beforeFabClick\u0026#34;)   //3  Espresso.onView(ViewMatchers.withId(R.id.askButton)).perform(ViewActions.click())   //4  Screengrab.screenshot(\u0026#34;afterFabClick\u0026#34;)  }   @Test  fun useAppContext() {  // Context of the app under test.  val appContext = InstrumentationRegistry.getInstrumentation().targetContext  assertEquals(\u0026#34;com.example.myapplication\u0026#34;, appContext.packageName)  } } MainActivity layout dosyası aşağıdaki gibidir.\nactivity_main.xml\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;  xmlns:app=\u0026#34;http://schemas.android.com/apk/res-auto\u0026#34;  xmlns:tools=\u0026#34;http://schemas.android.com/tools\u0026#34;  android:layout_width=\u0026#34;match_parent\u0026#34;  android:layout_height=\u0026#34;match_parent\u0026#34;  tools:context=\u0026#34;.MainActivity\u0026#34;\u0026gt;   \u0026lt;TextView  android:id=\u0026#34;@+id/textView\u0026#34;  android:layout_width=\u0026#34;wrap_content\u0026#34;  android:layout_height=\u0026#34;wrap_content\u0026#34;  android:text=\u0026#34;Hello World!\u0026#34;  app:layout_constraintBottom_toBottomOf=\u0026#34;parent\u0026#34;  app:layout_constraintLeft_toLeftOf=\u0026#34;parent\u0026#34;  app:layout_constraintRight_toRightOf=\u0026#34;parent\u0026#34;  app:layout_constraintTop_toTopOf=\u0026#34;parent\u0026#34; /\u0026gt;   \u0026lt;Button  android:id=\u0026#34;@+id/askButton\u0026#34;  android:layout_width=\u0026#34;wrap_content\u0026#34;  android:layout_height=\u0026#34;wrap_content\u0026#34;  android:text=\u0026#34;Button\u0026#34;  app:layout_constraintEnd_toEndOf=\u0026#34;parent\u0026#34;  app:layout_constraintStart_toStartOf=\u0026#34;parent\u0026#34;  app:layout_constraintTop_toBottomOf=\u0026#34;@+id/textView\u0026#34; /\u0026gt;  \u0026lt;/androidx.constraintlayout.widget.ConstraintLayout\u0026gt;  Daha sonra aşağıdaki komut ile debug ve androidTest apk\u0026rsquo;larının oluşturulmasını sağlarız.  ./gradlew assembleDebug assembleAndroidTest  Aşağıdaki komut ile fastlane/Screengrabfile dosyasının oluşmasını sağlıyoruz.  bundle exec fastlane screengrab init Ve aşağıdaki gibi ilgili yerleri uygulamamıza yönelik olarak düzenliyoruz.\nScreengrabfile\n# remove the leading \u0026#39;#\u0026#39; to uncomment lines app_package_name(\u0026#39;com.example.myapplication\u0026#39;) # use_tests_in_packages([\u0026#39;your.screenshot.tests.package\u0026#39;]) app_apk_path(\u0026#39;app/build/outputs/apk/debug/app-debug.apk\u0026#39;) tests_apk_path(\u0026#39;app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk\u0026#39;) locales([\u0026#39;tr-TR\u0026#39;]) # clear all previously generated screenshots in your local output directory before creating new ones clear_previous_screenshots(true) # For more information about all available options run # fastlane screengrab --help Screengrab komutunun çalıştırılması  Note: If you run an emulator with API 24 or above, you must configure it with the Google APIs target. An emulator with Google Play won’t work because adb needs to run as root. That’s only possible with the Google APIs target. However, if you run a device or emulator with API 23 or below, either option will work. See comment #15788 under fastlane issues for more information.\n   Yani, Eğer apk\u0026rsquo;nızı bir android emülatörde koşturacak iseniz, emülatörünüzü Google APIs target olarak kurulmuş olması gerekmekte.\n  Eğer fiziksel cihazınızda çalıştıracak iseniz Geliştirici Seçenekleri \u0026gt; USB debugging(Security Settings) seçeneğinin açık olması gerekmektedir.\n  Komut satırının gerekli komutları çalıştırabilmesi için aşağıdaki şekilde PATH güncellenmiş olmalıdır.\n  # Path to Android SDK export ANDROID_HOME=$HOME/Library/Android/sdk  # Path to Android platform tools (adb, fastboot, etc) export ANDROID_PLATFORM_TOOLS=\u0026#34;$ANDROID_HOME/platform-tools\u0026#34;  # Path to Android tools (aapt, apksigner, zipalign, etc) export ANDROID_TOOLS=\u0026#34;$ANDROID_HOME/build-tools/30.0.1/\u0026#34;  # Add all to the path export PATH=\u0026#34;$PATH:$ANDROID_PLATFORM_TOOLS:$ANDROID_TOOLS\u0026#34; Ve tüm ayarlamalar bittiğine göre artık komutumuzu çalıştırabiliriz.\nbundle exec fastlane screengrab Tüm bu adımları Fastfile dosyasına lane olarak ekleyebiliriz.\ndesc \u0026#34;Build debug and test APK for screenshots\u0026#34; lane :build_for_screengrab do gradle( task: \u0026#39;clean\u0026#39; ) gradle( task: \u0026#39;assemble\u0026#39;, build_type: \u0026#39;Debug\u0026#39; ) gradle( task: \u0026#39;assemble\u0026#39;, build_type: \u0026#39;AndroidTest\u0026#39; ) end Ve aşağıdaki komut ile tüm akışı çalıştırabiliriz.\nbundle exec fastlane build_for_screengrab \u0026amp;\u0026amp; bundle exec fastlane screengrab  Örnek proje için;\n  https://github.com/aykuttasil/fastlane-sample  Kaynaklar  https://fastlane.tools/ https://www.raywenderlich.com/10187451-fastlane-tutorial-for-android-getting-started https://docs.fastlane.tools/getting-started/android/screenshots/ https://docs.fastlane.tools/actions/capture_android_screenshots/  ","permalink":"https://yazilim.aykutasil.com/fastlane-screengrab/","summary":"Fastlane kurulumunu henüz tamamlamadıysanız sizi buraya alalım.\nScreengrab  Mobil ekran görüntüsü alımını otomatize eden bu aracın kullanımı için öncelikle aşağıdaki komut ile ilgili aracı yüklüyoruz.   sudo gem install screengrab  Daha sonra AndroidManifest.xml dosyasına aşağıdaki bloğu eklemeliyiz.   \u0026lt;!-- Allows unlocking your device and activating its screen so UI tests can succeed --\u0026gt;  \u0026lt;uses-permission android:name=\u0026#34;android.permission.DISABLE_KEYGUARD\u0026#34; /\u0026gt;  \u0026lt;uses-permission android:name=\u0026#34;android.permission.WAKE_LOCK\u0026#34; /\u0026gt;   \u0026lt;!-- Allows for storing and retrieving screenshots --\u0026gt;  \u0026lt;uses-permission android:name=\u0026#34;android.","title":"Android Fastlane Screengrab Kurulumu"},{"content":"Android projesi oluşturduğunuzda aşağıdaki gibi AndroidManifest.xml ve build.gradle dosyaları oluşur. AndroidManifest.xml içerisinde package tagı ve build.gradle içerisinde applicationId niteliği bulunur.\nPeki bu ikisi arasındaki fark nedir?\npackage=\u0026ldquo;com.example.myapp\u0026rdquo; ile belirttiğimiz kısım aslında projemizin klasör yapısını ifade eder. Yani com \u0026gt; example \u0026gt; myapp şeklinde bir tree yapısı vardır. Ve biz proje dosyalarımızı bu dizin altında oluşturmaya başlarız. Örneğin MainActivity dosyası oluşturduğumuzda aslında bu dosyanın yolu com.example.myapp.MainActivity olur. Projemiz derlenme sırasında package değerine bakar ve dosyaları bu adrese göre bulur. AndroidManifest.xml dosyasına bir \u0026lt;activity\u0026gt; tanımlaması yaparken name=\u0026quot;.MainActivity\u0026quot; şeklinde belirtiriz. Aslında demek istediğimiz com.example.myapp.Mainactivity şeklinde olur. Ve ayrıca R sınıfları yine bu package değerine göre oluşturulur.\napplicationId, projemizi temsil eden tekil değerdir. Bir projenin applicationId değeri sonradan değiştirilemez. Ama package değeri değiştirilebilir. Projemizi belli bir applicationId ile derledikten sonra Play Store\u0026lsquo;a deploy ettiğimizde artık bu id\u0026lsquo;yi değiştiremeyiz. Çünkü projemiz artık bu id ile eşleştirilmiştir. Tüm değerleri aynı kalmakla beraber(signing değeri dahil = aynı keystore) sadece applicationId değerini değiştirip tekrar Play Store\u0026lsquo;a yükleyecek olursak bu proje tamamen farklı bir proje olarak algılanır.\nBununla birlikte projemiz derlendiğinde, Android Studio package değerine bakarak dosya yollarını bulacak, işini halledecek ve sonrasında bu package değeri applicationId değeri ile değiştirilecek. Günün sonunda package değeri, asıl bakılan yer oluyor ama bu değer de aslında applicationId ile belirtiliyor.\n Although you may have a different name for the manifest package and the Gradle applicationId, the build tools copy the application ID into your APK\u0026rsquo;s final manifest file at the end of the build. So if you inspect your AndroidManifest.xml file after a build, don\u0026rsquo;t be surprised that the package attribute has changed. The package attribute is where Google Play Store and the Android platform actually look to identify your app; so once the build has made use of the original value (to namespace the R class and resolve manifest class names), it discards that value and replaces it with the application ID.\n Ayrıntlı bilgi için şuraya bakabilirsiniz.\n Best practice, package ve applicationId değerlerinin aynı olmasıdır.\n build.gradle\nandroid {  defaultConfig {  applicationId \u0026#34;com.example.myapp\u0026#34;  minSdkVersion 15  targetSdkVersion 24  versionCode 1  versionName \u0026#34;1.0\u0026#34;  }  ... } AndroidManifest.xml\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;manifest xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;  package=\u0026#34;com.example.myapp\u0026#34;  android:versionCode=\u0026#34;1\u0026#34;  android:versionName=\u0026#34;1.0\u0026#34; \u0026gt; Kaynaklar  https://developer.android.com/studio/build/application-id  ","permalink":"https://yazilim.aykutasil.com/android-applicationid-vs-packagename/","summary":"Android projesi oluşturduğunuzda aşağıdaki gibi AndroidManifest.xml ve build.gradle dosyaları oluşur. AndroidManifest.xml içerisinde package tagı ve build.gradle içerisinde applicationId niteliği bulunur.\nPeki bu ikisi arasındaki fark nedir?\npackage=\u0026ldquo;com.example.myapp\u0026rdquo; ile belirttiğimiz kısım aslında projemizin klasör yapısını ifade eder. Yani com \u0026gt; example \u0026gt; myapp şeklinde bir tree yapısı vardır. Ve biz proje dosyalarımızı bu dizin altında oluşturmaya başlarız. Örneğin MainActivity dosyası oluşturduğumuzda aslında bu dosyanın yolu com.example.myapp.MainActivity olur. Projemiz derlenme sırasında package değerine bakar ve dosyaları bu adrese göre bulur.","title":"Android applicationId vs package name"},{"content":" Gerekli Uygulamaların Kurulması\n Öncelikle şu siteye giderek hem bilgisayarımız hem de telefonumuz için IRION uygulamasını indirip kuruyoruz.\nDaha sonra bilgisayarımız ile telefonumuzun aynı ağa bağlı olduğundan emin oluyoruz.\nBu kadar. :)\nArtık telefonun kamerasını sanki bilgisayarımıza takılı bir webcam gibi kullanabilir ve kaliteli görüntü aktarabiliriz.\n Zoom uygulamasında kamera kaynağı olarak telefon kamerası (Virtual Cam) görünmüyor. Çözüm için terminal\u0026lsquo;ı açarak aşağıdaki komut satırını yazmamız yeterli olacaktır. Yazmadan önce Zoom uygulamasını kapattığımızdan emin olalım.\ncodesign --remove-signature /Applications/zoom.us.app Kaynaklar  https://fatihhayrioglu.com/telefonu-bilgisayarin-web-kamerasi-olarak-tanimlamak/ https://iriun.com/  ","permalink":"https://yazilim.aykutasil.com/telefonun-kamerasini_web-kamerasi-gibi-kullanmak/","summary":"Gerekli Uygulamaların Kurulması\n Öncelikle şu siteye giderek hem bilgisayarımız hem de telefonumuz için IRION uygulamasını indirip kuruyoruz.\nDaha sonra bilgisayarımız ile telefonumuzun aynı ağa bağlı olduğundan emin oluyoruz.\nBu kadar. :)\nArtık telefonun kamerasını sanki bilgisayarımıza takılı bir webcam gibi kullanabilir ve kaliteli görüntü aktarabiliriz.\n Zoom uygulamasında kamera kaynağı olarak telefon kamerası (Virtual Cam) görünmüyor. Çözüm için terminal\u0026lsquo;ı açarak aşağıdaki komut satırını yazmamız yeterli olacaktır. Yazmadan önce Zoom uygulamasını kapattığımızdan emin olalım.","title":"Telefonun Kamerasini Web Kamerası Gibi Kullanmak"},{"content":" launchSettings.json dosyası sadece local\u0026lsquo;de development yaparken kullanılan bir dosyadır. Visual Studio veya dotnet cli ile birlikte kullanılır.\n Not: Eğer uygulamamızı sunucuyu deploy ettikten sonra ulaşmak istediğimiz ayarlar var ise bunun belirtilmesi gereken yer launchSettings.json dosyası değildir. Bu tür ayarlar genelde appSettings.json dosyası içerisinde tanımlanır.\n launchSettings.json dosyası {  \u0026#34;iisSettings\u0026#34;: {  \u0026#34;windowsAuthentication\u0026#34;: false,  \u0026#34;anonymousAuthentication\u0026#34;: true,  \u0026#34;iisExpress\u0026#34;: {  \u0026#34;applicationUrl\u0026#34;: \u0026#34;http://localhost:59119\u0026#34;,  \u0026#34;sslPort\u0026#34;: 0  }  },  \u0026#34;profiles\u0026#34;: {  \u0026#34;IIS Express\u0026#34;: {  \u0026#34;commandName\u0026#34;: \u0026#34;IISExpress\u0026#34;,  \u0026#34;launchBrowser\u0026#34;: true,  \u0026#34;environmentVariables\u0026#34;: {  \u0026#34;ASPNETCORE_ENVIRONMENT\u0026#34;: \u0026#34;Development\u0026#34;  }  },  \u0026#34;FirstCoreWebApplication\u0026#34;: {  \u0026#34;commandName\u0026#34;: \u0026#34;Project\u0026#34;,  \u0026#34;launchBrowser\u0026#34;: true,  \u0026#34;applicationUrl\u0026#34;: \u0026#34;http://localhost:5000,https://localhost:5000\u0026#34;,  \u0026#34;environmentVariables\u0026#34;: {  \u0026#34;ASPNETCORE_ENVIRONMENT\u0026#34;: \u0026#34;Development\u0026#34;  }  }  } Yukarıdaki dosyayı inceleyecek olursak profiles tagı altında IIS Express ve FirstCoreWebApplication tagları olduğunu görürüz. Ve bu tagların commandName değerleri IISExpress ve Project olarak tanımlanmıştır.\nFirstCoreWebApplication uygulamamızın ismidir. Varsayılan olarak, eğer Visual Studio kullanarak run edersek \u0026quot;commandName\u0026quot;: \u0026quot;IISExpress\u0026quot; bloğu, eğer CLI kullanarak yani dotnet run şeklinde komut yazarak run edersek \u0026quot;commandName\u0026quot;: \u0026quot;Project\u0026quot; bloğu ayarları uygulanacaktır.\nİhtiyacımıza göre yeni profile oluşturulabilir ve Visual Studio üzerinden profile seçilerek hangi ayarların uygulanmasını istediğimizi seçebiliriz.\ncommandName parametresi 3 değer alabilir:\n IISExpress IIS Project  Aşağıdaki tablo ile projenin internal web server ve external web server yapılandırmasının nasıl olacağını görebilirsiniz.\nInProcess: IIS host the app (w3wp.exe or iisexpress.exe)\nOutOfProcess: Kestrel host the app, IIS is a proxy to kestrel.\ncommandName:Project olarak ayarlanan profile bloğu ile çalıştırılan proje her zaman kestrel kullanır.\n Yukarıdaki ifadelerin ne anlama geldiğini biraz daha açık şekilde belirtelim.\nAsp.Net Core uygulamasını iki şekilde barındırabiliriz:\n IIS Kestrel  Projemizi windows üzerinde koşturacak isek, eskiden olduğu gibi IIS üzerinden bunu sağlayabiliriz. Arada kestrel web server olmadan direkt olarak istekleri IIS karşılar ve projemize iletir.\nBununla beraber bir de OutOfProcess hosting modeli vardır. Bu modelde istekler yine IIS tarafından karşılanır. Ve projemizin iç haberleşmesi için ayağa kaldırdığı kestrel web server\u0026rsquo;a bu istekler iletilir. Yani IIS -\u0026gt; Kestrel -\u0026gt; Projemiz şeklinde istekler işlenir ve geri döndürülür.\n Windows üzerinde koşturulan Asp.Net Core projelerinin arada Kestrel olmadan host edilmesi performans anlamında büyük fark oluşturur.\n Bununla beraber projemiz windows üzerinde koşmayacak ise zaten IIS yapılandırması olmayacağı için kestrel üzerinden host edilir. Fakat burada projemizi sadece kestrel web sunucusu ile host etmekten ziyade yine IIS\u0026lsquo;in reverse proxy görevini üstlenecek olan nginx, apache gibi bir çok özelliği barındıran(cache vb.) web server\u0026rsquo;lar kullanılabilir.\nYani örneğin ön tarafta nginx yapılandırılmış olan projemize gelen istekler Nginx -\u0026gt; Kestrel -\u0026gt; Projemiz şeklinde olacaktır.\nLinux serverlarda nginx kullanarak asp.net core uygulamasının koşturulması için şu sayfayı ziyaret edebilirsiniz.\n Kaynaklar  https://dotnettutorials.net/lesson/asp-net-core-launchsettings-json-file/ https://docs.microsoft.com/tr-tr/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-3.1  ","permalink":"https://yazilim.aykutasil.com/aspnetcore-launchsettings-file/","summary":"launchSettings.json dosyası sadece local\u0026lsquo;de development yaparken kullanılan bir dosyadır. Visual Studio veya dotnet cli ile birlikte kullanılır.\n Not: Eğer uygulamamızı sunucuyu deploy ettikten sonra ulaşmak istediğimiz ayarlar var ise bunun belirtilmesi gereken yer launchSettings.json dosyası değildir. Bu tür ayarlar genelde appSettings.json dosyası içerisinde tanımlanır.\n launchSettings.json dosyası {  \u0026#34;iisSettings\u0026#34;: {  \u0026#34;windowsAuthentication\u0026#34;: false,  \u0026#34;anonymousAuthentication\u0026#34;: true,  \u0026#34;iisExpress\u0026#34;: {  \u0026#34;applicationUrl\u0026#34;: \u0026#34;http://localhost:59119\u0026#34;,  \u0026#34;sslPort\u0026#34;: 0  }  },  \u0026#34;profiles\u0026#34;: {  \u0026#34;IIS Express\u0026#34;: {  \u0026#34;commandName\u0026#34;: \u0026#34;IISExpress\u0026#34;,  \u0026#34;launchBrowser\u0026#34;: true,  \u0026#34;environmentVariables\u0026#34;: {  \u0026#34;ASPNETCORE_ENVIRONMENT\u0026#34;: \u0026#34;Development\u0026#34;  }  },  \u0026#34;FirstCoreWebApplication\u0026#34;: {  \u0026#34;commandName\u0026#34;: \u0026#34;Project\u0026#34;,  \u0026#34;launchBrowser\u0026#34;: true,  \u0026#34;applicationUrl\u0026#34;: \u0026#34;http://localhost:5000,https://localhost:5000\u0026#34;,  \u0026#34;environmentVariables\u0026#34;: {  \u0026#34;ASPNETCORE_ENVIRONMENT\u0026#34;: \u0026#34;Development\u0026#34;  }  }  } Yukarıdaki dosyayı inceleyecek olursak profiles tagı altında IIS Express ve FirstCoreWebApplication tagları olduğunu görürüz.","title":"Asp.Net Core launchSettings.json Kullanımı"},{"content":"Javascript dilinin nasıl yorumlandığı ile alakalı bir durum olan Hoisting kavramını bilmekte fayda var diye düşünüyorum. Örneğin aşağıdaki gibi bir kod yazdığımızda;\nconsole.log(username); var username = \u0026#34;aykuttasil\u0026#34;; alacağımız çıktı undefined şeklinde olur. Normal şartlarda beklediğimiz sonuç hata fırlatmasıdır. Çünkü username değişkeni tanımlanmadan önce yazdırılmaya çalışılmıştır. Ama beklediğimiz şekilde olmaz ve ekrana undefined yazılır.\nPeki Neden? Yukarıdaki gibi bir kod bloğu çalıştırılmadan önce javacsript tarafından hoisting işlemi uygulanır ve tüm var değişkenleri kod bloğunun(scope) en üstüne taşınır ve default olarak undefined atanır. Yani aslında kod aşağıdaki hale dönüşür:\nvar username = undefined; console.log(username); username = \u0026#34;aykuttasil\u0026#34;; Bu nedenle ekrana undefined yazılır. Yani username değişkeni diye bir değişken var ama henüz bir değer ataması yapılmamış.\nPeki ne yapmak gerekir? Javascript yazarken çok dikkatli oluyoruz :D Ve bu sorunu çözmek için ES2015(ES6) ile birlikte gelen let ve const tipinde değişken oluşturmaya özen gösteriyoruz.\n Bir de şuraya let,const ve var değişken farkları ve hosting işlevini özetleyen maddeleri bırakalım.\n var declarations are globally scoped or function scoped while let and const are block scoped. var variables can be updated and re-declared within its scope; let variables can be updated but not re-declared; const variables can neither be updated nor re-declared. They are all hoisted to the top of their scope. But while var variables are initialised with undefined, let and const variables are not initialised. While var and let can be declared without being initialised, const must be initialised during declaration.  Kaynaklar  https://www.freecodecamp.org/news/var-let-and-const-whats-the-difference/  ","permalink":"https://yazilim.aykutasil.com/javascript-hoisting/","summary":"Javascript dilinin nasıl yorumlandığı ile alakalı bir durum olan Hoisting kavramını bilmekte fayda var diye düşünüyorum. Örneğin aşağıdaki gibi bir kod yazdığımızda;\nconsole.log(username); var username = \u0026#34;aykuttasil\u0026#34;; alacağımız çıktı undefined şeklinde olur. Normal şartlarda beklediğimiz sonuç hata fırlatmasıdır. Çünkü username değişkeni tanımlanmadan önce yazdırılmaya çalışılmıştır. Ama beklediğimiz şekilde olmaz ve ekrana undefined yazılır.\nPeki Neden? Yukarıdaki gibi bir kod bloğu çalıştırılmadan önce javacsript tarafından hoisting işlemi uygulanır ve tüm var değişkenleri kod bloğunun(scope) en üstüne taşınır ve default olarak undefined atanır.","title":"Javascript Hoisting"},{"content":" Docker ile ilgili komut listesine erişmek için komut satırına docker --help ya da sadece docker yazabilirsiniz.\n docker run Docker ile ilgili bir çok temel fonksiyonu docker run komutu ile sağlayabilirsiniz.\n Hızlıca Docker Hub\u0026lsquo;da bulunan bir image\u0026rsquo;i makinemize kurmak istiyorsak aşağıdaki komut işimizi görecektir.  docker run ubuntu Yukarıda ki komutu yazdığınızda ilk önce ilgili image dosyasının makinenizde olup olmadığına bakılır ve sonrasında eğer varsa zaten inmiş olan image çalıştırılılr. Eğer yoksa ilk önce docker hub\u0026lsquo;dan indirilirek makinenize kurulur ve sonrasında çalıştırılır.\nEğer sadece docker run ubuntu şeklinde komutumuzu yazacak olursa aslında bu komut default olarak ubuntu:latest versiyonunu indirecektir. Yani docker run ubuntu:latest ile aynı işlevi görecektir. Ama biz belli bir versiyonu indirip kurmak istiyorsak o zaman versiyon adını(tag) belirtmemiz gerek. Yani;\ndocker run ubuntu:trusty Kurmak istediğimiz image hangi versiyonlara sahip olduğunu görmek istersek adres -\u0026gt; Docker Hub\n Makinemizde kurulu image\u0026rsquo;lerin listesini docker images komutu ile görebiliriz.  docker run komutunun alabileceği bir çok parametre mevcut. Yine aynı şekilde bu komutun alabileceği parametreleri görmek için docker run --help yazabiliriz.\n docker run --rm -i -t ubuntu Yukarıdaki komutu açıklayalım:\n --rm : container ile işimiz bittiğinde otomatik olarak sil demek -i -t : interaktif mod, yani başlattığımız container ile etkileşim kurabilmemizi sağlıyor. Bu parametreler olmadan çalıştırılan container otomatik olarak başlar, entrypoint olarak verilen komutu işler ve sonrasında çıkar. Ama biz container ile etkileşim kurmak istiyorsak -i -t şeklinde parametre eklememiz gerekmektedir.   docker ps   Makinemizde şu an çalışan container\u0026rsquo;ları listelemek istersek docker ps komutunu yazabiliriz.\n  Makinemizde daha önce çalıştırdığımız ve şu an pasif durumda olan container\u0026rsquo;ları listelemek istersek docker ps -a komutunu yazabiliriz.\n  docker run --rm şeklinde çalıştırdığımız container\u0026rsquo;lar işimiz bittiğinde otomatik olarak silineceği için docker ps -a komutunu çalıştırdığımızda listelenmediğini görücez. Fakat --rm olmadan çalıştırıp kapatmışsak docker ps -a ile listelendiği görebiliriz.\nŞimdilik bu kadar. İkinci kısımda görüşmek üzere.\nKaynaklar  https://www.youtube.com/watch?v=-7tl9-bYnqE\u0026amp;list=PLe1QWkyzVMv6psIEboToi7sbcNpQlhc9c  ","permalink":"https://yazilim.aykutasil.com/docker-series-1/","summary":"Docker ile ilgili komut listesine erişmek için komut satırına docker --help ya da sadece docker yazabilirsiniz.\n docker run Docker ile ilgili bir çok temel fonksiyonu docker run komutu ile sağlayabilirsiniz.\n Hızlıca Docker Hub\u0026lsquo;da bulunan bir image\u0026rsquo;i makinemize kurmak istiyorsak aşağıdaki komut işimizi görecektir.  docker run ubuntu Yukarıda ki komutu yazdığınızda ilk önce ilgili image dosyasının makinenizde olup olmadığına bakılır ve sonrasında eğer varsa zaten inmiş olan image çalıştırılılr.","title":"Docker Series - 1"},{"content":"Docker Container\u0026rsquo;ı Detach modda çalıştırmak Uygulamanızı yazarken eğer thread\u0026rsquo;ler ile biraz derin bir ilişki kurmuşsanız daemon kavramıyla karşılaşmış olabilirsiniz. Kısaca, \u0026ldquo;arka tarafa git ve sessiz sedasız çalışmaya devam et\u0026rdquo; demek diyebiliriz. Ayrıntılı bilgi için -\u0026gt; Google :)\nAynı mantık ile container\u0026lsquo;ımızın arka planda sesiz sedasız çalışmasını isteyebiliriz. Örneğin web sitemizi bir container\u0026rsquo;a kurduk, yerleştirdik ve belli bir port üzerinden dışarıya açtık. Ve artık bu container kapanmadan sürekli çalışması gerekiyor ki web sitemize erişebilelim. Bunun için container\u0026lsquo;ımızın arka planda sürekli çalışır modda yani detach modda çalışması gerekmektedir. Aşağıdaki komut satırı ile bunu gerçekleştirebiliriz.\ndocker run -d --name my-nginx-container nginx  -d parametresi ile container\u0026lsquo;ımızın detach modda çalışmasını sağlıyoruz. docker ps -a komutu ile container\u0026lsquo;ımızın çalıştığını görebiliriz.\n Detach modda çalıştırılan bir Container\u0026rsquo;ı tekrar önyüze getirmek docker attach my-nginx-container Yukarıda ki komut satırı ile arka planda çalışan container\u0026lsquo;ımızı tekrar önyüze getirebiliriz.\n Docker Image Makinemizde yüklü docker image\u0026rsquo;larını listelemek istersek\ndocker image list komutunu kullanabiliriz.\nEğer makinemizden bir image\u0026lsquo;ı kaldırmak istersek\ndocker rmi imageId veya name komutunu kullanabiliriz.\nEğer silmek istediğimiz image\u0026lsquo;ı daha önce çalışıp duran veya hala çalışıyor durumunda olan bir container var ise şu şekilde bir hata mesajı fırlatılır.\nEğer ne olursa olsun sil demek istersek -f parametresini eklememiz yeterli olacaktır. Yani;\ndocker rmi -f imageId veya name  Container \u0026ndash;restart=always Eğer ayağa kaldırdığımız bir container\u0026lsquo;ın ölmesi durumunda otomatik olarak tekrar koşmasını istersek run komutuna --restart=always parametresini verebiliriz.\ndocker run -d --restart=always --name=web nginx  Docker exec komutu Eğer çalışan bir container\u0026lsquo;ın içerisinde bir komut çalıştırmak istersek exec komutunu kullanabiliriz.\nÖrneğin nginx image\u0026rsquo;ini kullanarak bir container ayağa kaldırdık.\n docker run -d --name=web nginx\n Ve bu container\u0026lsquo;ın içine girerek date komutunu çalıştırmak istiyoruz. Ya da container\u0026lsquo;ın içindeki bash\u0026rsquo;e erişmek istiyoruz. Bunun için;\n# docker exec -i -t continerId \u0026amp; name command  docker exec -i -t web date  docker exec -i -t web bash komutlarını kullanabiliriz.\n Kaynaklar  https://docs.docker.com/engine/reference/commandline/attach/ https://www.youtube.com/watch?v=ZoRfHakBLX4  ","permalink":"https://yazilim.aykutasil.com/docker-series-2/","summary":"Docker Container\u0026rsquo;ı Detach modda çalıştırmak Uygulamanızı yazarken eğer thread\u0026rsquo;ler ile biraz derin bir ilişki kurmuşsanız daemon kavramıyla karşılaşmış olabilirsiniz. Kısaca, \u0026ldquo;arka tarafa git ve sessiz sedasız çalışmaya devam et\u0026rdquo; demek diyebiliriz. Ayrıntılı bilgi için -\u0026gt; Google :)\nAynı mantık ile container\u0026lsquo;ımızın arka planda sesiz sedasız çalışmasını isteyebiliriz. Örneğin web sitemizi bir container\u0026rsquo;a kurduk, yerleştirdik ve belli bir port üzerinden dışarıya açtık. Ve artık bu container kapanmadan sürekli çalışması gerekiyor ki web sitemize erişebilelim.","title":"Docker Series - 2"},{"content":"Android 10 ile birlikte gelen değişiklerden biri de Location dinleme ile alakalıdır. Uygulamamız arka plandayken (background) ve ön plandayken (foreground) konum dinleme şekilleri farklılık göstermektedir. Uygulamımız bize görünür vaziyette ise yani foreground\u0026lsquo;da ise her hangi bir değişiklik yapmamıza gerek yoktur. Fakat Home tuşuna basarak veya başka bir uygulama açarak uygulamamızı arka plana atıyorsak ve bu sırada konum dinlemesinin devam etmesini istiyorsak bazı düzenlemeler yapmamız gerekmektedir.\nİki şekilde background konum dinlemesi yapılabilir.\n Foreground Service Kullanımı   \u0026lt;!-- https://developer.android.com/reference/android/R.attr.html#foregroundServiceType --\u0026gt;  \u0026lt;service  android:name=\u0026#34;.services.MyLocationService\u0026#34;  android:foregroundServiceType=\u0026#34;location\u0026#34;/\u0026gt;  Manifest dosyasına service tanımlaması yaparken, android:foregroundServiceType=\u0026quot;location\u0026quot; şeklinde ekleme yapıyoruz. Servisimizi ContextCompat.startForegroundService(app,serviceIntent) şeklinde başlatıyoruz. Servisimizi location dinleceyecek şekilde yapılandırıyoruz. Servisimiz içerisinde uygun şekilde startForeground() metodunu çağırarak, kullanıcının bildirim ekranında uygulamamıza ait bir bildirim görmesini sağlıyoruz.   Service kullanımı ile alakalı problem yaşıyorsanız buradan ayrıntılı bilgi edinebilirsiniz.\n ACCESS_BACKGROUND_LOCATION  Eğer location dinlemek için bir servis yapılandırmak istemiyorsanız ve uygulamanız arka planda iken location dinlemeye devam etmek istiyorsanız normal location izinleri haricinde ek olarak ACCESS_BACKGROUND_LOCATION iznini de almanız gerekmektedir.\nBu izni eklediğinizde Android 10 ve üstü cihazlarda aşağıdaki gibi bir dialog görünür. Normal izinler için görünen dialog penceresinden farkı Allow all the time seçeneğinin olmasıdır. Bu seçenek uygulama background\u0026lsquo;da olsa dahi her zaman location dinlemesine izin ver demektir.\n İlk olarak AndroidManifest dosyanızı aşağıdaki gibi düzenlemelisiniz.  \u0026lt;manifest ...\u0026gt;  \u0026lt;uses-permission android:name=\u0026#34;android.permission.ACCESS_COARSE_LOCATION\u0026#34; /\u0026gt;  \u0026lt;uses-permission android:name=\u0026#34;android.permission.ACCESS_BACKGROUND_LOCATION\u0026#34; /\u0026gt; \u0026lt;/manifest\u0026gt;  Sonrasında uygulamanıza aşağıdaki gibi ACCESS_BACKGROUND_LOCATION iznini de isteyen bir akış kurmalısınız.  val permissionAccessCoarseLocationApproved = ActivityCompat  .checkSelfPermission(this, permission.ACCESS_COARSE_LOCATION) ==  PackageManager.PERMISSION_GRANTED  if (permissionAccessCoarseLocationApproved) {  val backgroundLocationPermissionApproved = ActivityCompat  .checkSelfPermission(this, permission.ACCESS_BACKGROUND_LOCATION) ==  PackageManager.PERMISSION_GRANTED   if (backgroundLocationPermissionApproved) {  // App can access location both in the foreground and in the background.  // Start your service that doesn\u0026#39;t have a foreground service type  // defined.  } else {  // App can only access location in the foreground. Display a dialog  // warning the user that your app must have all-the-time access to  // location in order to function properly. Then, request background  // location.  ActivityCompat.requestPermissions(this,  arrayOf(Manifest.permission.ACCESS_BACKGROUND_LOCATION),  your-permission-request-code  )  } } else {  // App doesn\u0026#39;t have access to the device\u0026#39;s location at all. Make full request  // for permission.  ActivityCompat.requestPermissions(this,  arrayOf(Manifest.permission.ACCESS_COARSE_LOCATION,  Manifest.permission.ACCESS_BACKGROUND_LOCATION),  your-permission-request-code  ) } Uygulama arka planda iken location isteğinde bulunur ise bildirim ekranında aşağıdaki gibi bir bildirim görünecektir.\n  Codelab olarak hazırlanmış bu sayfayı ziyaret edebilirsiniz.\n Kaynaklar  https://developer.android.com/about/versions/10/privacy/changes https://developer.android.com/training/location/receive-location-updates https://codelabs.developers.google.com/codelabs/while-in-use-location/index.html?index=..%2F..index#0  ","permalink":"https://yazilim.aykutasil.com/android-background-location/","summary":"Android 10 ile birlikte gelen değişiklerden biri de Location dinleme ile alakalıdır. Uygulamamız arka plandayken (background) ve ön plandayken (foreground) konum dinleme şekilleri farklılık göstermektedir. Uygulamımız bize görünür vaziyette ise yani foreground\u0026lsquo;da ise her hangi bir değişiklik yapmamıza gerek yoktur. Fakat Home tuşuna basarak veya başka bir uygulama açarak uygulamamızı arka plana atıyorsak ve bu sırada konum dinlemesinin devam etmesini istiyorsak bazı düzenlemeler yapmamız gerekmektedir.\nİki şekilde background konum dinlemesi yapılabilir.","title":"Android Background Location"},{"content":"Kotlin DSL kullanarak Json Objesi nasıl oluşturulur ? Normalde Json objesi oluşturmak için aşağıdaki gibi bir yöntem izleriz.\nval jsonObject = JSONObject() jsonObject.put(\u0026#34;name\u0026#34;,\u0026#34;Aykut\u0026#34;) jsonObject.put(\u0026#34;age\u0026#34;,20) Bunu Kotlin DSL ile çok daha ergonomik bir şekilde hazırlayabiliriz.\nÖncelikle Json isminde bir sınıf oluşturuyoruz ve JsonObject sınıfından kalıtım alıyoruz. Ve DSL kullanabilmek için gerekli custom constructor fonksiyonumuzu yazıyoruz.\nclass Json() : JSONObject() {  constructor(json: Json.() -\u0026gt; Unit) : this() {  this.init()  } } Json objemizi hazırlarken kolaylık olsun diye bir infix fonksiyonu ekliyoruz. Bu sayede \u0026quot;name\u0026quot; to \u0026quot;Aykut\u0026quot; , \u0026quot;age\u0026quot; to 20 gibi değerler girebiliriz.\nclass Json() : JSONObject() {  constructor(json: Json.() -\u0026gt; Unit) : this() {  this.init()  }   infix fun \u0026lt;T\u0026gt; String.to(value: T) {  put(this, value)  } } Json objemizi doldurmak aşağıdaki gibi hazırlayabiliriz.\nval json = Json {  \u0026#34;name\u0026#34; to \u0026#34;Aykut\u0026#34;  \u0026#34;age\u0026#34; to 20 } Oluşturduğumuz nesneyi print edersek aşağıdaki gibi bir çıktı elde ederiz.\n{\u0026#34;name\u0026#34;:\u0026#34;Aykut\u0026#34;,\u0026#34;age\u0026#34;:20} Kaynaklar  https://blog.mindorks.com/mastering-kotlin-dsl-in-android-step-by-step-guide  ","permalink":"https://yazilim.aykutasil.com/create-json-with-kotlin-dsl/","summary":"Kotlin DSL kullanarak Json Objesi nasıl oluşturulur ? Normalde Json objesi oluşturmak için aşağıdaki gibi bir yöntem izleriz.\nval jsonObject = JSONObject() jsonObject.put(\u0026#34;name\u0026#34;,\u0026#34;Aykut\u0026#34;) jsonObject.put(\u0026#34;age\u0026#34;,20) Bunu Kotlin DSL ile çok daha ergonomik bir şekilde hazırlayabiliriz.\nÖncelikle Json isminde bir sınıf oluşturuyoruz ve JsonObject sınıfından kalıtım alıyoruz. Ve DSL kullanabilmek için gerekli custom constructor fonksiyonumuzu yazıyoruz.\nclass Json() : JSONObject() {  constructor(json: Json.() -\u0026gt; Unit) : this() {  this.init()  } } Json objemizi hazırlarken kolaylık olsun diye bir infix fonksiyonu ekliyoruz.","title":"Kotlin DSL ile Json"},{"content":"Asp.Net Core Session Kullanımı Asp.Net Core 2.1 ve üstü sürüme sahip projelerinizde Session kullanmak için Startup.cs dosyanızı aşağıdaki yöntemlerden birini seçerek güncellemeniz gerekmektedir.\nYöntem 1 Yöntem 2 Neden Asp.Net Core 2.1 ve sonrası? 2018\u0026rsquo;de uygulanması zorunlu hale gelen Avrupa Veri Koruma Kanunu ile birlikte, şirketlere kişisel verileri kullanması konusunda bazı kısıtlamalar ve uygulaması gereken bazı zorunluluklar getirilmiştir. Bu zorunluluklardan şu an için bizi ilgilendiren kısmı cookielerin kullanımı. Web siteleri cookie kullanımı için son kullanıcının onayını almak zorundadır.\nTüm bu gelişmeler sonucunda Microsoft .Net Core ekibi de version 2.1 ve sonrası için cookie kullanımına dair bazı özelleştirmeler yapmış.\nSession\u0026rsquo;lar da bir anlamda cookie sayıldığından bu kısıtlamaya maruz kalmış durumda. Default olarak Non-Essential kategorisine giren Session kullanımı için kullanıcının rızası alınmak zorundadır. Ya da yukarıda gösterilen yöntemlerden biri kullanılarak bu durum iptal edilebilir.\nKaynaklar  https://andrewlock.net/session-state-gdpr-and-non-essential-cookies https://www.microsoft.com/tr-tr/microsoft-365/growth-center/resources/5-things-to-know-about-gdpr-before-its-too-late https://eugdpr.org/ https://docs.microsoft.com/en-us/aspnet/core/security/gdpr?view=aspnetcore-2.2  ","permalink":"https://yazilim.aykutasil.com/aspnetcore-session/","summary":"Asp.Net Core Session Kullanımı Asp.Net Core 2.1 ve üstü sürüme sahip projelerinizde Session kullanmak için Startup.cs dosyanızı aşağıdaki yöntemlerden birini seçerek güncellemeniz gerekmektedir.\nYöntem 1 Yöntem 2 Neden Asp.Net Core 2.1 ve sonrası? 2018\u0026rsquo;de uygulanması zorunlu hale gelen Avrupa Veri Koruma Kanunu ile birlikte, şirketlere kişisel verileri kullanması konusunda bazı kısıtlamalar ve uygulaması gereken bazı zorunluluklar getirilmiştir. Bu zorunluluklardan şu an için bizi ilgilendiren kısmı cookielerin kullanımı. Web siteleri cookie kullanımı için son kullanıcının onayını almak zorundadır.","title":"Asp.Net Core Session"},{"content":"Fiziksel Android cihazımızla localimizde çalışan web server\u0026rsquo;a erişmek, development aşamasında eminim ihtiyaç duyduğunuz veya duyacağınız gereksinimlerden biridir. Bununla beraber local makinenizde bulunan VM üzerinde koşan web server\u0026rsquo;a erişmek.. Ah harika..\nCanlı bir örnek verirsem sanıyorum daha iyi olacak.\n Geliştirme yaptığınız makinenizinde MacOS işletim sistemi var. Bununla beraber çeşitli ihtiyaçlarınızdan ötürü windows kurmanız gerekti ve Virtual Machine kurarak içine windows yüklediniz. Windows üzerinde Visual Studio ile bir WebApi ayağa kaldırdınız ve bu api\u0026lsquo;ye fiziksel Android cihazınızdan erişmek istiyorsunuz. Üstüne üstlük normal web adresi girer gibi yani myrestapi.local gibi bir adres üzerinden erişim sağlamak istiyorsunuz.\n Kurulum Artık kuruluma geçebiliriz.\nWindows için gerekli düzenlemeler Eğer kurulu değilse ilk olarak IIS\u0026lsquo;i etkinleştirmemiz gerekmektedir. Bunun için arama çubuğuna Turn Windows features on or off yazarak ilgili pencereyi açıyoruz. Ve aşağıda seçili olan kutucukları seçerek kurulumu tamamlıyoruz.\nDaha sonra arama kutusuna IIS yazarak ilgili sayfaya gidiyoruz. Sites sağ tıklayarak Add Website diyoruz.\nAçılan pencerede Physical path:\u0026lsquo;i projenin kaynak kodlarının web.config dosyasının bulunduğu klasör olarak ayarlıyoruz.\nSıra geldi hosts dosyasını düzenlemeye. Bunun için şuraya gidip gerekli ayarlamaları yapabilirsiniz.\n Mac için gerekli düzenlemeler Ana işletim sistemi(Mac) üzerinden VM\u0026rsquo;deki local web server\u0026rsquo;a myrestapi.local adresi üzerinden erişim sağlamak için mac tarafında da host dosyasını düzenlememiz gerekmektedir. Bunun için terminal\u0026lsquo;ı açarak ve ~ sudo nano /private/etc/hosts komutunu girerek ilgili dosyayı açıyoruz. Ve VM üzerinde çalışan windows\u0026rsquo;umuzun IP\u0026lsquo;sini öğrenerek aşağıdaki gibi en alt satıra ekliyoruz.\nChrome için düzenlemeler Mac üzerinde bulunan Chrome\u0026lsquo;u açıyoruz ve arama kutusuna chrome://inspect yazarak ilgili sayfayı açıyoruz. Bu sırada android cihazımızın usb kablosu ile mac\u0026rsquo;e bağlı olması gerekmektedir. Açılan sayfada cihazımızın bağlı olduğunu görüyor olmamız lazım.\nPort forwarding butonuna basıyoruz ve aşağıdaki gibi giriş yapıyoruz.\nAndroid Cihazımız için düzenlemeler Android cihazlarının farklılığından dolayı aşağıdaki ayarları yapma şekli farklılık gösterebilir ama muhtemelen benzer şekillerde olacaktır.\nAndroid cihazımız üzerinden Wi-Fi Settings sayfasını açıyoruz. Ve Proxy ayarlama kısmından Manuel seçerek aşağıdaki gibi giriş yapıyoruz. Chrome yapılandırma kısmında girmiş olduğumuz 8080 port numarasının buradaki ile aynı olmasına dikkat ediyoruz.\n Evet tüm düzenlemelerimizi yaptık. Artık VM (Windows) üzerinde koşan apimize htttp://myrestapi.local adresinden ve Windows, Mac veya Android üzerindeki bir browserdan erişim sağlayabiliriz. Ve tabi geliştirmekte olduğunuz android uygulaması üzerinden de bu adrese erişim sağlayabileceksiniz.\nGeliştirme yaparken Android cihazımız üzerinde Chrome\u0026lsquo;un açık olmasına dikkat ediyoruz. Ve cihazın Proxy ayarlarının yukarıda bahsettiğimiz şekilde ayarlı olmasına dikkat ediyoruz.\n Not: Geliştirme sonrasında ilgili android cihazımızdan normal wi-fi bağlantısı ile internete erişmek için proxy ayarlarını \u0026ldquo;Yok\u0026rdquo; olarak işaretlemeyi yani default ayarına geri göndürmeyi unutmayalım.\n Kaynaklar  https://www.maketecheasier.com/setup-local-web-server-all-platforms/  ","permalink":"https://yazilim.aykutasil.com/android-debugging-local-server/","summary":"Fiziksel Android cihazımızla localimizde çalışan web server\u0026rsquo;a erişmek, development aşamasında eminim ihtiyaç duyduğunuz veya duyacağınız gereksinimlerden biridir. Bununla beraber local makinenizde bulunan VM üzerinde koşan web server\u0026rsquo;a erişmek.. Ah harika..\nCanlı bir örnek verirsem sanıyorum daha iyi olacak.\n Geliştirme yaptığınız makinenizinde MacOS işletim sistemi var. Bununla beraber çeşitli ihtiyaçlarınızdan ötürü windows kurmanız gerekti ve Virtual Machine kurarak içine windows yüklediniz. Windows üzerinde Visual Studio ile bir WebApi ayağa kaldırdınız ve bu api\u0026lsquo;ye fiziksel Android cihazınızdan erişmek istiyorsunuz.","title":"Android Debugging With Local Web Server"},{"content":"Aşağıdaki komutu çalıştırarak android cihaz ip\u0026rsquo;sini öğrenebilirsiniz.\n\u0026gt; adb shell ip -f inet addr show wlan0 ","permalink":"https://yazilim.aykutasil.com/deviceip-with-adb/","summary":"Aşağıdaki komutu çalıştırarak android cihaz ip\u0026rsquo;sini öğrenebilirsiniz.\n\u0026gt; adb shell ip -f inet addr show wlan0 ","title":"ADB Komutu ile Cihaz IP'sini Öğren"},{"content":"Internal Storage vs External Storage Internal Storage  Her zaman erişilebilir. Sadece uygulamanın kendisi tarafından erişebilir. Buraya kaydedilen dosyalar başka bir uygulama tarafından görünmez. USB ile bilgisayara bağlanıldığında bu dosyalara erişim sağlanamaz. Uygulama silindiğinde internal storage temizlenir.  External Storage  Her zaman erişilebilir durumda olmayabilir. External storage cihaza dahili olarak bulunabileceği gibi USB cihazı olarak sonradan takılmış bir cihaz da olabilir. Bu nedenle erişebilir olup olmadığı kontrol edilmelidir (getExternalStorageState()). External Storage\u0026rsquo;a kayıt edilen dosyalar başka uygulamalar tarafından okunabilir ve görülebilir durumda olabilir. Oluşturma şekline göre farklılık gösterir.  Environment.getExternalStorageDir() ile belirtilen klasöre kayıt edilen dosyalar tüm uygulamalar tarafından erişilebilir ve değiştirilebilir. Context.getExternalFilesDir() ile belirtilen klasöre kayıt edilen dosyalar yalnızca uygulamanın kendisi tarafından görülebilir ve değiştirilebilir. Fakat cihaz usb ile bilgisayara bağlandığında bu dosyalar internal storage\u0026lsquo;a kaydedilen dosyaların aksine erişilebilir olacaktır.   Context.getExternalFilesDir()ile ulaşılan path\u0026rsquo;e kayıt edilen dosyalar uygulama silindiğinde otomatik olarak temizlenir.    getFilesDir() -\u0026gt; /data/user/0/com.aykuttasil.myapp/files getExternalFilesDir(Environment.DIRECTORY_DCIM) -\u0026gt; /storage/emulated/0/Android/data/com.aykuttasil.myapp/files/DCIM getExternalCacheDir() -\u0026gt; /storage/emulated/0/Android/data/com.aykuttasil.myapp/cache Environment.getExternalStorageDirectory() -\u0026gt; /storage/emulated/0 Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM) -\u0026gt; /storage/emulated/0/DCIM  Environment.getExternalStorageDirectory()  Android Q ve sonrasını hedefleyen uygulamalar için bu fonksiyon deprecated olmuştur. getExternalStorageDirectory()\n External kelimesi kafa karıştırıcı olabiliyor. Çoğu zaman için bu alan SD kartı ifade eder fakat android cihazların çok büyük bir kısmında dahili olarak external için ayrılmış alan bulunur.\nBir cihazda birden fazla external hafızayı temsil eden alan var ise bu alanlara ContextCompat.getExternalFilesDirs(this,null); şeklinde erişilebilir. Android 4.4 (19) öncesi ve sonrasında bu dizine erişim farklılık gösterdiği için ContextCompat sınıfı bize yardımcı olur.\n  Kaynaklar  https://developer.android.com/training/data-storage/files.html https://developer.android.com/reference/android/os/Environment https://www.codevoila.com/post/46/android-tutorial-android-external-storage  ","permalink":"https://yazilim.aykutasil.com/android-filesystem/","summary":"Internal Storage vs External Storage Internal Storage  Her zaman erişilebilir. Sadece uygulamanın kendisi tarafından erişebilir. Buraya kaydedilen dosyalar başka bir uygulama tarafından görünmez. USB ile bilgisayara bağlanıldığında bu dosyalara erişim sağlanamaz. Uygulama silindiğinde internal storage temizlenir.  External Storage  Her zaman erişilebilir durumda olmayabilir. External storage cihaza dahili olarak bulunabileceği gibi USB cihazı olarak sonradan takılmış bir cihaz da olabilir. Bu nedenle erişebilir olup olmadığı kontrol edilmelidir (getExternalStorageState()). External Storage\u0026rsquo;a kayıt edilen dosyalar başka uygulamalar tarafından okunabilir ve görülebilir durumda olabilir.","title":"Android File System"},{"content":" Not: Bu makale hazırlanırken kullanılan .net core versiyonu: 2.2\n ASP.NET Core\u0026lsquo;daki filter yapısı, middleware bileşenine benzer fakat bazı farklılıkları vardır. Filter\u0026rsquo;lar ile sadece request-response süreci arasına girilerek istenilen kod blokları çalıştırılabilir. Filter tipine göre request-response sürecinin hangi aşamasında çalıştırılacağı belirlenebilir. Oldukça özelleştirebilir bir yapı sunar bize Filter\u0026rsquo;lar.\nFilter Tipleri Authorization Filters İlk çalışan filter\u0026lsquo;dır. İlgili mvc action metoduna erişmek için user\u0026lsquo;ın yetkisi olup olmadığını kontrol eder. Eğer koşullar sağlanıyor ise ilgili mvc action metodu çalışır. Yetki problemi var ise short-circuit diye tabir edilen kısa devre yapılarak direk olarak bir response mesajı döndürülür. Yani kodun geri kalanının çalışmasına izin verilmez.\nResource Filters Eğer ki kullanıcı Authorization Filter\u0026lsquo;ından geçmiş ise filter pipeline\u0026rsquo;nında ki diğer filter\u0026rsquo;lardan önce çalıştırılacak ilk filterdır. Ve aynı zamanda response yönü için filter pipeline\u0026rsquo;nında ki diğer tüm filter\u0026rsquo;lardan sonra çalışacak filter\u0026rsquo;dır. Yani kod bloğuna ilk giriş ve son çıkış mekanizması kurulmasını sağlar. Genellikle short-circuit sağlamak için kullanılır. Örnek olarak caching akışını bu filter ile oluşturabiliriz.\nAction Filters İlgili Action metodunun hemen öncesinde ve hemen sonrasında çalışacak olan filter tipidir. Genellikle Action metoduna gelen argüman değerlerinin ve response çıktısının manipülasyon\u0026lsquo;u için kullanılır.\nException Filters Result Filters  Filter scopes and order of execution Filter\u0026rsquo;ların 3 farklı scope seçeneği vardır. Controller, Action ve Global. Controller scope\u0026rsquo;una sahip bir filter, ilgili controller\u0026rsquo;a gelen tüm isteklerde çalışacaktır. Action scope\u0026rsquo;una sahip bir filter sadece ilgili action\u0026rsquo;a gelen isteklerde ve Global scope\u0026rsquo;una sahip filter ise tüm controller ve action\u0026rsquo;lara gelen isteklerde çalışacaktır. Projenin ihtiyacına göre filter scope\u0026rsquo;ları belirlenir.\nGlobal Filter Scope Tüm controller ve action\u0026rsquo;larda çalışmasını istediğimiz filter\u0026rsquo;ların scope\u0026rsquo;unu global olarak kayıt etmeliyiz.\nÖrneğin hangi controller çalışırsa çalışsın, response\u0026rsquo;a bir header eklemek istiyoruz. Ve bu filter kodunun ilgili tüm işlemler yapıldıktan sonra response döneceği sırada çalışmasını istiyoruz. Response dönmeden hemen önce ve hemen sonra yani tüm işlemler başarılı ise çalışmasını istediğimiz kodlar için filter tipi, IResultFilter olması gerekmektedir.\n Eğer kodumuzun ilgili action\u0026lsquo;a istek gelir gelmez çalışmasını isteseydik o zaman filter\u0026rsquo;ımızın IActionFilter tipinde olması gerekecekti.\n Oluşturduğumuz filter\u0026rsquo;ın global scope\u0026lsquo;a sahip olduğunu belirtmek için aşağıdaki şekilde belirtmemiz gerekmektedir.\n### Dependency injection\nFilter\u0026rsquo;lar type (typeOf()) veya instance alınarak eklenebilir. Eğer instance alınarak eklenir ise tüm isteklerde bu instance çalışacaktır. Eğer type şeklinde eklenir ise type-activated olacak ve her request sonrası filter sınıfının constructer\u0026lsquo;ı çağırılarak yeni bir instance\u0026rsquo;ı oluşturulacaktır. Ve bu sayede DI container\u0026rsquo;ından istenilen sınıflar inject edilebilir olacaktır. Type kullanılarak eklenen filter\u0026rsquo;lar filters.Add(new TypeFilterAttribute(typeof(MyFilter))) şeklinde container\u0026rsquo;a eklenmiş gibi davranacaktır.\nEğer oluşturduğumuz Filter sınıfı DI container\u0026rsquo;ından bir bağımlılık içeriyor ise aşağıdaki yöntemlerden birini kullanarak controller veya action metoduna filter eklenebilir:\n ServiceFilterAttribute ServiceFilterAttribute IFilterFactory implementasyonu  ServiceFilterAttribute Kaynaklar  https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters  ","permalink":"https://yazilim.aykutasil.com/aspnetcore-filters/","summary":"Not: Bu makale hazırlanırken kullanılan .net core versiyonu: 2.2\n ASP.NET Core\u0026lsquo;daki filter yapısı, middleware bileşenine benzer fakat bazı farklılıkları vardır. Filter\u0026rsquo;lar ile sadece request-response süreci arasına girilerek istenilen kod blokları çalıştırılabilir. Filter tipine göre request-response sürecinin hangi aşamasında çalıştırılacağı belirlenebilir. Oldukça özelleştirebilir bir yapı sunar bize Filter\u0026rsquo;lar.\nFilter Tipleri Authorization Filters İlk çalışan filter\u0026lsquo;dır. İlgili mvc action metoduna erişmek için user\u0026lsquo;ın yetkisi olup olmadığını kontrol eder. Eğer koşullar sağlanıyor ise ilgili mvc action metodu çalışır.","title":"ASP.NET Core Filters"},{"content":"ASP.NET Core Run Method ASP.NET Core ile birlikte gelen middleware konsepti sayesinde request-response süreçleri arasına girerek kendi mantıksal devremizi yazmamız çok kolay hale gelmiştir.\nYukarıda ki gibi Startup.cs sınıfı içerisindeki Configure fonksiyonuna app.Run() diyerek middleware\u0026lsquo;ımızı ekleyebiliriz.\nPeki tam olarak app.Run() metodu nasıl çalışıyor? app.Run() middlaware\u0026rsquo;ı ile istenilen bir kod bloğunu çalıştırabilir ve uygulamamıza kısa devre yaptırabiliriz. Yani pipeline akışı eğer Run() içerisine girerse, sonraki kod blokları çalışmayacaktır.\nYukarıda ki kodun çıktısı sadece Response 1 olacak ve sonraki kod bloğu çalışmayacaktır.\nKaynak  https://www.tutorialsteacher.com/core/aspnet-core-middleware http://www.nazimdemir.net/asp-net-core-mvc-middleware-kavrami/  ","permalink":"https://yazilim.aykutasil.com/aspnetcore-run-middleware/","summary":"ASP.NET Core Run Method ASP.NET Core ile birlikte gelen middleware konsepti sayesinde request-response süreçleri arasına girerek kendi mantıksal devremizi yazmamız çok kolay hale gelmiştir.\nYukarıda ki gibi Startup.cs sınıfı içerisindeki Configure fonksiyonuna app.Run() diyerek middleware\u0026lsquo;ımızı ekleyebiliriz.\nPeki tam olarak app.Run() metodu nasıl çalışıyor? app.Run() middlaware\u0026rsquo;ı ile istenilen bir kod bloğunu çalıştırabilir ve uygulamamıza kısa devre yaptırabiliriz. Yani pipeline akışı eğer Run() içerisine girerse, sonraki kod blokları çalışmayacaktır.\nYukarıda ki kodun çıktısı sadece Response 1 olacak ve sonraki kod bloğu çalışmayacaktır.","title":"ASP.Net Core app.Run() Middleware"},{"content":"Android DataBinding Android dünyasında temiz kod(Clean Code) günümüzde çokça konuşulan konular arasında yer almakta ve neden temiz kod yazmalıyız ile alakalı bir çok makale yazılmaktadır.\nTemiz kod yazmak için MVP, MVVM vs. kod tasarım mimarilerinden birini seçerek yazılan kodların ve etkileşimlerinin birbirinden ayrımını sağlamaktayız. Bu kod tasarım kalıpları ile beraber bize çok faydası olacak bir mimari daha bulunmakta: DataBinding\nDataBinding Uygulamanın arayüzünü tasarlamak için kullandığımız layout dosyamızın içerisine Uygulamamızın arayüzünü oluşturmak için kullandığımız layout xml dosyalarına gerekli datayı doğrudan entegre ederek, arayüz değişikliği ile ilgili tüm akışların harici müdahaleye gerek kalmadan otomatik olarak gerçekleşmesini sağlayabiliriz. Bununla birlikte null kontrolü gibi kontrollerin de otomatik yapılmasını sağlayarak uygulamamızın milyon dolarlık hataya yakalanmasını engelleyebiliriz ;) ve bunun gibi bir çok faydası bulunmakta elbette.\nNasıl Kullanılır? DataBinding mimarisinin nasıl kullanıldığını örnek bir Login sayfası üzerinde görelim.\n Not: Birkaç farklı kullanma şekli olsa da burada en modern ve en kolay yaklaşımı ele alıcaz.\n Yukarıda ki ekran görüntüsüne benzer bir ekranımız var.\nYapmak istediklerimiz:\n Email ve Parola alanına bir şey yazılmadan Giriş Yap ve Kayıt Ol butonuna basılamasın. Email alanına giriş yapıldığında, yazılan metnin aynısı parola alanının hemen altında gözüksün. Giriş Yap veya Kayıt Ol butonlarına basıldığında doğrudan ViewModelimiz içerisinde ki ilgili fonksiyonları çağıralım. Bunu yaparken, parametre olarak girilen bilgileri verelim.  Kodları vermeden önce DataBinding mekanizmasının nasıl çalıştığını kısaca özetleyecek olursak, ilk olarak ilgili layout kodlarımızı \u0026lt;layout\u0026gt; \u0026lt;/layout\u0026gt; tagları arasına alıyoruz. Daha sonra app/build.gradle dosyamızda databinding\u0026lsquo;i aktifleştiriliyoruz. Ve projemizi build ettiğimizde databinding sistemini ilgili dosyaları otomatik olarak oluşturacaktır. Oluşan dosyaya erişmek için Activity veya Fragment içerisinden DataBindingUtil sınıfını kullanıyoruz. Dosya ismi LayoutNameBinding şeklinde olacaktır. Ve sonrasında layout dosyamıza entegre etmek istediğimiz dataları, nesneleri vs. bu otomatik oluşan sınıf aracılığıyla gerçekleştiriyoruz.\n Şimdi ne gibi düzenlemeler yapmamız gerekiyor kod üzerinden görelim.\napp/build.gradle dosyamızı aşağıdaki gibi düzenleyelim.\nActivity kodlarımız aşağıdaki gibi olacak şekilde düzenlemeleri yapalım.\n binding.lifecycleOwner = this satırını eklediğimizden emin olalım. Bu kodu LiveData kullanarak DataBinding yapmak istiyorsak eklemek zorundayız.\n Yukarıda ki kodda bulunan bind\u0026lt;\u0026gt;() fonksiyonu kotlin extension fonksiyonudur.\nLoginViewModel.kt dosyamızı aşağıdaki gibi düzenleyelim.\nKalıtım aldığımız RxAwareViewModel.kt sınıfının kodları aşağıdaki gibidir. Bu sınıfı Rx fonksiyonları çağırırken her defasında CompositeDisposable nesnesi oluşturmamak için kullanıyoruz.\nLogin ekranımızın layout\u0026lsquo;unu aşağıdaki gibi düzenleyelim.\nLayout kodumuzu incelicek olursak\n android:text=\u0026quot;@={viewmodel.liveEmail}\u0026quot; satırını çift yönlü binding yapmak için kullanıyoruz. Çift yönlü binding için =\u0026quot;@={}\u0026quot; yapısını kullanıyoruz. Yani, EditText\u0026rsquo;e yazılan değerler aynı anda ViewModel sınıfımızın içindeki liveEmail nesnemize atanmış olucak.  Not: Burada dikkat edilmesi gereken bir nokta var. Çift yönlü binding yapmak istiyorsak, kullanacağımız livedata nesnemizin primitive tip olması gerekiyor. Bunu aşmanın çeşitli yöntemleri var ama bence en kolay ve okunabilir yöntem her çift yönlü binding yapılmak istenen alanın ayrı ayrı oluşturulması.\nPrimitive tipten kastımız val liveEmail = MutableLiveData\u0026lt;String\u0026gt;() şeklinde yani String tipinde olması. Bu alanı MutableLiveData\u0026lt;Int\u0026gt;() şeklinde de oluşturabiliriz. Burada yapamayacağımız şey direk olarak bir Personel, User gibi nesne kullanamayacak olmamız.\nval liveUser = MutableLiveData\u0026lt;User\u0026gt;() şeklinde nesnemizi oluşturduğumuzu ve layout kodumuzu da android:text=\u0026quot;@={viewmodel.liveUser.email}\u0026quot; şeklinde düzelttiğimizi düşünelim. Burada çift yönlü binding çalışmayacaktır. Yani User nesnesinin email alanı otomatik olarak doldurulmayacaktır. Biraz fazla uzadı ama bu konuya dikkat etmemiz gerekiyor.\n android:text=\u0026quot;@{viewmodel.displayName}\u0026quot; bu satırda tek yönlü binding yapıyoruz. Yani ViewModel sınıfımız içerisindeki displayName nesnesinin değerini bu TextView nesnemize text olarak gönderiyoruz. ViewModel içerisinde ki bu nesnenin değeri değiştiğinde TextView otomatik olarak güncellenecektir.  Burada tek yönlü binding\u0026rsquo;den kastımız data akışı viewmodel -\u0026gt; layout şeklinde olacak olmasıdır.\nÇift yönlü binding de ise data akışı viewmodel \u0026lt;-\u0026gt; layout şeklinde olacaktır.\n android:enabled=\u0026quot;@{!TextUtils.isEmpty(viewmodel.liveEmail) \u0026amp;amp;\u0026amp;amp; !TextUtils.isEmpty(viewmodel.livePass)}\u0026quot; satırında layout bileşenimizin, bizim durumumuz için Button, enable olup olmamasını bir koşula bağladık. Ve dinamik değişen değerler neticesinde eğer koşullar sağlanıyor ise enable, sağlanmıyor ise disable olacaktır. Burada TextUtils sınıfından bir fonksiyon kullandık. Bu şekilde harici bir sınıfa erişim sağlamak istiyorsak, bunu layout dosyamızda import ederek belirtmeliyiz.  \u0026amp;amp;\u0026amp;amp; kısmı aslında \u0026amp;\u0026amp; anlamına geliyor. Yani Ve koşulu.\n android:onClick=\u0026quot;@{()-\u0026gt;viewmodel.login(edtEmail.getText().toString(),editParola.getText().toString())}\u0026quot; bu satırda yaptığımız şey viewmodel sınıfımızdan bir fonksiyon çağırmak ve bu fonksiyona parametre olarak edittext\u0026rsquo;lere (email,parola) yazılan değerleri göndermek. EditText nesnesinin değerine ulaşmak için nesnenin id sini kullandığımıza dikkat edelim.  Login fonksiyonunu parametre göndermeden de çağırabilirdik. Çünkü zaten edittext bileşenlerine yazılan değerler otomatik olarak viewmodel sınıfındaki ilgili alanları doldurmuş oluyor. Ve biz bu nesnelere (liveEmail,livePass), login fonksiyonunun içerisinden direk erişim sağlayarak ilgili işlemleri yapabiliriz.\n DataBinding mimarisinin ViewModel ve LiveData ile birlikte kullanımı bu şekilde. Dediğim gibi farklı yaklaşımlar var ama modern ve sağlam olanı bu yaklaşım diyebiliriz :)\nKaynaklar  https://developer.android.com/reference/android/databinding/package-summary https://developer.android.com/topic/libraries/data-binding https://github.com/googlesamples/android-databinding  ","permalink":"https://yazilim.aykutasil.com/android-databinding/","summary":"Android DataBinding Android dünyasında temiz kod(Clean Code) günümüzde çokça konuşulan konular arasında yer almakta ve neden temiz kod yazmalıyız ile alakalı bir çok makale yazılmaktadır.\nTemiz kod yazmak için MVP, MVVM vs. kod tasarım mimarilerinden birini seçerek yazılan kodların ve etkileşimlerinin birbirinden ayrımını sağlamaktayız. Bu kod tasarım kalıpları ile beraber bize çok faydası olacak bir mimari daha bulunmakta: DataBinding\nDataBinding Uygulamanın arayüzünü tasarlamak için kullandığımız layout dosyamızın içerisine Uygulamamızın arayüzünü oluşturmak için kullandığımız layout xml dosyalarına gerekli datayı doğrudan entegre ederek, arayüz değişikliği ile ilgili tüm akışların harici müdahaleye gerek kalmadan otomatik olarak gerçekleşmesini sağlayabiliriz.","title":"Android DataBinding"},{"content":" Android\u0026rsquo;in temel bileşenlerinden biri olan Service\u0026rsquo;ler kısaca UI(arayüz) olmayan Activity\u0026rsquo;lere benzetebiliriz. Tabi ki kendine göre ek özellikleri bulunmaktadır. Service tanımlaması AndroidManifest.xml içerisinde tanımlı olmalıdır. Aksi takdirde çalışmaz. \u0026lt;service\u0026gt; elementinin alabileceği özellikler aşağıdaki gibidir.\n Niçin kullanılır? Temel olarak ifade etmek gerekirse Service\u0026rsquo;lerin kullanım amacı uzun süren ve arka planda(background) çalışan taskler oluşturmaktır. Bununla birlikte diğer uygulamalar tarafından çağırılabilen iletişim imkanı sağlar.\nService tanımlanması \u0026lt;service android:description=\u0026#34;string resource\u0026#34;  android:directBootAware=[\u0026#34;true\u0026#34; | \u0026#34;false\u0026#34;]  android:enabled=[\u0026#34;true\u0026#34; | \u0026#34;false\u0026#34;]  android:exported=[\u0026#34;true\u0026#34; | \u0026#34;false\u0026#34;]  android:icon=\u0026#34;drawable resource\u0026#34;  android:isolatedProcess=[\u0026#34;true\u0026#34; | \u0026#34;false\u0026#34;]  android:label=\u0026#34;string resource\u0026#34;  android:name=\u0026#34;string\u0026#34;  android:permission=\u0026#34;string\u0026#34;  android:process=\u0026#34;string\u0026#34; \u0026gt;  . . . \u0026lt;/service\u0026gt; android:description Service\u0026lsquo;in amacını kullanıcıya açıklamak için kullanılır.\nandroid:directBootAware Android 7 ile birlikte gelen Direct Boot mode özelliği ile ilgilidir. Android sistemi, güvenlik konusunda çeşitli varsayımlar dahilinde şifreleme seçenekleri sunar. Örneğin, cihaz ekran kilidi aktif iken uygulamanın erişebileceği dosyalar ile ekran kilidi pasif iken erişebileceği dosyalar farklıdır. Bu sınırlamalar ve bu sınırlamaların aşılması gereken durumlar için aşağıdaki linke bakabilirsiniz.\n https://developer.android.com/training/articles/direct-boot  android:enabled Belirtilen servisin sistem tarafından çalıştırılabilir olup olmamasını belirler. Varsayılan değeri = true.\nandroid:exported Diğer uygulamaların belirtilen servisi çalıştırabilir veya etkileşim kurabilir olup olmamasını belirler. Eğer true olarak belirlenmiş ise başka uygulamalar tarafından erişilebilir demektir. false olarak belirtilmesi durumunda başka uygulamalar tarafından erişilemez fakat aynı user ID ile imzalanmış uygulamalar tarafından erişebilir demektir.\nDefault değeri aşağıdaki durumlara göre belirlenir.\n Eğer servis tanımı içerisinde intent-filter belirlenmiş ise default olarak true olacaktır. Diğer durumlarda default değer false olacaktır.  android:icon Servisi temsil eden icon belirlemek için kullanılır. Eğer bu özelliğe bir atama yapılmaz ise application elementinde belirlenen icon özelliği default olarak alınır.\nandroid:isolatedProcess Bu özelliğin true olarak belirlenmesi, ilgili servisin diğer uygulama processlerinden tamamen farklı izole bir process\u0026rsquo;de çalışacak olması anlamına gelir.\nandroid:label Kullanıcı tarafından gözükecek olan service adını belirlemek için kullanılır. Eğer atama yapılmaz ise application elementi içerisindeki label özelliği değeri default olarak atanır.\nandroid:name Service class name\u0026rsquo;i bu etiket altında belirlenir. Örneğin: com.example.project.MyService\nandroid:permission Service çağırıldığında uygulama tarafından bu etiket altın belirtilen izinlerin sağlanmış olması gerekmektedir. Aksi takdirde ilgili service çalışmayacaktır. Örneğin, service içerisinde location API\u0026rsquo;si kullanılıyor ise android:permission=\u0026quot;android.permission.ACCESS_FINE_LOCATION\u0026quot; şeklinde tanımlama yapılması ilgili servisi koruma altına alacak yani ilgili iznin sağlanması dahilinde çalışacağını garanti etmiş olacaktır.\nandroid:process Normalde uygulamanın tüm bileşenleri, uygulama.package.name adında tek bir process\u0026rsquo;de çalışır. Fakat componentler bu default özelliği ezerek kendi process\u0026rsquo;inde koşabilir ve bu sayede uygulama işlemlerinin birden fazla process\u0026rsquo;de çalışmasını sağlayabilir.\nBu özelliğe atama yapılır iken android:process=\u0026quot;:MyServiceProcess\u0026quot; şeklinde : ile başlayan bir ifade girilecek olursa, yeni oluşturulacak process sadece kendi uygulamamız tafafından kullanılabilir olacaktır.\nFakat android:process=\u0026quot;myServiceProcess\u0026quot; şeklinde yani : olmadan ve küçük harfle başlayan bir değer girilmesi durumunda, yeni oluşturulacak process başka uygulamalar tarafından da kullanılabilir olacaktır. Bu sayede kaynak kullanımı azaltılmış olup ilgili bileşenlerin aynı process\u0026rsquo;i paylaşmaları sağlabilir.\nKaynaklar  https://developer.android.com/guide/topics/manifest/service-element  ","permalink":"https://yazilim.aykutasil.com/android-service/","summary":"Android\u0026rsquo;in temel bileşenlerinden biri olan Service\u0026rsquo;ler kısaca UI(arayüz) olmayan Activity\u0026rsquo;lere benzetebiliriz. Tabi ki kendine göre ek özellikleri bulunmaktadır. Service tanımlaması AndroidManifest.xml içerisinde tanımlı olmalıdır. Aksi takdirde çalışmaz. \u0026lt;service\u0026gt; elementinin alabileceği özellikler aşağıdaki gibidir.\n Niçin kullanılır? Temel olarak ifade etmek gerekirse Service\u0026rsquo;lerin kullanım amacı uzun süren ve arka planda(background) çalışan taskler oluşturmaktır. Bununla birlikte diğer uygulamalar tarafından çağırılabilen iletişim imkanı sağlar.\nService tanımlanması \u0026lt;service android:description=\u0026#34;string resource\u0026#34;  android:directBootAware=[\u0026#34;true\u0026#34; | \u0026#34;false\u0026#34;]  android:enabled=[\u0026#34;true\u0026#34; | \u0026#34;false\u0026#34;]  android:exported=[\u0026#34;true\u0026#34; | \u0026#34;false\u0026#34;]  android:icon=\u0026#34;drawable resource\u0026#34;  android:isolatedProcess=[\u0026#34;true\u0026#34; | \u0026#34;false\u0026#34;]  android:label=\u0026#34;string resource\u0026#34;  android:name=\u0026#34;string\u0026#34;  android:permission=\u0026#34;string\u0026#34;  android:process=\u0026#34;string\u0026#34; \u0026gt;  .","title":"Android Service"},{"content":"Sorun Kotlin dili ile geliştirilen Android projelerinin test yazımı sırasında sınıfların veya metodların mocklanması, Java ile geliştirilen projelere göre bazı farklılıklar göstermektedir. Bu farklılığın sebeplerinden biri Kotlin ile oluşturulan sınıf veya metodların default olarak final olarak işaretlenmiş olmasıdır. Ve final tipindeki sınıfların mocklanması bazı sorunlar çıkarmaktadır.\nÇözüm Final tipindeki sınıfların veya metodların mocklama işlemi sırasında çıkan sorunu çözmenin birkaç farklı yöntemi vardır.\nÇözüm 1 (open ClassName) Test edeceğimiz sınıf ve metodun başına open ifadesini ekleyerek extend edilebilir hale getirmek. Böylece mock kütüphaneleri kotlin final problemine yakalanmadan mocklama işlemini başarıyla gerçekleştirebilecekler.\nÇözüm 2 (all-open) Kotlin all-open pluginini kullanmak. Ki bu plugin\u0026lsquo;de aslında sınıfların, metodların başında open ifadesi ekliyor.\nÇözüm 3 (Mockk) Mockk kütüphanesini kullanmak.\n Not: Eğer test sınıfımızı Instrumentation Test bağlamında yani androidTest package\u0026rsquo;ı altında yazıyorsak testi çalıştıracağımız emulator veya cihazın android versiyonuna göre bazı farklılıklar vardır.\n   Android P ve sonrası (\u0026gt;= 28) için birşey yapmanıza gerek yok Android P öncesi (\u0026lt; 28) için all-open pluginini aktifleştirmeniz gerekmektedir. https://mockk.io/ANDROID   Not: Kişisel olarak Mockk kullanmanızı tavsiye ederim.\nÇözüm 4 (Mockito) Mockito kütüphanesini kullanmak.\nUnit Test için  Mockito kütüphanesini eklerken mockito-core yerine mockito-inline bağımlılığını kullanmalısınız.  // testImplementation \u0026#34;org.mockito:mockito-core:2.23.16\u0026#34; testImplementation \u0026#34;org.mockito:mockito-inline:2.23.16\u0026#34; Aslında mockito-inline bağımlılığının yaptığı resources/mockito-extensions/org.mockito.plugins.MockMaker dosyasına mock-maker-inline satırını eklemek.\n https://github.com/mockito/mockito/blob/release%2F2.x/subprojects/inline/src/main/resources/mockito-extensions/org.mockito.plugins.MockMaker   mockito-inline ile java byte code manipilasyonu sağlanır. Bu sayede final tanımlanmış sınıf veya metodlar mocklanabilir hale gelir. Yazdığımız Unit Testler JVM\u0026lsquo;de çalışacağı için bu yöntem işe yarar. Fakat Android runtime\u0026lsquo;ı Dalvik Byte Code kullanır. Ve bu yüzden mockito-inline yöntemi işe yaramaz.\n Instrumentation Test için  androidTestImplementation \u0026quot;org.mockito:mockito-android:2.23.16\u0026quot; bağımlılığını eklemelisiniz. Buradaki yöntemlerden birini izleyebilirsiniz. Aslında burada bahsedilen yöntem de all-open pluginini aktifleştirmekten ibaret. https://medium.com/androiddevelopers/mock-final-and-static-methods-on-android-devices-b383da1363ad   Not: dexmaker-mockito\u0026rsquo;nun çalışması için Android P ve sonrası gerekmektedir. Aşağıdaki tabloda görebilirsiniz.\n Eğer projenizi kotlin ile geliştirmiş ve test için Mockito kullanmaya karar vermişseniz Mockito Kotlin kütüphanesini kullanmanızda fayda var. Bu kütüphaneyi kullanarak daha hızlı ve kolay şekilde Mockito\u0026rsquo;yu kullanabilir ve bazı kotlin özelliklerinden dolayı alınacabilecek hataları (Kotlin NullPointerException hatası) engelleyebilirsiniz.\n Kaynaklar  https://medium.com/androiddevelopers/mock-final-and-static-methods-on-android-devices-b383da1363ad  ","permalink":"https://yazilim.aykutasil.com/android-kotlin-test-final-type-problem/","summary":"Sorun Kotlin dili ile geliştirilen Android projelerinin test yazımı sırasında sınıfların veya metodların mocklanması, Java ile geliştirilen projelere göre bazı farklılıklar göstermektedir. Bu farklılığın sebeplerinden biri Kotlin ile oluşturulan sınıf veya metodların default olarak final olarak işaretlenmiş olmasıdır. Ve final tipindeki sınıfların mocklanması bazı sorunlar çıkarmaktadır.\nÇözüm Final tipindeki sınıfların veya metodların mocklama işlemi sırasında çıkan sorunu çözmenin birkaç farklı yöntemi vardır.\nÇözüm 1 (open ClassName) Test edeceğimiz sınıf ve metodun başına open ifadesini ekleyerek extend edilebilir hale getirmek.","title":"Android Kotlin Test - Final Type Problem"},{"content":"Problem Domain\u0026rsquo;i barındıran server\u0026rsquo;ın IP\u0026rsquo;sini bulmak istiyoruz.\nÇözüm Linux  Terminali aç host www.aykutasil.com şeklinde istediğin domain\u0026rsquo;i yaz Server IP:  www.aykutasil.com has address 104.24.114.254 www.aykutasil.com has address 104.24.115.254 www.aykutasil.com has IPv6 address 2606:4700:30::6818:73fe www.aykutasil.com has IPv6 address 2606:4700:30::6818:72fe Windows  Komut penceresini aç. (cmd.exe) nslookup www.aykutasil.com şeklinde istediğin domain\u0026rsquo;i yaz Server IP:  Name: www.aykutasil.com Addresses: 2606:4700:30::6818:73fe  2606:4700:30::6818:72fe  104.24.115.254  104.24.114.254 ","permalink":"https://yazilim.aykutasil.com/server-ip/","summary":"Problem Domain\u0026rsquo;i barındıran server\u0026rsquo;ın IP\u0026rsquo;sini bulmak istiyoruz.\nÇözüm Linux  Terminali aç host www.aykutasil.com şeklinde istediğin domain\u0026rsquo;i yaz Server IP:  www.aykutasil.com has address 104.24.114.254 www.aykutasil.com has address 104.24.115.254 www.aykutasil.com has IPv6 address 2606:4700:30::6818:73fe www.aykutasil.com has IPv6 address 2606:4700:30::6818:72fe Windows  Komut penceresini aç. (cmd.exe) nslookup www.aykutasil.com şeklinde istediğin domain\u0026rsquo;i yaz Server IP:  Name: www.aykutasil.com Addresses: 2606:4700:30::6818:73fe  2606:4700:30::6818:72fe  104.24.115.254  104.24.114.254 ","title":"Server Ip"},{"content":"cat \u0026laquo;EOF cat \u0026lt;\u0026lt;EOF komutu ile multiline bash script yazabiliriz. Son satır EOF oluncaya kadar satır oluşturulmaya devam eder.\nEOF yerine herhangi bir belirteç yazılabilir. Genelde EOF veya STOP yazılır.\n$ sql=$(cat \u0026lt;\u0026lt;EOF SELECT foo, bar FROM db WHERE foo=\u0026#39;baz\u0026#39; EOF ) $ cat \u0026lt;\u0026lt;EOF \u0026gt; print.sh #!/bin/bash echo \\$PWD echo $PWD EOF Yukarıda ki bash çalıştırıldığında print.sh adında ve içeriği\n#!/bin/bash echo $PWD echo /home/user olan bir dosya oluşur.\n$ cat \u0026lt;\u0026lt;EOF | grep \u0026#39;ay\u0026#39; | tee ay-words.txt foo bar baz . . . Yukarıda ki script ile son satır EOF olana dek yazılan tüm herşey içerisinden içinde aykut geçen kelimeler bulunarak ay-words.txt dosyası içine kayıt edilir.\n find find . -type f -name \u0026#39;*debug*.apk\u0026#39; Yukarıda ki komut ile, komutun yazıldığı klasör içerisinde tipi f(dosya) olan ve adında debug geçen tüm dosyalar listelenir.\n","permalink":"https://yazilim.aykutasil.com/bash-scripts/","summary":"cat \u0026laquo;EOF cat \u0026lt;\u0026lt;EOF komutu ile multiline bash script yazabiliriz. Son satır EOF oluncaya kadar satır oluşturulmaya devam eder.\nEOF yerine herhangi bir belirteç yazılabilir. Genelde EOF veya STOP yazılır.\n$ sql=$(cat \u0026lt;\u0026lt;EOF SELECT foo, bar FROM db WHERE foo=\u0026#39;baz\u0026#39; EOF ) $ cat \u0026lt;\u0026lt;EOF \u0026gt; print.sh #!/bin/bash echo \\$PWD echo $PWD EOF Yukarıda ki bash çalıştırıldığında print.sh adında ve içeriği\n#!/bin/bash echo $PWD echo /home/user olan bir dosya oluşur.","title":"Bash Scripts"},{"content":"CircleCI Android Yapılandırması .circleci/config.yml version: 2 jobs:  build:  working_directory: ~/code  docker:  - image: circleci/android:api-28-alpha  environment:  JVM_OPTS: -Xmx3200m  steps:  - checkout  - run:  name: Initialize Keystore File  command: echo $KEYSTORE_BASE64 | base64 --decode \u0026gt; app/aykutasilkeystore  - run:  name: Initialize Fabric Properties  command: |echo \u0026#34;apiKey=$FABRIC_API_KEY\u0026#34; \u0026gt;\u0026gt; app/fabric.properties echo \u0026#34;apiSecret=$FABRIC_API_SECRET\u0026#34; \u0026gt;\u0026gt; app/fabric.properties cat app/fabric.properties  - run:  name: Initialize Keystore File  command: |echo \u0026#34;signingKeyAlias=$KEYSTORE_KEY_ALIAS\u0026#34; \u0026gt;\u0026gt; keystore.properties echo \u0026#34;signingKeyAliasPassword=$KEYSTORE_KEY_ALIAS_PASSWORD\u0026#34; \u0026gt;\u0026gt; keystore.properties echo \u0026#34;signingStoreFile=$KEYSTORE_STORE_FILE\u0026#34; \u0026gt;\u0026gt; keystore.properties echo \u0026#34;signingStorePassword=$KEYSTORE_STORE_PASSWORD\u0026#34; \u0026gt;\u0026gt; keystore.properties cat keystore.properties  - restore_cache:  key: jars-{{ checksum \u0026#34;build.gradle\u0026#34; }}-{{ checksum \u0026#34;app/build.gradle\u0026#34; }}  - run:  name: Download Dependencies  command: ./gradlew androidDependencies  - save_cache:  paths:  - ~/.gradle  key: jars-{{ checksum \u0026#34;build.gradle\u0026#34; }}-{{ checksum \u0026#34;app/build.gradle\u0026#34; }}  - store_artifacts:  path: app/build/reports  destination: reports  - store_test_results:  path: app/build/test-results  - run:  command: echo \u0026#34;Current Branch:\u0026#34; ${CIRCLE_BRANCH}  - run:  name: Initial build  command: ./gradlew assembleDebug assembleRelease --no-daemon --stacktrace  - store_artifacts:  path: app/build/outputs/apk/  destination: apks/  - deploy:  name: Deploy to Fabric  command: ./gradlew crashlyticsUploadDistributionRelease --stacktrace --debug --no-daemon workflows:  version: 2  workflow:  jobs:  - build app/build.gradle apply plugin: \u0026#39;com.android.application\u0026#39; apply plugin: \u0026#39;kotlin-android\u0026#39; apply plugin: \u0026#39;kotlin-android-extensions\u0026#39; apply plugin: \u0026#39;io.fabric\u0026#39;   android {  compileSdkVersion 28   def fabricPropertiesFile = rootProject.file(\u0026#34;app/fabric.properties\u0026#34;)  def fabricProperties = new Properties()  if (fabricPropertiesFile.exists()) {  fabricProperties.load(new FileInputStream(fabricPropertiesFile))  }   defaultConfig {  applicationId \u0026#34;com.aykutasil.circlecitest\u0026#34;  minSdkVersion 21  targetSdkVersion 28  versionCode 1  versionName \u0026#34;1.0\u0026#34;  testInstrumentationRunner \u0026#34;android.support.test.runner.AndroidJUnitRunner\u0026#34;   ext.betaDistributionEmails = \u0026#34;aykuttasil@hotmail.com\u0026#34;  ext.betaDistributionNotifications = true  resValue \u0026#34;string\u0026#34;, \u0026#34;io.fabric.ApiKey\u0026#34;, fabricProperties[\u0026#39;apiKey\u0026#39;]  }   def keystorePropertiesFile = rootProject.file(\u0026#34;keystore.properties\u0026#34;)  def keystoreProperties = new Properties()  if (keystorePropertiesFile.exists()) {  keystoreProperties.load(new FileInputStream(keystorePropertiesFile))  }   signingConfigs {  config {  keyAlias keystoreProperties[\u0026#39;signingKeyAlias\u0026#39;]  keyPassword keystoreProperties[\u0026#39;signingKeyAliasPassword\u0026#39;]  storeFile file(keystoreProperties[\u0026#39;signingStoreFile\u0026#39;])  storePassword keystoreProperties[\u0026#39;signingStorePassword\u0026#39;]  }  }   buildTypes {  release {  minifyEnabled false  proguardFiles getDefaultProguardFile(\u0026#39;proguard-android.txt\u0026#39;), \u0026#39;proguard-rules.pro\u0026#39;  signingConfig signingConfigs.config  }  } }  dependencies {  implementation fileTree(include: [\u0026#39;*.jar\u0026#39;], dir: \u0026#39;libs\u0026#39;)  implementation \u0026#34;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\u0026#34;  implementation \u0026#39;com.android.support:appcompat-v7:28.0.0\u0026#39;  implementation \u0026#39;com.android.support.constraint:constraint-layout:1.1.3\u0026#39;  testImplementation \u0026#39;junit:junit:4.12\u0026#39;  androidTestImplementation \u0026#39;com.android.support.test:runner:1.0.2\u0026#39;  androidTestImplementation \u0026#39;com.android.support.test.espresso:espresso-core:3.0.2\u0026#39;  implementation(\u0026#39;com.crashlytics.sdk.android:crashlytics:2.9.6@aar\u0026#39;) {  transitive = true  } } Ne Yaptık ? Yukarıda ki örnek gradle dosyasında log için kullanılan Crashlytics\u0026rsquo; apiKey bilgilerini ve apk imzalama için gerekli bilgileri başka dosyalardan okuyayarak gizliliği sağladığımızı görüyorsunuz.\nBu bilgileri okuğumuz keystore.properties ve fabric.properties dosyalarını VCS içerisine eklemiyoruz. Yani .gitignore dosyamıza ekleyerek github, bitbucket gibi VCS platformlarına gönderimini engelliyoruz.\nPeki bu dosyaları VCS platformuna göndermemiş isek CI/CD platformu projemizi derlemeye çalışırken gradle dosyası içerisinde ki bu bilgileri nasıl okuyacak?\nİşte bunun için farklı yöntemler mevcut. Bunlardan ikisi yukarıda ki örnekte mevcut.\n1. Base64 Yöntemi Yukarıda ki .yml dosyasını incelediğinizde command: echo $KEYSTORE_BASE64 | base64 --decode \u0026gt; app/aykutasilkeystore şeklinde bir satır göreceksiniz. Burada yaptığımız şey mevcut keystore dosyamızın base64 değerini alarak CI/CD platformuna environment variable olarak kayıt etmek. Ve daha sonra yml dosyasında bu environment variable ($KEYSTORE_BASE64) değerini okuyarak base64 --decode komutu ile decode ederek \u0026gt; app/aykutasilkeystore yoluna bu dosyayı ekliyoruz. Ve artık gradle dosyamız ilgili dosyayı(keystore) bulacağı için sorun oluşmayacak ve düzgün bir şekilde projemiz derlenecektir.\n2. Environment Variable Aslında burada da bir öncekine benzer bir yapılandırma söz konusu. Tek fark okunan environment variable değerini ilgili dosyaya direk olarak yazmak.\nYukarıda ki yml dosyasında echo \u0026quot;apiKey=$FABRIC_API_KEY\u0026quot; \u0026gt;\u0026gt; app/fabric.properties satırında direk olarak $FABRIC_API_KEY değeri okunup app/fabric.properties yolunda fabric.properties isimli dosyanın oluşması sağlanmıştır.\n","permalink":"https://yazilim.aykutasil.com/android-circleci/","summary":"CircleCI Android Yapılandırması .circleci/config.yml version: 2 jobs:  build:  working_directory: ~/code  docker:  - image: circleci/android:api-28-alpha  environment:  JVM_OPTS: -Xmx3200m  steps:  - checkout  - run:  name: Initialize Keystore File  command: echo $KEYSTORE_BASE64 | base64 --decode \u0026gt; app/aykutasilkeystore  - run:  name: Initialize Fabric Properties  command: |echo \u0026#34;apiKey=$FABRIC_API_KEY\u0026#34; \u0026gt;\u0026gt; app/fabric.properties echo \u0026#34;apiSecret=$FABRIC_API_SECRET\u0026#34; \u0026gt;\u0026gt; app/fabric.properties cat app/fabric.properties  - run:  name: Initialize Keystore File  command: |echo \u0026#34;signingKeyAlias=$KEYSTORE_KEY_ALIAS\u0026#34; \u0026gt;\u0026gt; keystore.","title":"Android CircleCI Configuration"},{"content":"CI/CD Uygulamaların build/test/depleyment süreçlerini otomatize etmemizi sağlayan CI/CD kavramları günümüz yazılım dünyasında olmazsa olmaz, bilinmezse ayıp olurlar arasına girmiş bulunmaktadır. Manuel yapılan bu işlemlerin otomatize edilmesi bize ve takım üyelerine çeşitli konularda fayda sağlayacak ve eğer manuel yöntemler ile ilerlendiği takdirde oluşabilecek hataları minimuma indirecektir. Projenizin build/test/deployment adımlarında çeşitli sorunlar yaşamaya başlamışsanız ya da başlamadan bitirmek istiyorsanız bu kavramları öğrenmekte fayda var.\nÇeşitli CI/CD araçları bulunmaktadır. Travis, Bitrise, AppCenter, CircleCI bunlardan bazılarıdır.\n Continuous Integration (CI)\n  Sürekli entegrasyon, geliştiricilerin kodlarını erken ve sık olarak, paylaşılan bir reponun master dalına entegre etmelerini teşvik eden bir düşünce sistemidir. Geliştirme yapılan kod sürecin en sonunda entegre edilmektense, gün içerisinde sık sık entegre edilerek testlerin çalıştırılması ve eğer varsa hataların önceden fark edilerek düzeltilmesi sağlanır. Sürekli Entegrasyon, dijital dönüşüm için önemli bir adımdır.\n Nedir?\n Her geliştirici, günlük olarak commit yapar. Her commit otomatik olarak build ve testi tetikler. Build ve test başarısız olursa, hızlı bir şekilde onarılır.  Neden ihtiyaç var?\n Takım verimliliğini ve mutluluğunu geliştir. Sorunları bul ve çabuk çöz. Daha yüksek kalite, daha kararlı ürünler bırakın.   CircleCI Circle CI, çeşitli pricing modelleri ile birlikte belli kısıtlamalar dahilinde ücretsiz CI/CD araçları sunan bir ortam sunar. Hazırlanan konfigurasyon dosyası(.yml) ile tüm süreçler(build/test/deployment) otomatik olarak işletilebilir.\nconfig.yml jobs Jobs bloğunun içerisinde ki tüm komutlar circleci konteynerini kullanan tek bir ünitede gerçekleştirilir.\nJobs ve Steps blokları, konfigurasyon aşamasında daha fazla kontrol ve daha sık geri bildirim sağlayarak sürece hakim olmamız için bir ortam sunar.\n workspace\n Tek bir workflow içerisindeki job\u0026rsquo;lar arasında veri taşımamıza olanak sağlar.  cache\n Workflow arasında veri taşınması için cache\u0026rsquo;leme mekanizması kullanılır.  artifacts\n Workflow çalışmasını bitirdikten sonra verilerin kalıcı olarak saklanmasını sağlar.   steps ...  steps:  - checkout # Special step to checkout your source code  - run: # Run step to execute commands, see  # circleci.com/docs/2.0/configuration-reference/#run  name: Running tests  command: make test # executable command run in  # non-login shell with /bin/bash -eo pipefail option  # by default. #... steps bloğu genelde projede bir job oluşturmak için gereken adımları/komutları belirtmemizi sağlar. checkout özel bir komuttur ve SSH ile uygulamamızın kaynak kodunun kopyasını alır(Github,Bitbucket). run bölümünde ise çalıştırılacak komutlar belirtilir.\ncheckout checkout komutu proje kaynak kodlarını ilgili repodan(github,bitbucket) çekerek circleci container ı içerisinde klonlar.\nrun run bloğu altında tek bir komut çalıştırılabileceği gibi birden fazla komutun da işlenmesi sağlanabilir. Bunun için aşağıdaki gibi bir düzenlemeye ihtiyaç vardır:\n - run:  name: Initialize Keystore File  command: |echo \u0026#34;signingKeyAlias=$KEYSTORE_KEY_ALIAS\u0026#34; \u0026gt;\u0026gt; keystore.properties echo \u0026#34;signingKeyAliasPassword=$KEYSTORE_KEY_ALIAS_PASSWORD\u0026#34; \u0026gt;\u0026gt; keystore.properties echo \u0026#34;signingStoreFile=$KEYSTORE_STORE_FILE\u0026#34; \u0026gt;\u0026gt; keystore.properties echo \u0026#34;signingStorePassword=$KEYSTORE_STORE_PASSWORD\u0026#34; \u0026gt;\u0026gt; keystore.properties cat keystore.properties save_cache Uygulama bağımlılık/dependency dosyalarını cache\u0026rsquo;lemek için kullanılır.\nrestore_cache save_cache bloğunda cache\u0026rsquo;lenen bağımlılıkların tekrar indirilmeden kullanılmasını sağlar. Bu sayede yalnızca bir kez indirilen bağımlılıklar sayesinde uygun ortamın oluşturulma süresi minumuma inmiş olur.\nstore_artifacts  - store_artifacts:  path: app/build/reports  destination: reports Proje dosyalarının derlenmesi sonrasında app/build/reports klasörü altında oluşan dosyaların kalıcı olarak saklanmasını sağlar. CircleCI panelinde ilgili proje ve derleme bölümünde artifacts tabı altında reports klasörü içerisinden erişim sağlanabilir.\nstore_test_results  - store_test_results:  path: app/build/test-results Projenin derlenmesi sonrasında app/build/test-results klasörü altında oluşan test dosyalarını saklamak için özel bi komuttur.\n orbs version: 2.1 orbs:  hello: circleci/hello-build@0.0.5 workflows:  \u0026#34;Hello Workflow\u0026#34;:  jobs:  - hello/hello-build Önceden hazırlanmış konfigurasyon dosyasını mevcut dosyamıza import ederek hızlıca kullanmamızı sağlar.\nOrblar, yapılandırmanızın basitleştirilmesi, paylaşılması ve projelerin içinde ve genelinde yeniden yapılandırılması için name ile içe aktardığınız veya inline yapılandırdığınız yapılandırma paketleridir.\nNot: orgs bloğunu kullanabilmemiz için version numarası min 2.1 olmalıdır.\n workflows workflows bloğu, job ların hazırlanmasını ve bunların çalışma sırasını tanımlamak için kullanılır. Workflows\u0026rsquo;lar, hataları daha hızlı çözmenize yardımcı olmak için basit bir yapılandırma anahtarları seti kullanarak karmaşık iş düzenlemesini destekler.\n Gerçek zamanlı durum geri bildirimi ile işleri bağımsız olarak çalıştırma ve sorunları giderme, Yalnızca periyodik olarak çalışması gereken işler için iş akışları planlama, Verimli sürüm testi için birden çok işi paralel olarak çalıştırma, Birden çok platforma hızla dağıtım yapma.   Executor Type CircleCI, Jobs\u0026rsquo;ları üç ortamdan birinde çalıştırmanıza olanak tanır:\n docker machine macos   Docker ve Machine ortamları arasındaki farklara göz atmak isterseniz \u0026gt; https://circleci.com/docs/2.0/executor-types/\n docker jobs:  build:  docker:  - image: buildpack-deps:trusty machine version: 2 jobs:  build:  machine: true  true = circleci/classic:latest : haftada bir güncelleme alır. image: circleci/classic:2017-01 : güncelleme almaz. Sabit versiyon. circleci/classic:edge : sık sık güncelle alır.  Yukarıda ki üç değerden biri olmak zorundadır.\nmachine ile jobs\u0026rsquo;lar aşağıdaki özelliklere sahip özel ve geçici bir VM\u0026rsquo;de çalıştırır:\n   CPUs Processor RAM HD     2 Intel(R) Xeon(R) @ 2.3GHz 8GB 100GB    machine yürütücüsünü kullanmak, uygulamanıza OS kaynaklarına tam erişim sağlar ve job ortamı üzerinde tam kontrol sağlar. Bu denetim, ping kullanmanız veya sistemi sysctl komutlarıyla değiştirmeniz gereken durumlarda yararlı olabilir.\nmachine yürütücüsünü kullanmak, Ruby ve PHP gibi diller için ek paketler indirmeden bir Docker görüntüsü oluşturmanıza da olanak tanır.\nNot: machine kullanmak, gelecekteki fiyatlandırma güncellemesinde ek ücretler gerektirebilir.\nmacos jobs:  build:  macos:  xcode: \u0026#34;9.0\u0026#34;  steps:  # Commands will execute in macOS container  # with Xcode 9.0 installed  - run: xcodebuild -version macOS işletim sistemi ve XCode gerektiren süreçler için macos ortamı kullanılabilir.\nMultiple Docker Images jobs:  build:  docker:  # Primary container image where all steps run.  - image: buildpack-deps:trusty  # Secondary container image on common network.   - image: mongo:2.6.8-jessie  command: [mongod, --smallfiles]   working_directory: ~/   steps:  # command will execute in trusty container  # and can access mongo on localhost  - run: sleep 5 \u0026amp;\u0026amp; nc -vz localhost 27017 Birden çok image belirtilmiş ise ilk belirtilen image ana ortamı sağlar. steps bloğu içerisinde belirtilen tüm komutlar ilk image ortamı içerisinde çalıştırılır. Tüm container lar ortak bir ağ içerisinde çalıştırılır ve ilk container içerisinden localhost ile erişim sağlanabilir.\n Kaynaklar  https://circleci.com/docs/2.0/  ","permalink":"https://yazilim.aykutasil.com/circleci-configuration/","summary":"CI/CD Uygulamaların build/test/depleyment süreçlerini otomatize etmemizi sağlayan CI/CD kavramları günümüz yazılım dünyasında olmazsa olmaz, bilinmezse ayıp olurlar arasına girmiş bulunmaktadır. Manuel yapılan bu işlemlerin otomatize edilmesi bize ve takım üyelerine çeşitli konularda fayda sağlayacak ve eğer manuel yöntemler ile ilerlendiği takdirde oluşabilecek hataları minimuma indirecektir. Projenizin build/test/deployment adımlarında çeşitli sorunlar yaşamaya başlamışsanız ya da başlamadan bitirmek istiyorsanız bu kavramları öğrenmekte fayda var.\nÇeşitli CI/CD araçları bulunmaktadır. Travis, Bitrise, AppCenter, CircleCI bunlardan bazılarıdır.","title":"CircleCI Configuration"},{"content":"Problem ./ssh klasörünüzde id_rsa ve id_rsa.pub dosyanız var ve Github, Gitlab, DigitalOcean vs. gibi platformlara erişim için bu rsa keyini kullanıyorsunuz. Her biri için ayrı ayrı rsa key oluşturmuş da olabilirsiniz tabi. Fakat git clone git@gitlab.com:aykuttasil/test.git gibi bir komutu çalıştırdığınızda Enter passphrase for key '/Users/aykutasil/.ssh/id_rsa': gibi bir uyarı karşınıza çıkıyor ve rsa keyinizin şifresini girmenizi istiyor. Her git komutunda aynı şey ile karşılaşıyorsunuz.\nYukarıda ki durum ssh\u0026lsquo;ın kullanım amacına ters düştüğü için ortada bir problem var demektir.\nÇözüm  ssh-add -K ~/.ssh/id_rsa komutunu çalıştırın.  Ve ./ssh/ klasörü altındaki config dosyasında aşağıdaki bloğu ekleyin.\nHost *  UseKeychain yes  AddKeysToAgent yes  IdentityFile ~/.ssh/id_rsa Artık erişmek istediğiniz sunucu sizin bilgisayarınızı ve kullanıcınızı tanıyacağı için tekrar tekrar şifre girmeniz gerekmeyecektir.\n","permalink":"https://yazilim.aykutasil.com/ssh-surekli-parola-isteme-problemi/","summary":"Problem ./ssh klasörünüzde id_rsa ve id_rsa.pub dosyanız var ve Github, Gitlab, DigitalOcean vs. gibi platformlara erişim için bu rsa keyini kullanıyorsunuz. Her biri için ayrı ayrı rsa key oluşturmuş da olabilirsiniz tabi. Fakat git clone git@gitlab.com:aykuttasil/test.git gibi bir komutu çalıştırdığınızda Enter passphrase for key '/Users/aykutasil/.ssh/id_rsa': gibi bir uyarı karşınıza çıkıyor ve rsa keyinizin şifresini girmenizi istiyor. Her git komutunda aynı şey ile karşılaşıyorsunuz.\nYukarıda ki durum ssh\u0026lsquo;ın kullanım amacına ters düştüğü için ortada bir problem var demektir.","title":"SSH Sürekli Parola İstemesi Sorunu"},{"content":"@BindsInstance Bağımlılıklarınızı oluşturma esnasında belirtmeniz gereken bir değişkenininiz var ve bu değişkeni diğer module leriniz içerisinde kullanıcaksınız. Aşağıdaki gibi @BindsInstance kullanarak bu bağımlılığınızı dependency graph içerisine ekleyerek diğer modüller içerisinde kullanımını sağlayabilirsiniz.\n@Component(modules = AppModule.class) interface AppComponent {  App app();   @Component.Builder  interface Builder {  @BindsInstance Builder apiUrl(@ApiUrl String apiUrl);  AppComponent build();  } } Component build edilirken apiUrl değeri bind edilir.\n App app = DaggerAppComponent  .builder()  .apiUrl(\u0026#34;http://....\u0026#34;)  .build()  ","permalink":"https://yazilim.aykutasil.com/android-dagger/","summary":"@BindsInstance Bağımlılıklarınızı oluşturma esnasında belirtmeniz gereken bir değişkenininiz var ve bu değişkeni diğer module leriniz içerisinde kullanıcaksınız. Aşağıdaki gibi @BindsInstance kullanarak bu bağımlılığınızı dependency graph içerisine ekleyerek diğer modüller içerisinde kullanımını sağlayabilirsiniz.\n@Component(modules = AppModule.class) interface AppComponent {  App app();   @Component.Builder  interface Builder {  @BindsInstance Builder apiUrl(@ApiUrl String apiUrl);  AppComponent build();  } } Component build edilirken apiUrl değeri bind edilir.\n App app = DaggerAppComponent  .","title":"Android Dagger"},{"content":" Not: Bu yazı öğrenme sürecinde hazırlanmış olup kısa kısa notlar içerir.\n Nedir bu AMP Kurallar  \u0026lt;!doctype html\u0026gt; ile başlamalı \u0026lt;html amp\u0026gt; şeklinde düzenlenmeli \u0026lt;head\u0026gt; tagı içerisine ilk sırada \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; şeklinde meta tagı eklenmeli \u0026lt;head\u0026gt; tagı içerisine mümkün olduğunda erken sırada \u0026lt;script async src=\u0026quot;https://cdn.ampproject.org/v0.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; script tagı eklenmeli \u0026lt;head\u0026gt; tagı içerisine sayfanın AMP olmayan halinin linkini ya da sadece AMP li hali var ise kendi url i \u0026lt;link rel=\u0026quot;canonical\u0026quot; href=\u0026quot;$SOME_URL\u0026quot;\u0026gt; şeklinde belirtilmeli \u0026lt;head\u0026gt; tagı içerisine \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width,minimum-scale=1\u0026quot;\u0026gt; meta tagı eklenmeli AMP js dosyası yüklenene kadar mevcut içeriği gizlemek için \u0026lt;style amp-boilerplate\u0026gt;body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}\u0026lt;/style\u0026gt;\u0026lt;noscript\u0026gt;\u0026lt;style amp-boilerplate\u0026gt;body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}\u0026lt;/style\u0026gt;\u0026lt;/noscript\u0026gt; tagı eklenmeli     Bir çok HTMl tagı direk olarak AMP HTML içerisinde kullanılabilir fakat bazılarının (img gibi) AMP için özel versiyonları bulunmaktadır. Bazı html tagları ise AMP HTML için yasaklanmıştır.(iframe gibi)\n  Web sayfasının doğru bir şekilde dağıtılması ve bulunması için aşağıdaki düzenlemeler yapılmalıdır.\n Normal html sayfasına AMP li sayfanın bilgisi, AMP li sayfaya da normal html sayfasının bilgisi eklenmelidir.  Normal sayfaya \u0026lt;link rel=\u0026quot;amphtml\u0026quot; href=\u0026quot;https://www.example.com/url/to/amp/document.html\u0026quot;\u0026gt; AMP li sayfaya \u0026lt;link rel=\u0026quot;canonical\u0026quot; href=\u0026quot;https://www.example.com/url/to/full/document.html\u0026quot;\u0026gt; eklenmelidir. Eğer sayfanın sadece AMP versiyonu var ise kendi linki canonical olarak belirtilmelidir.  \u0026lt;link rel=\u0026quot;canonical\u0026quot; href=\u0026quot;https://www.example.com/url/to/amp/document.html\u0026quot;\u0026gt;         AMP-HTML  \u0026lt;amp-img\u0026gt;  Örnek: \u0026lt;amp-img src=\u0026quot;welcome.jpg\u0026quot; alt=\u0026quot;Welcome\u0026quot; height=\u0026quot;400\u0026quot; width=\u0026quot;800\u0026quot;\u0026gt;\u0026lt;/amp-img\u0026gt;\n Style \u0026lt;style amp-custom\u0026gt;  /* any custom style goes here */  body {  background-color: white;  }  amp-img {  background-color: gray;  border: 1px solid black;  } \u0026lt;/style\u0026gt; Normak html sayfalarındaki gibi amp html sayfalarında da mevcut taglara style uygulanabilir. Tabi bazı kısıtlamalar ve düzenlemeler yapmak gerekmekdtedir.\n Yukarıda görüldüğü üzere \u0026lt;style amp-custom\u0026gt; şeklinde düzenleme yapılmalıdır. \u0026lt;head\u0026gt; tagı içerisine eklenmelidir Harici bir dosyadan çağırılmamalıdır. Tek bir \u0026lt;style\u0026gt; tagı bulunabilir ve inline styles olmalıdır.   Validate AMP url inin sonuna #development=1 eklenerek (http://localhost:8000/released.amp.html#development=1) valide olup olmadığı kontrol edilebilir. Chrome DevTools açılarak console a yazılan loglar takip edilebilir.\n Update or Delete Cache Sayfamızda bir değişiklik oldu ve bunu google a söylememiz gerekiyor. Hiç bir etkileşimde bulunmaz isek max-age meta tagına göre güncelleme yapılır.\nBir değişiklik olduğunu ve google ın mevut cache i güncellemesi gerektiğini söylememiz için\n https://example-com.\u0026lt;cache.updateCacheApiDomainSuffix\u0026gt;/update-cache/c/s/example.com/article?amp_action=flush\u0026amp;amp_ts=\u0026lt;ts_val\u0026gt;\u0026amp;amp_url_signature=\u0026lt;sig_val\u0026gt; şeklinde bir istekte bulunmamız gerekiyor  adresine, linkteki alanları uygun şekilde doldurduktan sonra request atmamız gerekiyor. Nasıl doldurmamız gerektiği ile ilgili açıklamaları aşağıdaki linkte bulabilirsiniz.\n https://developers.google.com/amp/cache/update-cache  Google AMP Cache mekanizması otomatik güncelleme için de bir yapıya sahiptir. Kullanıcı daha önce cache lenmiş bir AMP dökümanına istekte bulunduğunda Google AMP cache mekanizöası taze datayı sağlamak için update request inde bulunur. Aynı dökümana istekte bulunan birkaç kullanıcıdan sonra taze içerik gösterilmeye başlanır.\n Kaynaklar  https://www.ampproject.org/docs/  ","permalink":"https://yazilim.aykutasil.com/posts/amp_1/","summary":"Not: Bu yazı öğrenme sürecinde hazırlanmış olup kısa kısa notlar içerir.\n Nedir bu AMP Kurallar  \u0026lt;!doctype html\u0026gt; ile başlamalı \u0026lt;html amp\u0026gt; şeklinde düzenlenmeli \u0026lt;head\u0026gt; tagı içerisine ilk sırada \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; şeklinde meta tagı eklenmeli \u0026lt;head\u0026gt; tagı içerisine mümkün olduğunda erken sırada \u0026lt;script async src=\u0026quot;https://cdn.ampproject.org/v0.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; script tagı eklenmeli \u0026lt;head\u0026gt; tagı içerisine sayfanın AMP olmayan halinin linkini ya da sadece AMP li hali var ise kendi url i \u0026lt;link rel=\u0026quot;canonical\u0026quot; href=\u0026quot;$SOME_URL\u0026quot;\u0026gt; şeklinde belirtilmeli \u0026lt;head\u0026gt; tagı içerisine \u0026lt;meta name=\u0026quot;viewport\u0026quot; content=\u0026quot;width=device-width,minimum-scale=1\u0026quot;\u0026gt; meta tagı eklenmeli AMP js dosyası yüklenene kadar mevcut içeriği gizlemek için \u0026lt;style amp-boilerplate\u0026gt;body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}\u0026lt;/style\u0026gt;\u0026lt;noscript\u0026gt;\u0026lt;style amp-boilerplate\u0026gt;body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}\u0026lt;/style\u0026gt;\u0026lt;/noscript\u0026gt; tagı eklenmeli     Bir çok HTMl tagı direk olarak AMP HTML içerisinde kullanılabilir fakat bazılarının (img gibi) AMP için özel versiyonları bulunmaktadır.","title":"AMP"},{"content":" Not: Bu yazıyı hazırlarken ben de öğrenme sürecinde olucam. Araştırdığım ve öğrendiğim tüm teknik bilgileri ve yöntemleri, best-practice leri gelişi güzel(karmakarışık değil) bir şekilde yazıcam. Sonrasında zaman bulduğum vakit bir düzenleme yapıcam.\n Unit Test ve Instrumentation Test Unit Test Unit Test: Android framework ünden bağımsız olan sınıfları/metodları test etmek için kullanılır. Robolectric ve JUnit popüler unit test araçlarıdır.\n If you run local unit tests, a special version of the android.jar (also known as the Android mockable jar) is created by the tooling. This modified JAR file is provided to the unit test so that all fields, methods and classes are available. Any call to the Android mockable JAR results, by default, in an exception, but you can configure Android to return default values. See Activating default return values for mocked methods in android.jar for details.\n Instrumentation Test (on-device) Android framework\u0026rsquo;ü ile gerçek anlamda etkileşime girmesi gereken sınıfların testi için Instrumentation Test yapılması gerekmektedir. Espresso, UIAutomator, Robotium popüler instrumentation test araçlarıdır.\n Unit Test sınıfları aşağıdaki resimde görülen test package\u0026rsquo;ı altına eklenir. Instrumentation Test sınıfları resimde görülen androidTest package\u0026rsquo;ı altına eklenir. app/src/test/java - for any unit test which can run on the JVM app/src/androidTest/java -\u0026gt; for any test which should run on an Android device   Android bağımlılıklarını mock edemiyorsak Instrumentation Test yazılır. Eğer mock edebileceğimiz bir yapıya sahip ise unit test yazılır. Bu sayede hızlı bir şekilde testler koşturulabilir.\n  Instrumentation test yapılırken sınıf @AndroidJUnitRunner annotations\u0026rsquo;ı ile etiketlenmelidir. Instrumentation testleri JVM yerine gerçek bir cihazda veya emülatör de koşturulur.  AndroidJunitRunner provides access to the instrumentation API, via the InstrumentationRegistery.**\n InstrumentationRegistry.getInstrumentation(), returns the Instrumentation currently running. InstrumentationRegistry.getContext(), returns the Context of this Instrumentation\u0026rsquo;s package. InstrumentationRegistry.getTargetContext(), returns the application Context of the target application. InstrumentationRegistry.getArguments(), returns a copy of arguments Bundle that was passed to this Instrumentation.  This is useful when you want to access the command line arguments passed to the instrumentation for your test. It also gives access to the life cycle via the ActivityLifecycleMonitorRegistry.\n Espresso Uygulamanın arayüzü ile ilgli test yazımı için kullanılır.\n Roboloctric Robolectric, kodunuzu yerel JVM\u0026rsquo;de gerçek(sahte olmayan) Android JAR\u0026rsquo;lere karşı çalıştırır. Bu, düşük seviyeli sistem bileşenlerini (UI gibi) simüle etmek için baytkod manipülasyonu kullanılarak yapılabilir.\nSonuç, bir emülatöre ya da cihaza dağıtma yükü olmadan daha gerçekçi bir test tertibatıdır. Gerçek Android framework ünün çalışan bir sürümünü kullanmak, test yürütmeyi yavaşlatır ve saf unit testleri ile karşılaştırıldığında bir derece kırılganlık ekler.\nRoboloctric ile neredeyse her android componentinin shadow hali üretileblir. Ve bu üretilen shadow nesneleri normal componentlerin sahip olmadığı bazı fonksiyonlara sahiptir.\nMockito, Espresso gibi diğer test bileşenleri ile birlikte çalıştırılabilir.\nActivity activity = Robolectric.buildActivity(MyAwesomeActivity.class).create().get(); şeklinde test edeceğimiz Activity nin oluşturulmasını sağlıyoruz.\nAşağıdaki gibi activity nin lifecycle\u0026rsquo;ına uygun testler yazılabilir. Burada onResume sonrası çalışan kod bloğu için test yazımını görebiliriz.\n visible()\n Gerçek bir Android uygulamasında, bir Etkinliğin görünüm hiyerarşisi, onCreate() çağrıldıktan sonraya kadar window\u0026rsquo;a eklenmez. Bu gerçekleşene kadar Activity\u0026rsquo;nin görünümleri görünür olarak bildirilmez. Bu, onları tıklayamayacağınız anlamına gelir. Ne zaman görünür olacağı varsayımları yapmak yerine, Robolectric testleri yazarken gücü geliştiricinin ellerine verir.\nNe zaman ihtiyacımız olacak? Activity içindeki görünümlerle etkileşime girdiğinizde.\nRobolectric.clickOn() gibi yöntemler, işlev görmesi için view\u0026rsquo;in görünür olması ve düzgün şekilde eklenmesini gerektirir. Bunun için create() öğesinden sonra visible() öğesini çağırmalıyız.\nRobolectric 4 gradle.properties\nandroid.enableUnitTestBinaryResources=true build.gradle\ntest.kt (test package\u0026rsquo;ı altında)\nYukarıda RobolectricRunner yerine AndroidJunit4 kullanılmıştır. Ve Espreesso\u0026rsquo;nun tüm yetenekleri kullanılabilir. Normalde Espresso testi yazılması için androidTest package\u0026rsquo;ı altında tanımlama yapmak ve gerçek bir cihazda ya da emülatör de çalıştırmamız gerekecekti.\n Mockito  Yukarıda ki bağımlılıklar eklenir. @RunWith(MockitoJUnitRunner.class) ile sınıf etiketlenir. Bu sayade mock objelerinin(@Mock) otomatik olarak inject edilmesi sağlanır. @Mock etiketi ile objeler etiketlenir.   @Mock ve @Spy arasındaki fark\n  https://www.javainuse.com/java/mockSpy Test sürecinde bir objenin tüm alanlarını/metodlarını mocklamamız gerekiyor ise @Mock kullanılır. Eğer sınıf içerisinde sadece belli metodları mocklamamız gerekiyor(Partial Mocking) ve diğer alanların gerçek değerleri ile işlem yapılacak ise @Spy ile etiketlenir. Partial mocking can also be achieved using mock thenCallRealMethod()  Kotlin ile geliştirilen uygulamaların test yazımı sırasında mocklanmak istenen sınıflar, alanlar vs. kotlin dilinin yapısı gereği çeşitli hataların üretilmesine neden olur. Bu uyuşmazlığın sebeplerinden biri kotlin ile oluşturulan sınıfların, alanların default olarak final olması ve Mockito\u0026rsquo;nun final sınıf veya alanları mocklayamamasıdır. Çözüm olarak sınıfların, fonksiyonların vs. başına open eklenmesi veya mockitoyu eklerken aşağıdaki kütüphanenin kullanılması gerekmektedir.\n testImplementation \u0026quot;org.mockito:mockito-inline:2.23.16\u0026quot;\u0026quot; testImplementation \u0026quot;org.mockito:mockito-core:2.23.16\u0026quot; bu satırı siliyoruz.  Kotlin dilinin nimetlerinden yararlanarak test yazımı sırasında mockitonun kullanımını kolaylaştırmak için aşağıdaki kütüphaneyi kullanabilriz\n https://github.com/nhaarman/mockito-kotlin testImplementation \u0026quot;com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0\u0026quot;   Test Piramit  Unit Tests\n Birim testleri, yazabileceğiniz en hızlı ve en ucuz testlerdir. Uygulamanızın tüm mantığını (ancak bağımlılıklarını değil) çoğunu kapsamaları gerekir. Bağımlılıklar, mock objeler ile değiştirilmelidir. Unit testleri, yazılım geliştirme sürecinin düzenli bir parçası olarak sıkça çalıştırılabilir. Android JUnit, Mockito yerel JVM\u0026rsquo;de hızlı birim tarzı testler yapmak için güzel bir araç kombinasyonu sunuyor.\n Integration Tests\n Entegrasyon testleri, kodunuzun, sistemin diğer bölümleriyle nasıl etkileşime girdiğini doğrular ancak bir UI çerçevesinin ek karmaşıklığı olmadan. Bu katman için Robolectric kullanılabilir.\n UI Tests\n UI testleri, en yavaş ve en pahalı test türüdür. Bunlar yavaştır, çünkü uygulamanızı bir emülatöre veya cihaza dağıtmanız ve kullanıcı arayüzünü kullanarak sürmeniz gerekir. Bunlar pahalıdır çünkü bu genellikle dahili bir cihaz laboratuarını ve CI sunucusunu korumak veya bir bulut test hizmeti için ödeme yapmak anlamına gelir. Bununla birlikte, UI, donanım, ürün yazılımı ve geriye dönük uyumluluk ile ilgili sorunları ortaya çıkarabildiklerinden, otomatik UI testleri herhangi bir test stratejisinin önemli bir bileşeni olabilir. Android\u0026rsquo;de UI testleri için sahip olduğumuz başlıca araçlar Espresso, Robotium veya UI Automator\u0026lsquo;dur. UI testleri, piramidin diğer katmanlarındaki çatlaklardan kaymış olabilecek sorunları yakalamak için değerli bir ikinci savunma hattı olabilir.\n Small - Medium - Large Tests Testler 3 başlık altında kategorilendirilebilir.\nSmall Test: Unit testleri bu kategori altına alabiliriz. test package ı altına yazılan ve çalışma süresi kısa olan testler de Android ve UI ile alakalı olmayan sınıfların/metodların testi yazılır. Dökümantasyon,filtreleme vs. için small testlerin çalıştırılacağı sınıf @SmallTest olarak etiketlenir.\nMedium Test: Dosya sistemine, database\u0026rsquo;e vs erişimi olan sınıfların testini bu kategoriye koyabiliriz. Dökümantasyon,filtreleme vs. için medium testlerin çalıştırılacağı sınıf @MediumTest olarak etiketlenir.\nLarge Test: Medium\u0026rsquo;dan farkı ağ erişimi gibi dış kaynaklara erişim gerektiren sınıfları bu kategoriye koyabiliriz. Dökümantasyon,filtreleme vs. için large testlerin çalıştırılacağı sınıf @LargeTest olarak etiketlenir.\n MockWebServer Unit test yazarken api rest isteklerinin simüle edilmesini sağlar.\ntestImplementation \u0026#39;com.squareup.okhttp3:mockwebserver:3.8.1\u0026#39;  https://github.com/square/okhttp/blob/master/mockwebserver/README.md  Mockito gibi bir kullanım şekli vardır.\nSocketTimeoutException testi çalıştırılırken aşağıdaki düzenlemeler de yapılmalıdır:\n mockResponse.throttleBody(1024, 1, TimeUnit.SECONDS) Her saniye için sadece 1024 bayt göndermesini söylüyoruz. Client için okuma/yazma zaman sürelerini düzenliyoruz.   getJson(path = \u0026ldquo;json/blog/blogs.json\u0026rdquo;) ?\n Dispatcher Her bir response\u0026rsquo;u ayrı ayrı mocklamak yerine aşağıdaki gibi bir yapıda kullanılabilir.\n Gradle Yapılandırmaları Unit testlerin yazımı sırasında mocklanmaya gerek olmayan nesnelerin default değerini dönmesini belirtmek için aşağıdaki şekilde düzenleme yapılmalıdır.\n  Kaynaklar\n  https://developer.android.com/training/testing/ http://www.vogella.com/tutorials/AndroidTesting/article.html https://medium.com/android-testing-daily/the-3-tiers-of-the-android-test-pyramid-c1211b359acd https://github.com/codepath/android_guides/wiki/Unit-Testing-with-Robolectric https://github.com/codepath/android_guides/wiki/Android-Testing-Options https://www.javainuse.com/java/mockSpy https://proandroiddev.com/robolectric-testing-with-androidjunitrunner-86292bceef25 http://robolectric.org/blog/2018/05/09/robolectric-4-0-alpha/ https://github.com/googlesamples/android-testing https://github.com/square/okhttp/blob/master/mockwebserver/ https://medium.com/appunite-edu-collection/ui-testing-on-android-with-dagger-espresso-and-mockito-12d37e5f613d https://medium.com/@rafael_toledo/setting-up-an-unified-coverage-report-in-android-with-jacoco-robolectric-and-espresso-ffe239aaf3fa https://github.com/arturdm/jacoco-android-gradle-plugin https://medium.com/@fabioCollini/android-testing-using-dagger-2-mockito-and-a-custom-junit-rule-c8487ed01b56 https://codelabs.developers.google.com/codelabs/android-testing/index.html?index=..%2F..index# https://medium.com/androiddevelopers/write-once-run-everywhere-tests-on-android-88adb2ba20c5 https://github.com/googlesamples/android-testing-templates  ","permalink":"https://yazilim.aykutasil.com/android-test/","summary":"Not: Bu yazıyı hazırlarken ben de öğrenme sürecinde olucam. Araştırdığım ve öğrendiğim tüm teknik bilgileri ve yöntemleri, best-practice leri gelişi güzel(karmakarışık değil) bir şekilde yazıcam. Sonrasında zaman bulduğum vakit bir düzenleme yapıcam.\n Unit Test ve Instrumentation Test Unit Test Unit Test: Android framework ünden bağımsız olan sınıfları/metodları test etmek için kullanılır. Robolectric ve JUnit popüler unit test araçlarıdır.\n If you run local unit tests, a special version of the android.","title":"Android Test"},{"content":"DNS over TLS Nedir? Kısaca açıklamak gerekirse, İnternet Servis Sağlayıcılarının, hangi siteye erişmek istediğimizi görmesini engelleme yöntemidir.\nTLS/SSL protokolü zaten bunu yapmıyor mu? TLS/SSL protokolüne sahip siteler üzerinden yapılan veri alış verişleri şifreli yapılır fakat hala hangi siteye erişmek istediğimiz açık/şifresiz bir şekilde bellidir ve internet servis sağlayıcıları bunu görebilir.\nBunu engellemek için DNS over TLS kullanılır.\nÖzet  TLS üzerinden DNS, tüm DNS isteklerinin güvenli bir şekilde yapılmasını sağlayan bir protokoldür. Bu uygulama, İnternet Servis Sağlayıcılarının hangi web sitelerine erişmeye çalıştığınızı görmesini engeller. DNS\u0026rsquo;i TLS üzerinden kullanmak için DNS servisinizin bunu desteklemesi gerekir.  Kaynak  https://www.thesslstore.com/blog/what-is-dns-over-tls/ https://developers.cloudflare.com/1.1.1.1/dns-over-tls/  ","permalink":"https://yazilim.aykutasil.com/dns-over-tls/","summary":"DNS over TLS Nedir? Kısaca açıklamak gerekirse, İnternet Servis Sağlayıcılarının, hangi siteye erişmek istediğimizi görmesini engelleme yöntemidir.\nTLS/SSL protokolü zaten bunu yapmıyor mu? TLS/SSL protokolüne sahip siteler üzerinden yapılan veri alış verişleri şifreli yapılır fakat hala hangi siteye erişmek istediğimiz açık/şifresiz bir şekilde bellidir ve internet servis sağlayıcıları bunu görebilir.\nBunu engellemek için DNS over TLS kullanılır.\nÖzet  TLS üzerinden DNS, tüm DNS isteklerinin güvenli bir şekilde yapılmasını sağlayan bir protokoldür.","title":"DNS over TLS Nedir?"},{"content":"TLS/SSL nedir? TLS (Transport Layer Securtiy) , SSL(Secure Sockets Layer)\u0026lsquo;ın modernize edilmiş halidir diyebiliriz. Yani günümüzde SSL den bahsedildiğinde aslında TLS den bahsediliyor olduğunu söyleyebiliriz.\nTLS protokolü, makinelerin web üzerindeki iletişimini kimlik doğrulama ve şifreleme mekanizmaları ile güvenli hale getirem bir standarttır. Günümüz dijital dünyasında güvenliğin önemi her geçen gün arttığı için iletişim yöntemleri ve güvenliği de beraberinde değişmekte ve gelişmektedir. Bu nedenle web iletişiminin güvenli hale gelmesi zorunluluk ve ihtiyaçtır.\nTLS/SSL Gelişim Süreci  1995: SSL v2 ilk olarak Netscape firması tarafından yayınlandı. v1 nerede diye soracak olursak hiç yayınlanmadı diyebiliriz. Neden? \u0026gt; Google :) 1996: SSL v3 v2 nin çeşitli açıklarının kapatılmış sürümü, 1999: TLS v1.0 SSL v3 ün çeşitli açıklarının kapatılmış sürümü, 2006: TLS v1.1 TLS v1 in çeşitli açıklarının kapatılmış sürümü, 2008: TLS v1.2 Günümüzde kullanılan standart TLS v1.3 Gelişim sürecinde..  ## Ne anlama gelir?\nTLS/SSL web server ile web browser lar arasındaki data alışverişinin özel ve güvenli bir şekilde yapıldığı ağ protokolüdür.\nTeknik olarak iki ana bölümü vardır:\n TLS el sıkışma katmanı   Hangi şifrenin kullanılacağını (şifreleme algoritmasının türü), kimlik doğrulamayı (etki alanı adınıza ve kuruluşunuza özgü bir sertifika kullanarak) ve anahtar değişimini (sertifikadaki genel-özel anahtar çiftine göre) yönetir. El sıkışma işlemi, her iki taraf için güvenli bir ağ bağlantısı kurmak için yalnızca bir kez gerçekleştirilir.  TLS kayıt katmanı   kullanıcı uygulamalarından veri alır, şifreler, uygun bir boyuta (şifre tarafından belirlendiği gibi) parçalara ayırır ve bunu ağ aktarım katmanına gönderir.  TLS/SSL Faydaları   Davetsiz misafirlerin web sitenizle web tarayıcıları arasındaki iletişimi kurcalamasını engelleyin. Kullanıcı giriş bilgileri, kredi kartı bilgileri gibi hassas verilerin açık bir şekilde internet üzerinde dolaşmasını engelleyin.\n  Davetsiz misafirlerin sunucunuzla iletişimi pasif olarak dinlemelerini önleyin. Bu biraz zor ama büyüyen bir güvenlik tehdidi (Snowden sızıntıları tarafından da onaylandı).\n  TLS/SSL Eksi Yanları  TLS site traiğinde gecikmelere sebebiyet verir El şıkışma mekanizması yoğun kaynak tüketimine sebebiyet verir. TLS server yönetimini komplike hale getirir. (Bununla ilgili modern ve kolay çözümler üretilmiştir.) CPU kullanımını %2 artırır. (https://www.maxcdn.com/blog/ssl-performance-myth/)  TLS/SSL Sertifika Tipleri Nelerdir?   Extended Validation (EV)\n EV sertifikaları, yeşil adres çubuğuna sahiptir. İnternet\u0026rsquo;te tanınan güven sembolüdür.    Organization Validation (OV)\n OV sertifikaları yeşil adres çubuğuna sahip değildir, ancak bazı tarayıcılar güven göstergesini etkinleştirir. OV sertifikası, bir işletmenin Sertifika Yetkilisi tarafından doğrulanmasını gerektirir. Kuruluşun adı, güvenini pekiştiren sertifikada listelenecektir.    Domain Validation (DV)\n DV sertifikaları endüstri standardı şifrelemeyi (diğer sertifika türleri ile aynı seviyede) sunar. Düşük (ya da ücretsiz) maliyetinin yanı sıra, DV sertifikasının bir başka avantajı da sadece birkaç dakika içinde verilebilmesidir. Çünkü Sertifika Yetkilisi sadece güvenmek istediğiniz alana sahip olduğunuzu doğrulamak zorundadır. Otomatik bir süreçtir.    Kaynaklar  Not: Bazı cümleler kaynaklardan direk Türkçe çeviri olarak eklenmiştir.\n  https://www.hostingadvice.com/how-to/tls-vs-ssl/ https://www.globalsign.com/en/blog/ssl-vs-tls-difference/ https://letsencrypt.org/getting-started/ https://www.thesslstore.com/blog/what-is-dns-over-tls/  ","permalink":"https://yazilim.aykutasil.com/tls-ssl/","summary":"TLS/SSL nedir? TLS (Transport Layer Securtiy) , SSL(Secure Sockets Layer)\u0026lsquo;ın modernize edilmiş halidir diyebiliriz. Yani günümüzde SSL den bahsedildiğinde aslında TLS den bahsediliyor olduğunu söyleyebiliriz.\nTLS protokolü, makinelerin web üzerindeki iletişimini kimlik doğrulama ve şifreleme mekanizmaları ile güvenli hale getirem bir standarttır. Günümüz dijital dünyasında güvenliğin önemi her geçen gün arttığı için iletişim yöntemleri ve güvenliği de beraberinde değişmekte ve gelişmektedir. Bu nedenle web iletişiminin güvenli hale gelmesi zorunluluk ve ihtiyaçtır.","title":"TLS vs SSL"},{"content":" Step motoru bir diğer adıyla adım motorları; hızlı, Doğrusal ve kademeli hareket istenilen uygulamalarda kullanılan fırçasız DC elektrik motorudur.\n Kademeli motorlar düşük devirlerde yüksek tork ve düşük titreşim ve hassasiyetle çalışmaktadırlar. Step motorları rotor denilen sabit bir manyetik dönen şafta ve stator olarak adlandırılan motoru çevreleyen sabit kısımdaki elektromıknatıslardan oluşur. step motorlar, yarim adim modunda çalistiklarin da hassasiyetleri daha da artar.\nSTEP MOTORUN SÜRÜCÜ İLE ÇALIŞTIRILMASI Step motorlar mikro denetleyici, arduino ve step motor sürücü yardımı yöntemi ile sürülmektedir. Sürücü ve mikro denetleyici encoder ve plc’ den motora sırasıyla kare dalga ( darbe sinyali ) gönderilerek step motorun adım adım ( derece ) dönmesini sağlar.\nStep motorlarda adımlar derece olarak adlandırılır. Motorun adım derecesi motor’un imalat tasarıma bağlıdır. Derece açıları motorun teknik dökümanlarından öğrenebilir. Adım motorlarının derece açıları 0,6’dan 62,5 dereceye kadar imal edilirler. Örneğin: 400 adımlık bir motor tam dönüşte (360 derece ) 400 adım yapar. Motorun her adım açısı 360/400 = 0,9 derecedir. Adım motoruna uygulanan kare dalga ( pals ) sinyal adeti ile doğru orantıda çıkış sinyali üreterek motor milini istediğimiz derecede döndürebiliriz. Motorun hız ayarı motora birim zamanda ( sn ) gönderilen sinyallere ( pals ) göre değişmektedir.\nBirden fazla step motorun bulunduğu uygulamalarda adım motorları bir birleri ile senkron çalışabilmektedir. Step motora sürekli dc voltaj uygulandığı zaman motor sürekli dönmektedir. Adım motorları geri besleme ( encoder ) ve geri besleme olmadan da kolaylıkla kontrol edilebilmektedir.\nSTEP MOTOR KULLANIM ALANLARI Gıda paketleme, Tıbbi cihazlar, Cnc tezgahları, yazıcılar, Robotlar, Hareket konumlandırma, Fabrika otomasyonlarında\nSTEP MOTOR KULLANIM AVANTAJLARI  Elde edilebilecek güç ve moment sınırlıdır. Sayısal olarak kontrol edilebildiklerinden bilgisayar veya mikro işlemci gibi elemanlarla kontrol edilebilir. Hız, giriş darbelerinin frekansı ile orantılı olduğu için geniş bir dönme hızı aralığı gerçekleştirilebilir. Başlama, durma ve tersine mükemmel tepki gösterirler.  ","permalink":"https://yazilim.aykutasil.com/step-motor-nedir/","summary":"Step motoru bir diğer adıyla adım motorları; hızlı, Doğrusal ve kademeli hareket istenilen uygulamalarda kullanılan fırçasız DC elektrik motorudur.\n Kademeli motorlar düşük devirlerde yüksek tork ve düşük titreşim ve hassasiyetle çalışmaktadırlar. Step motorları rotor denilen sabit bir manyetik dönen şafta ve stator olarak adlandırılan motoru çevreleyen sabit kısımdaki elektromıknatıslardan oluşur. step motorlar, yarim adim modunda çalistiklarin da hassasiyetleri daha da artar.\nSTEP MOTORUN SÜRÜCÜ İLE ÇALIŞTIRILMASI Step motorlar mikro denetleyici, arduino ve step motor sürücü yardımı yöntemi ile sürülmektedir.","title":"Step Motor Nedir?"},{"content":"Android Navigate Örnek Senaryo Kullanıcıya bir ürün ile ilgili notification yolladınız. Kullanıcı bu notification a tıkladığında direk olarak Ürün Detay sayfasına yönlendiriliyor. Kullanıcı sayfada işi bittiğinde geri tuşuna basıyor ve siz bu durumda kullanıcıyı uygulamanın Anasayfasına yönlendirmek istiyorsunuz. Ek bir geliştirme yapmadığınız takdirde bu senaryo için geri tuşuna basıldığında uygulama kapanır. Çünkü geri gidecek ekranı yoktur. Direk olarak Detay sayfası açılmıştır.\n Çözüm İlk olarak yapmamız gereken Manifest.xml dosyasında DetailActivity tanımlamasını yaptığımız yerde parentActivityName i belirtmek. Yani geri tuşuna basıldığında hangi Activity\u0026rsquo;nin açılmasını istiyorsak parentActivityName alanına bu activity i yazıyoruz.\n\u0026lt;application ... \u0026gt;  ...  \u0026lt;!-- The main/home activity (it has no parent activity) --\u0026gt;  \u0026lt;activity  android:name=\u0026#34;com.example.myfirstapp.MainActivity\u0026#34; ...\u0026gt;  ...  \u0026lt;/activity\u0026gt;  \u0026lt;!-- A child of the main activity --\u0026gt;  \u0026lt;activity  android:name=\u0026#34;com.example.myfirstapp.DetailActivity\u0026#34;  android:label=\u0026#34;@string/title_activity_display_message\u0026#34;  android:parentActivityName=\u0026#34;com.example.myfirstapp.MainActivity\u0026#34; \u0026gt;  \u0026lt;!-- Android uygulamamız 4.1 ve öncesini destekliyorsa meta-data ile de belirtmek durumundayız.--\u0026gt;  \u0026lt;meta-data  android:name=\u0026#34;android.support.PARENT_ACTIVITY\u0026#34;  android:value=\u0026#34;com.example.myfirstapp.MainActivity\u0026#34; /\u0026gt;  \u0026lt;/activity\u0026gt; \u0026lt;/application\u0026gt; Sonrasında notification gösterimi için hazırladığımız kodu aşağıdaki şekilde düzenliyoruz.\n// Intent for the activity to open when user selects the notification Intent detailsIntent = new Intent(this, DetailsActivity.class);  // Use TaskStackBuilder to build the back stack and get the PendingIntent PendingIntent pendingIntent = TaskStackBuilder.create(this)  // add all of DetailsActivity\u0026#39;s parents to the stack,  // followed by DetailsActivity itself  .addNextIntentWithParentStack(detailsIntent)  .getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT);  NotificationCompat.Builder builder = new NotificationCompat.Builder(this); builder.setContentIntent(pendingIntent);  Artık notification ile açılan DetailsActivity sayfasında kullanıcı geri tuşuna bastığında Mainactivity sayfası açılacaktır.\n Ayrıntılı Bilgi için\n  https://developer.android.com/training/implementing-navigation/temporal https://developer.android.com/training/design-navigation/ancestral-temporal  ","permalink":"https://yazilim.aykutasil.com/android-backstack-navigate/","summary":"Android Navigate Örnek Senaryo Kullanıcıya bir ürün ile ilgili notification yolladınız. Kullanıcı bu notification a tıkladığında direk olarak Ürün Detay sayfasına yönlendiriliyor. Kullanıcı sayfada işi bittiğinde geri tuşuna basıyor ve siz bu durumda kullanıcıyı uygulamanın Anasayfasına yönlendirmek istiyorsunuz. Ek bir geliştirme yapmadığınız takdirde bu senaryo için geri tuşuna basıldığında uygulama kapanır. Çünkü geri gidecek ekranı yoktur. Direk olarak Detay sayfası açılmıştır.\n Çözüm İlk olarak yapmamız gereken Manifest.xml dosyasında DetailActivity tanımlamasını yaptığımız yerde parentActivityName i belirtmek.","title":"Android Backstack Navigate"},{"content":"Android Architecture Components Öncelikle şu linkleri verelim:\n https://developer.android.com/topic/libraries/architecture/index.html Lifecycle LiveData ViewModel  LifeCycle Daha önce Android uygulaması geliştirenler çok iyi bilirler ki bir activity veya fragment\u0026rsquo;ın yaşam döngüsünü yönetmek sıkıntılı bir süreçtir. Activity\u0026rsquo;nin arka planda mı yoksa görünür vaziyette mi oluşuna göre düzenlenen akışlar çoğu zaman yoğun dikkat gerektiren süreçlerdir. Yukarıda ki Lifecycle linkine tıklarsanınz çok güzel bir örnek ile durumu açıklamışlar.\nOluşturduğumuz nesneler eğer activity\u0026rsquo;nin yaşam döngüsüne bağlı ise bunu yönetmek için activity\u0026rsquo;mizin genelde onCreate ve onStop metodları içerisinde bu nesnelere ait fonksiyonları çağırıyorduk. Uygulama büyüdükçe onCreate ve onStop fonksiyonları şişiyor ve yönetilmesi karışık bir hal alıyordu. Kod kalabalıklığından ziyade gözden kaçması daha büyük sorunlara sebebiyet veriyordu. Hele bir de mevcut activity de asenkron bir süreç varsa ve asenkron işlem bitene kadar kullanıcı sabredemeyip başka bir activity e gitmiş ise ne olacak? Boom.. Bir çok çatlamanın sebebi de budur sayın seyirciler!\nDi\u0026rsquo;li geçmiş zaman kullandım çünkü artık bu sorunlar ortadan kalkıyor :) . Oluşturduğumuz sınıflara otomatik olarak activity veya fragment ın yaşam döngüsü fonksiyonlarını kontrol eden bir yapı ekleyebiliyoruz.\nBuraya tıkladığınızda açılan örnekte location listener yapısı gösterilmiş. Normalde Activity -\u0026gt; onStart içerisinde konum dinlemeyi başlat, Activity -\u0026gt; onStop içerisinde durdur dememiz lazım. Lakin onStart içerisinde konum servisini başlat diyemeden (asenkron bir fonksiyon çalıştırıldığını farz ediyoruz) kullanıcı ekrandan çıkarsa yukarıda bahsettiğimiz olay olucak ve uygulama patlıcak. Ama bir nesnemiz olsa, bu nesnemiz otomatik olarak activity veya fragment ın yaşam döngüsüne bağlı çalışsa ve biz bu nesneyi istediğimiz fragment veya activity içerisinde kullanabilsek ve tüm bunları yaparken tekrar tekrar aynı yaşam döngüsü kontrollerini yazmasak nasıl olurdu?\nNe işe yaradığını sanıyorum anladık.\n","permalink":"https://yazilim.aykutasil.com/android-architecture-components/","summary":"Android Architecture Components Öncelikle şu linkleri verelim:\n https://developer.android.com/topic/libraries/architecture/index.html Lifecycle LiveData ViewModel  LifeCycle Daha önce Android uygulaması geliştirenler çok iyi bilirler ki bir activity veya fragment\u0026rsquo;ın yaşam döngüsünü yönetmek sıkıntılı bir süreçtir. Activity\u0026rsquo;nin arka planda mı yoksa görünür vaziyette mi oluşuna göre düzenlenen akışlar çoğu zaman yoğun dikkat gerektiren süreçlerdir. Yukarıda ki Lifecycle linkine tıklarsanınz çok güzel bir örnek ile durumu açıklamışlar.\nOluşturduğumuz nesneler eğer activity\u0026rsquo;nin yaşam döngüsüne bağlı ise bunu yönetmek için activity\u0026rsquo;mizin genelde onCreate ve onStop metodları içerisinde bu nesnelere ait fonksiyonları çağırıyorduk.","title":"Android Architecture Components"},{"content":"Google Cloud Platform Cloud DNS Örnek senaryomuz şu şekilde olsun.\nGoogle Cloud ortamında hazır olarak bulunan (Cloud Launcher) sanal makinelerden wordpress yüklü olanı seçtik ve hızlıca makinemizi hazır hale getirdik. Google Cloud bize makineye ait bir ip adresi verdi ve bu ip ile worpress sitemize erişim sağlayabiliyoruz. Elimizde başka bir yerden aldığımız bir domain adresi var ve bu adresi wordpress sitemize yönlendirmek istiyoruz.\nCloud DNS nedir? Google Cloud platformunun dns yapılandırması için vermiş olduğu hizmettir.\n Domain adresimizi nasıl yönlendirebiliriz? Domain adresimiz örnek olarak http://www.aykutasil.com olsun\n  Resimdeki gibi inputları dolduruyoruz.   Oluştur butonuna bastığımızda aşağıda ki gibi bir ekran gelecektir.   Daha sonra bu ekranda bulunan Kayıt Kümesi Ekle butonuna basarak A ve CNAME düzenlemeleri yapıyoruz. A kaydı oluştururken IPv4 Adresi inputuna wordpress kurulu sanal makinemizin IP sini veriyoruz. Bu IP ye Compute Engine sekmesinden ilgili makineye tıklayarak ulaşabiliriz.   Kayıtları eklediğimizde son durum şöyle olması gerekiyor.   Domain aldığımız şirketin yönetim paneline girdiğimizde, DNS ayarları benzeri bir sekme olacaktır. Bu sekmeden nameserver(NS) bilgilerini yukarıdaki resimde bulunan;\n ns-cloud-a1.googledomains.com. ns-cloud-a2.googledomains.com. ns-cloud-a3.googledomains.com. ns-cloud-a4.googledomains.com.    satırları ile güncellememiz gerekmektedir.\nBiraz bekledikten sonra (5-10 dakika) artık http://www.aykutasil.com olarak giriş yaptığınızda ilgili wordpress makinenize erişirim sağlayabilirsiniz.\n","permalink":"https://yazilim.aykutasil.com/google_cloud_dns/","summary":"Google Cloud Platform Cloud DNS Örnek senaryomuz şu şekilde olsun.\nGoogle Cloud ortamında hazır olarak bulunan (Cloud Launcher) sanal makinelerden wordpress yüklü olanı seçtik ve hızlıca makinemizi hazır hale getirdik. Google Cloud bize makineye ait bir ip adresi verdi ve bu ip ile worpress sitemize erişim sağlayabiliyoruz. Elimizde başka bir yerden aldığımız bir domain adresi var ve bu adresi wordpress sitemize yönlendirmek istiyoruz.\nCloud DNS nedir? Google Cloud platformunun dns yapılandırması için vermiş olduğu hizmettir.","title":"Google Cloud DNS"},{"content":"Kotlin @JvmOverloads Kotlin ile uygulama geliştirmeyi teşvik eden en büyük etkenlerden biri şüphesiz Java dili uyumlu yapısıdır. Her iki tarafdan da birbirlerine referanslar verilebilir.\nKotlin dilinin Java\u0026rsquo;dan ayıran özelliklerinden biri Java compiler ından daha zeki olmasıdır. Nitekim java dili yaşlanıyor :). Kotlin ile oluşturulan bazı yapıların Java tarafına uyumlu hale getirilmesi için bazen ufak düzenlemelere gerek duyulabiliyor. Bu düzenlemelerden bir tanesi de @JvmOverloads annotation kullanımı.\nfun ViewGroup.inflate(resId: Int, attachToRoot: Boolean = false): View {  return LayoutInflater.from(context).inflate(resId, this, attachToRoot) } Yukarıda ki gibi kotlin extension yapısı kullanılarak ViewGroup nesnesine ek bir özellik kazandırdık.\nArtık LinearLayout nesnemizden direk olarak inflate fonksiyonunu çağırabiliriz.\nVe Kotlin ile geliştilen başka bir sınıftan da bu inflate fonksiyonu çağırabilir. Ayrıca default parametre ataması sayesinde sadece ViewGroupObjesi.inflate(resId) ile fonksiyon kullanılabilir. Yani attachToRoot parametresi girmediğimiz için defaut olarak false olacaktır.\nPeki başka bir Java sınıfından inflate fonksiyonu çağırımı nasıl olacak ? View v = UtilsKt.inflate(parent, R.layout.view_item, false); Yukarı daki gibi inflate fonksiyonu kullanılablir. Fakat;\nView v = UtilsKt.inflate(parent, R.layout.view_item) bu şekilde bir kullanım sonucundan Java abimiz kızacak ve hata verecektir. Default paramtere ataması Java tarafından tanınmaz.\n@JvmOverloads @JvmOverloads fun ViewGroup.inflate(resId: Int, attachToRoot: Boolean = false): View {  return LayoutInflater.from(context).inflate(resId, this, attachToRoot) } Mevcut extension fonksiyonumuz başına @JvmOverloads ekleyerek default parametre atamamızın Java tarafından tanınmasını sağlayabilir.\nVe artık Java sınıfı içerisinde,\nView v = UtilsKt.inflate(parent, R.layout.view_item); şeklinde kullanım sağlayabiliriz.\n Java içerisinden UtilsKt sınıfını başka bir isimlendirme ile çağırmak için UtilsKt sınıfı içerisinde package tanımlamasından önce @file:JvmName(\u0026quot;AndroidUtils\u0026quot; şeklinde bir ekleme yapabiliriz.\nAndroidUtils.logD(\u0026#34;Debug\u0026#34;); AndroidUtils.logE(\u0026#34;Error\u0026#34;); View v = AndroidUtils.inflate(parent, R.layout.view_item, false); Yukarıda ki gibi UtilsKt sınıfına erişim sağlayabiliriz.\n","permalink":"https://yazilim.aykutasil.com/kotlin-jvmoverloads/","summary":"Kotlin @JvmOverloads Kotlin ile uygulama geliştirmeyi teşvik eden en büyük etkenlerden biri şüphesiz Java dili uyumlu yapısıdır. Her iki tarafdan da birbirlerine referanslar verilebilir.\nKotlin dilinin Java\u0026rsquo;dan ayıran özelliklerinden biri Java compiler ından daha zeki olmasıdır. Nitekim java dili yaşlanıyor :). Kotlin ile oluşturulan bazı yapıların Java tarafına uyumlu hale getirilmesi için bazen ufak düzenlemelere gerek duyulabiliyor. Bu düzenlemelerden bir tanesi de @JvmOverloads annotation kullanımı.\nfun ViewGroup.inflate(resId: Int, attachToRoot: Boolean = false): View {  return LayoutInflater.","title":"Kotlin @JvmOverloads"},{"content":"Kotlin Sealed Class Enum yapısına benzer bir yapıya sahiptir. Ve benzer görevler için kullanılır. Aradaki fark enum lar sabit değer ifade etmek için kullanılırken sealed yapısı normal sınıf gibi fakat enum mantığıyla kullanılır. Yani belli bir duruma ait fonksiyonları bir arada tutmak ve when() gibi fonksiyonlar ile birlikte kullanımını sağlamak için kullanılır.\n // Sealed class enum yapısına benzer  // Bir durum için belli başlı akışları bir arada tutmamızı sağlar ve bu akışların yönetimini kolaylaştırır.  // abstract fonksiyon tanımlanamabilir  sealed class Intention {  object None : Intention() {  override fun go() {   }   fun xyc() {   }  }   object Refresh : Intention() {  override fun go() {   }  }   data class Error(val reason: String) : Intention() {  override fun go() {   }  }   data class LoadContent(val content: List\u0026lt;String\u0026gt;) : Intention() {  override fun go() {   }  }   abstract fun go()  }  override fun onCreate(savedInstanceState: Bundle?) {  super.onCreate(savedInstanceState)  setContentView(R.layout.activity_kotlin_sealed_class)   val intentation: Intention = Intention.LoadContent(emptyList())   when (intentation) {  Intention.None -\u0026gt; {  Intention.None.apply {  this.xyc()  this.go()  }  println(\u0026#34;none\u0026#34;)  }  Intention.Refresh -\u0026gt; {  println(\u0026#34;refresh\u0026#34;)  }  }  } şeklinde kullanılabilir.\n","permalink":"https://yazilim.aykutasil.com/kotlin-sealed-class/","summary":"Kotlin Sealed Class Enum yapısına benzer bir yapıya sahiptir. Ve benzer görevler için kullanılır. Aradaki fark enum lar sabit değer ifade etmek için kullanılırken sealed yapısı normal sınıf gibi fakat enum mantığıyla kullanılır. Yani belli bir duruma ait fonksiyonları bir arada tutmak ve when() gibi fonksiyonlar ile birlikte kullanımını sağlamak için kullanılır.\n // Sealed class enum yapısına benzer  // Bir durum için belli başlı akışları bir arada tutmamızı sağlar ve bu akışların yönetimini kolaylaştırır.","title":"Kotlin Sealed Class"},{"content":"Kotlin Lambda Kullanımı Kotlin dili ile geliştirme yaparken fonksiyonel programlama nimetlerinden faydalanmamızı sağlayan lambda birçok konuda bize yardımcı olacaktır. Doğru kullanımını öğrendiğimiz ölçüde nimetlerinin farkına varabiliriz.\nBelli başlı lambda kullanımları için aşağıdaki örneği inceleyebilirsiniz.\n override fun onCreate(savedInstanceState: Bundle?) {  super.onCreate(savedInstanceState)  setContentView(R.layout.activity_kotlin_lambda)   // Normal Kullanım  ButtonPress.setOnClickListener(object : View.OnClickListener {  override fun onClick(view: View?) {  toast(\u0026#34;Press Me Click\u0026#34;)  }   })   // Yukarıda ki yapıyı lambda kullanarak bu şekle çevirebiliriz  ButtonPress.setOnClickListener({ v -\u0026gt; toast(\u0026#34;Press Me\u0026#34;) })   // Eğer son parametre lambda fonksiyonu ise bu fonksiyonu parantez \u0026#39;()\u0026#39; dışına çıkarabiliriz.  // Birden fazla parametre var ise sadece en son lambda parametresi parantez dışına çıkarılabilir.  ButtonPress.setOnClickListener() {  v -\u0026gt;  toast(\u0026#34;Press Me\u0026#34;)  }   // Fonksiyon tek bir parametre alıyorsa ve bu lambda parametresi ise parantezler silinebilir  ButtonPress.setOnClickListener {  v -\u0026gt;  toast(\u0026#34;Press Me\u0026#34;)  }   // Lambda fonksiyonunun tek bir parametresi var ise (v) ve kullanılmayacaksa \u0026#39;v -\u0026gt;\u0026#39; silinebilir  ButtonPress.setOnClickListener {  toast(\u0026#34;Press Me\u0026#34;)  }   // Lambda fonksiyonunun tek bir parametresi var ise ve eğer bu parametreye ihtiyaç duyulur ise  // v-\u0026gt; yerine \u0026#39;it\u0026#39; özel kelimesi kullanılabilir.  ButtonPress.setOnClickListener {  toast(it.javaClass.name)  }   } ","permalink":"https://yazilim.aykutasil.com/kotlin-lambda/","summary":"Kotlin Lambda Kullanımı Kotlin dili ile geliştirme yaparken fonksiyonel programlama nimetlerinden faydalanmamızı sağlayan lambda birçok konuda bize yardımcı olacaktır. Doğru kullanımını öğrendiğimiz ölçüde nimetlerinin farkına varabiliriz.\nBelli başlı lambda kullanımları için aşağıdaki örneği inceleyebilirsiniz.\n override fun onCreate(savedInstanceState: Bundle?) {  super.onCreate(savedInstanceState)  setContentView(R.layout.activity_kotlin_lambda)   // Normal Kullanım  ButtonPress.setOnClickListener(object : View.OnClickListener {  override fun onClick(view: View?) {  toast(\u0026#34;Press Me Click\u0026#34;)  }   })   // Yukarıda ki yapıyı lambda kullanarak bu şekle çevirebiliriz  ButtonPress.","title":"Kotlin Lambda"},{"content":"fun \u0026lt;T\u0026gt; T.apply(f: T.() -\u0026gt; Unit): T { f(); return this } apply() tüm tipler için belirlenmiş bir extension function dır. apply() fonksiyonu uygulanan nesnenin özelliklerine direk olarak apply kod bloğu içerisinden erişilebilir.\nvar file = File(dir) file.mkdirs() veya Java ile yazacak olursak\nFile makeDir(String path) {  File result = new File(path);  result.mkdirs();  return result; } Bu kodu aşağıdaki yapıya çevirebiliriz.\nFile(dir).apply { mkdirs() } ","permalink":"https://yazilim.aykutasil.com/kotlin-apply/","summary":"fun \u0026lt;T\u0026gt; T.apply(f: T.() -\u0026gt; Unit): T { f(); return this } apply() tüm tipler için belirlenmiş bir extension function dır. apply() fonksiyonu uygulanan nesnenin özelliklerine direk olarak apply kod bloğu içerisinden erişilebilir.\nvar file = File(dir) file.mkdirs() veya Java ile yazacak olursak\nFile makeDir(String path) {  File result = new File(path);  result.mkdirs();  return result; } Bu kodu aşağıdaki yapıya çevirebiliriz.\nFile(dir).apply { mkdirs() } ","title":"Kotlin apply Kullanımı"},{"content":"Kotlin\u0026rsquo;de when operatörü işimizi oldukça kolaylaştıran operatörlerden biridir.\nif- else if yapısı yerine kullanılabileceği gibi bazı yardımcı operatörler ile birçok marifet kazanabilir.\n val i = 10  when {  i \u0026lt; 7 -\u0026gt; println(\u0026#34;first block\u0026#34;)  fooString.startsWith(\u0026#34;hello\u0026#34;) -\u0026gt; println(\u0026#34;second block\u0026#34;)  else -\u0026gt; println(\u0026#34;else block\u0026#34;)  } Yukarıda ki örnek if-else if-else yapısının aynısıdır.\n  when (i) {  0, 21 -\u0026gt; println(\u0026#34;0 or 21\u0026#34;)  in 1..20 -\u0026gt; println(\u0026#34;in the range 1 to 20\u0026#34;)  else -\u0026gt; println(\u0026#34;none of the above\u0026#34;)  } Yukarıda ki gibi aralıklar tanımlanabilir ve bu aralıklara uyum kontrolü yapılarak ilgili işlemlerin yapılması sağlanılabilir.\n  var result = when (i) {  0, 21 -\u0026gt; \u0026#34;0 or 21\u0026#34;  in 1..20 -\u0026gt; \u0026#34;in the range 1 to 20\u0026#34;  else -\u0026gt; \u0026#34;none of the above\u0026#34;  }  println(result) Yukarıda ki gibi when sonucu bir değişkene atanarak istenilen yerde kullanılabilir.\n","permalink":"https://yazilim.aykutasil.com/kotlin-when/","summary":"Kotlin\u0026rsquo;de when operatörü işimizi oldukça kolaylaştıran operatörlerden biridir.\nif- else if yapısı yerine kullanılabileceği gibi bazı yardımcı operatörler ile birçok marifet kazanabilir.\n val i = 10  when {  i \u0026lt; 7 -\u0026gt; println(\u0026#34;first block\u0026#34;)  fooString.startsWith(\u0026#34;hello\u0026#34;) -\u0026gt; println(\u0026#34;second block\u0026#34;)  else -\u0026gt; println(\u0026#34;else block\u0026#34;)  } Yukarıda ki örnek if-else if-else yapısının aynısıdır.\n  when (i) {  0, 21 -\u0026gt; println(\u0026#34;0 or 21\u0026#34;)  in 1.","title":"Kotlin when kullanımı"},{"content":"Kotlin fun \u0026lt;T, R\u0026gt; T.let(f: (T) -\u0026gt; R): R = f(this) let() temel olarak, belirli bir kapsam için bir değişken/kod bloğu oluşturmamızı sağlayan bir kapsamlayıcı işlevdir. Yani let() bir sarmalıyıcı fonksiyondur.\nÖrneğin:\nprivate var mPhotoUrl: String? = null  fun uploadClicked() {  if (mPhotoUrl != null) {  uploadPhoto(mPhotoUrl!!)  } } Yukarıda ki if (mPhotoUrl != null) satırı ile null kontrolü yapılır ve eğer null değilse uploadPhoto(mPhotoUrl!!) kod bloğu çalıştırılır. Bu kodu let() ile çok daha kolay ve anlaşılır hale getirebiliriz.\n private var mPhotoUrl: String? = null   fun uploadClicked() {  mPhotoUrl?.let { uploadPhoto(it) }  }  Not: let() ile sarmalanan bir kod bloğu içerisinde sarmalayıcıya it ile ulaşılabilir.\nFile(\u0026#34;a.txt\u0026#34;).let {  // it kullanılarak file nesnesine erişilebilir. } ","permalink":"https://yazilim.aykutasil.com/kotlin-let/","summary":"Kotlin fun \u0026lt;T, R\u0026gt; T.let(f: (T) -\u0026gt; R): R = f(this) let() temel olarak, belirli bir kapsam için bir değişken/kod bloğu oluşturmamızı sağlayan bir kapsamlayıcı işlevdir. Yani let() bir sarmalıyıcı fonksiyondur.\nÖrneğin:\nprivate var mPhotoUrl: String? = null  fun uploadClicked() {  if (mPhotoUrl != null) {  uploadPhoto(mPhotoUrl!!)  } } Yukarıda ki if (mPhotoUrl != null) satırı ile null kontrolü yapılır ve eğer null değilse uploadPhoto(mPhotoUrl!!) kod bloğu çalıştırılır.","title":"Kotlin Let Kullanımı"},{"content":"Retrofit Oauth Entegrasyonu Oauth, kısaca anlatmak gerekirse; Kullanıcı ile ilgili her türlü (izin,yetki,güvenlik vs.) etkileşimi standartlaştıran bir yapı diyebiliriz. Google amcaya sorarsanız neler yapabileceğiniz ile ilgili birçok kaynak bulabilirsiniz. Veya buraya bakabilirsiniz.\nBurada bahsedecek olduğumuz şey Android mobil uygulamanızdan bir istek yaptığınızda tüm bu oauth işlemlerinizi otomatize etmek üzerine olacak.\nNasıl Çalışıyor? Kısaca anlatılan bu yazıyı okuduğunuzda günün sonunda elimizde bir token olduğunu ve bu tokenı request headerımıza ekleyerek backend kısmında kontrolünü sağladığımızı ve duruma göre cevap döndüğümüzü göreceksiniz. Bu tokenın işlevsellik ömürleri vardır. Yani 10 dakika süre ile bu tokenı yetkilendir deriz. Çünkü sonuçta asıl amacımız güvenlik. Kullanıcı ad ve şifre bilgisi birilerinin eline geçmesi ile token bilgisinin birilerinin eline geçmesi aynı anlama gelir. Tabi eğer tokena bir ömür biçmezsek.\nPeki elimizde ki token ın bir ömrünün olması uygulamamıza nasıl bir akış olmasını gerektiriyor ?\n  Zorunlu olmamakla beraber bazen elimizde token ile beraber birde refresh token bilgisi olur. Eğer token süresi dolmuşsa refresh token kullanılarak yeni taze bir token isteği yapılır ve yeni isteklerde bu yeni token kullanılır.\n  Refresh token yok ise ilk başta tokenımızı nasıl elde ediyor isek(tüm header bilgileri tekrar girilecek; cliend_id,secret_id vs.) o şekilde süreci baştan başlatmamız gerekecek ve elde ettiğimiz tokenı yeni isteklerimizde kullanmamız gerekecek.\n  Biz ikinci kısım için Retrofit yapılandırmasını anlatıcaz.\nRestClient\npublic class RestClient {   private static RestClient _instance;  private OkHttpClient client;  private ApiService apiService;   @DebugLog  private RestClient(Context context) {   HttpLoggingInterceptor httpLoggingInterceptor = new HttpLoggingInterceptor();  httpLoggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);   OkHttpClient.Builder clientBuilder = new OkHttpClient.Builder();   clientBuilder.addInterceptor(chain -\u0026gt; {  Request original = chain.request();   Request request = original.newBuilder()  .addHeader(\u0026#34;Content-Type\u0026#34;, \u0026#34;application/json\u0026#34;)  .addHeader(\u0026#34;X-App-Name\u0026#34;, \u0026#34;Dokar\u0026#34;) // Optional  .addHeader(\u0026#34;X-api-version\u0026#34;, \u0026#34;1.0\u0026#34;) // Optional  .method(original.method(), original.body())  .build();   return chain.proceed(request);  });   clientBuilder.addInterceptor(chain -\u0026gt; {  Request original = chain.request();   Request.Builder builder = original.newBuilder();   String tokenType = \u0026#34;Bearer\u0026#34;;  String authToken = AppDataHelper.getInstance(context).getAccessToken(); // Veritabanından ya da SharedPreference vs. den tokenımızı çekiyoruz   // Eğer token bilgisi var ise request imizin header ına \u0026#34;Authorization: Bearer tokenanahtari\u0026#34; şeklinde ekleme yapıyoruz.  if (authToken != null) {  builder.header(\u0026#34;Authorization\u0026#34;, tokenType + \u0026#34; \u0026#34; + authToken);  }   Request request = builder  .method(original.method(), original.body())  .build();   return chain.proceed(request);  });   // Yapılan istekleri loglamak için interceptor  clientBuilder.addInterceptor(httpLoggingInterceptor);   // *****************************  // ÖNEMLİ  // Otomatize ettiğimiz kısım burası  clientBuilder.authenticator(new TokenAuthenticator(context));   clientBuilder.connectTimeout(60, TimeUnit.SECONDS)  .readTimeout(60, TimeUnit.SECONDS)  .writeTimeout(60, TimeUnit.SECONDS);   Gson gson = new GsonBuilder()  .setDateFormat(\u0026#34;yyyy-MM-dd\u0026#39;T\u0026#39;HH:mm:ss\u0026#34;)  .excludeFieldsWithoutExposeAnnotation() // Android 23 için düzenleme  .create();   client = clientBuilder.build();   Retrofit retrofit = new Retrofit.Builder()  .addConverterFactory(GsonConverterFactory.create(gson))  .addCallAdapterFactory(RxJava2CallAdapterFactory.create())  .baseUrl(BuildConfig.BACKEND_URL)  .client(client)  .build();   apiService = retrofit.create(ApiService.class);  }   @DebugLog  public static RestClient getInstance(Context context) {  if (_instance == null) {  _instance = new RestClient(context);  }  return _instance;  }   @DebugLog  public ApiService getApiService() {  return apiService;  }   @DebugLog  public OkHttpClient getOkHttpClient() {  return client;  } } Yukarıda ÖNEMLİ yazan alanda clientBuilder.authenticator(new TokenAuthenticator(context)) şeklinde bir authenticator işlevi ekledik.\nBu sınıfın şunu yapıyor:\n Belirttiğimiz header ve body bilgileri doğrultusunda istek yaptık ve sonuç olarak 401 response code döndü. Yani kimlik doğrulanamadı. Eğer 401 döner ise TokenAuthenticator(context sınıfı devreye girecek ve bizim requestimizin istediğimiz alanlarını düzenleyerek yine aynı isteği otomatik olarak yapıcak.  TokenAuthenticator\npublic class TokenAuthenticator implements Authenticator {   private Context mContext;   public TokenAuthenticator(Context context) {  this.mContext = context;  }   @DebugLog  @Override  public Request authenticate(Route route, Response response)  throws IOException {   // İlk başta tokenımızı nasıl elde ettiysek yine aynı şekilde ama senkron şekilde elde ediyoruz.  AccessTokenResponse accessTokenResponse = RestClient.getInstance(mContext)  .getApiService()  .getAccessTokenImmediate(AccessTokenRequest.buildParams())  .execute()  .body();   String accessToken = accessTokenResponse.getAccessToken();   // Veritabanımızda ki token bilgisi güncelliyoruz  AppDataHelper.getInstance(mContext).saveAccessToken(accessToken);   String tokenType = \u0026#34;Bearer\u0026#34;;   Request original = response.request();  Request.Builder newRequestBuilder = original.newBuilder();   // Eski isteğimizde ki Authorization header alanını siliyoruz. Eğer silmezsek birden fazla aynı keye sahip header alanımız olur.  if (original.headers().get(\u0026#34;Authorization\u0026#34;) != null) {  Logger.i(\u0026#34;Authorization Header is: \u0026#34; + original.headers().get(\u0026#34;Authorization\u0026#34;));  newRequestBuilder.removeHeader(\u0026#34;Authorization\u0026#34;);  }   // Ve yeni token değeri ile tekrar Authorization headerı ekliyoruz.  Request newRequest = newRequestBuilder  .addHeader(\u0026#34;Authorization\u0026#34;, tokenType + \u0026#34; \u0026#34; + accessToken)  .method(original.method(), original.body())  .build();   return newRequest;  } }  401 response kod döndü Yukarıda ki kod çalıştı Yeni token elde edildi Yapılan request header bilgileri güncellendi İsteğimiz aynı parametreler ile(body alanı vs.) tekrar yapıldı  Ve gülen surat.. :)\nSorunuz varsa sorabilirsiniz.\n","permalink":"https://yazilim.aykutasil.com/retrofit_oauth/","summary":"Retrofit Oauth Entegrasyonu Oauth, kısaca anlatmak gerekirse; Kullanıcı ile ilgili her türlü (izin,yetki,güvenlik vs.) etkileşimi standartlaştıran bir yapı diyebiliriz. Google amcaya sorarsanız neler yapabileceğiniz ile ilgili birçok kaynak bulabilirsiniz. Veya buraya bakabilirsiniz.\nBurada bahsedecek olduğumuz şey Android mobil uygulamanızdan bir istek yaptığınızda tüm bu oauth işlemlerinizi otomatize etmek üzerine olacak.\nNasıl Çalışıyor? Kısaca anlatılan bu yazıyı okuduğunuzda günün sonunda elimizde bir token olduğunu ve bu tokenı request headerımıza ekleyerek backend kısmında kontrolünü sağladığımızı ve duruma göre cevap döndüğümüzü göreceksiniz.","title":"Retrofit Oauth"},{"content":"HC-06 Bluetooth  Aşağıdaki kodu Arduino kartınıza yükleyiniz Bluetooth Terminal uygulamasını telefonunuza indirin HC-06 modulünün TX-RX çıkışlarını Arduino kartınızın RX-TX girişlerine entegre edin. (Ters sıralamaya dikkat) Cihazınızdan normal bluetooh bağlantısı kurar gibi HC-06 modülü ile bağlantı kurun ve şifre olarak 1234 girin. Aşağıdaki kodda görebileceğiniz gibi 0,1,2,3,4 için farklı işlemler yapılmasını sağladık. Siz de ihtiyacınıza göre ayarlayın. Ben led parlaklığını düzenledim ya da motor hızı olarak da düşünebiliriz.  const int LED_PIN = 9;  char veri;   void setup() {  Serial.begin(9600);  pinMode(LED_PIN, OUTPUT);  Serial.println(\u0026#34;HC-06 Kontrol Projesi\u0026#34;); }  void loop() {  if (Serial.available() \u0026gt; 0) {   veri = Serial.read();   if (veri == \u0026#39;0\u0026#39;) {  digitalWrite(LED_PIN, LOW);  Serial.println(\u0026#34;LED Sonduruldu.\u0026#34; );  }   if (veri == \u0026#39;1\u0026#39;) {  digitalWrite(LED_PIN, HIGH);  Serial.println(\u0026#34;LED Yakildi.\u0026#34;);  }   if (veri == \u0026#39;2\u0026#39;) {  analogWrite(LED_PIN, 200);  Serial.println(\u0026#34;LED Yakildi.\u0026#34;);  }   if (veri == \u0026#39;3\u0026#39;) {  //digitalWrite(LED_PIN, HIGH);  analogWrite(LED_PIN, 255);  Serial.println(\u0026#34;LED Yakildi.\u0026#34;);  }   if (veri == \u0026#39;4\u0026#39;) {  //digitalWrite(LED_PIN, HIGH);  analogWrite(LED_PIN, 50);   Serial.println(\u0026#34;LED Yakildi.\u0026#34;);  }    }  delay(100); } ","permalink":"https://yazilim.aykutasil.com/arduino_hc06_kullanimi/","summary":"HC-06 Bluetooth  Aşağıdaki kodu Arduino kartınıza yükleyiniz Bluetooth Terminal uygulamasını telefonunuza indirin HC-06 modulünün TX-RX çıkışlarını Arduino kartınızın RX-TX girişlerine entegre edin. (Ters sıralamaya dikkat) Cihazınızdan normal bluetooh bağlantısı kurar gibi HC-06 modülü ile bağlantı kurun ve şifre olarak 1234 girin. Aşağıdaki kodda görebileceğiniz gibi 0,1,2,3,4 için farklı işlemler yapılmasını sağladık. Siz de ihtiyacınıza göre ayarlayın. Ben led parlaklığını düzenledim ya da motor hızı olarak da düşünebiliriz.  const int LED_PIN = 9;  char veri;   void setup() {  Serial.","title":"Arduino HC-06 Bluetooth Kullanımı"},{"content":"Yeoman Kullanımı Yeoman ile kendi proje yapımızı kurgulayabilir ve opsiyonlar belirleyerek ona göre dosya içeriğimizi vs. düzenleyebiliriz. Ya da oluşturduğumuz projeye önceden belirlediğimiz bir dosyayı ekleyebilir ve gerekli ayarlamaları otomatik olarak yapmasını sağlayabiliriz. (yeni bir Controller eklemek gibi vs.)\nVe hazırladığımız bu proje yapısını paket yönetim sistemlerine yollayarak diğer kişilerin kullanımına açabilir veyahut kendimizin de istediğimiz yerden erişebilmesini sağlayabiliriz.\nÖncelikle bilgisayarınız da nodejs yüklü olduğunu varsayıyoruz. Eğer yüklü değilse buradan gerekli işlemleri yaparak kurabiliriz.\nDaha sonra npm install -g yo komutunu çalıştırarak yokomutunun heryerden çalışmasını sağlıyoruz.\n Generators, diğer kişilerin oluşturmuş olduğu yapıları görmek için kullanabiliriz.  Evet kendi proje yapımızı hazırlamaya başlayabiliriz\nÖncelikle yine Yeoman ın kendisini kullanarak yeni yapımızı kurmak için gerekli dosyaların yapılanmasını sağlıyoruz. Bunun için npm install -g generator-generator komutunu çalıştırıyoruz. Ve yo generatorkomutu ile gerekli dosya yapısının oluşturulmasını sağlıyoruz.\nyo generator komutunu çalıştırdığımız da bize proje ismi (name) gibi sorular gelecek ve bizde uygun değerleri girerek dosyaların ona göre düzenlemesini sağlıcaz. Ama name değerini girerken generators ile başladığına emin olmalıyız.\nAyrıntılı bilgi burada.\nVe oluşturulan dosya yapısı şu şekilde olmalı;\napp/templates klasörü altındaki tüm dosyalar bizim asıl oluşturmak istediğimiz dosya yapısı. Yani tüm bu işlemler sonrasında yo xyzçalıştırdığımız da templates klasöründe ki dosyalar oluşturulacaktır. Tabi ki bizim belirlediğimiz değerler ile bu dosyaların içeriği vs. oluşturulacak. Yoksa bi anlamı kalmaz dimi ;)\nYukarıda ki resimde a,b,dummytext .txt ve testFolder klasörünü görüyorsunuz.\na.txt Merhaba A  Proje ismi : \u0026lt;%= name %\u0026gt; b.txt Dosya B  Değişken değer: \u0026lt;%= degiskenB %\u0026gt; dummy.txt Dummy dosya içeriklerinin bu şekilde olduğunu varsayalım.\napp/index.js dosyasını açıyoruz ve gerekli düzenlemeleri yapıyoruz.\n\u0026#39;use strict\u0026#39;; var Generator = require(\u0026#39;yeoman-generator\u0026#39;); var chalk = require(\u0026#39;chalk\u0026#39;); // yazı renklendirme için kullanılır var yosay = require(\u0026#39;yosay\u0026#39;); // yeoman çalıştırılırken ilk başta gözüken proje bilgilendirme kısmını hazırlamaka için kullanılır  module.exports = Generator.extend({  prompting: function () {  var done = this.async();   this.log(yosay(  \u0026#39;Aykut Asil proje oluşturma yapısına Hoş Geldiniz... \u0026#39; +  chalk.red(\u0026#39;generator-sample-yeoman\u0026#39;) +  \u0026#39; generator!\u0026#39;  ));   var prompts = [{  type: \u0026#39;confirm\u0026#39;,  name: \u0026#39;someAnswer\u0026#39;,  message: \u0026#39;www.aykutasil.com u ziyaret ettin mi ?\u0026#39;,  default: true  }, {  type: \u0026#39;input\u0026#39;,  name: \u0026#39;name\u0026#39;,  message: \u0026#39;Proje adı\u0026#39;,  default: this.appname  }, {  type: \u0026#39;input\u0026#39;,  name: \u0026#39;degiskenB\u0026#39;,  message: \u0026#39;B name\u0026#39;,  default: this.appname  }];   return this.prompt(prompts).then(function (props) {  this.props = props;  this.log(props.someAnswer);  this.log(props.name);   done();  }.bind(this));  },   writing: {  config: function () {  this.fs.copyTpl( // Eğer hazırlanan dosya içerisinde değişken kullanılmış ise copyTpl ile kopyalama yapılır  this.templatePath(\u0026#39;a.txt\u0026#39;),  this.destinationPath(\u0026#39;a.txt\u0026#39;), {  name: this.props.name  }  );   this.fs.copyTpl(  this.templatePath(\u0026#39;b.txt\u0026#39;),  this.destinationPath(\u0026#39;b.txt\u0026#39;), {  degiskenB: this.props.degiskenB  }  );   this.fs.copy( // Hazırlanacak dosya aynen kopyalama yapılacak ise yani dosya içerisinde değişken ile doldurulacak bir bölüm yok ise  // copy ile kopyalama yapılır  this.templatePath(\u0026#39;dummyfile.txt\u0026#39;),  this.destinationPath(\u0026#39;dummyfile.txt\u0026#39;)  );   this.fs.copy(  this.templatePath(\u0026#39;testFolder/_test.txt\u0026#39;),  this.destinationPath(\u0026#39;testFolderDeneme/test.txt\u0026#39;)  );  }  },   install: function () {  // this.installDependencies(); // tüm dosyala kopyalandıktan sonra npm init çalıştırılması için kullanılır. Eğer çalıştırılmazsa node_modules klasörü oluşturulmamış olur.  } }); Yukarıda kodların yanında ayrıntılı açıklama var.\nİşlemlerimizi tamamladıktan sonra local imizde test etmek ya da kullanabilmek için npm link komutunu çalıştırıyoruz.(ana klasör içerisinde iken çalıştırıyoruz)\nVe herhangi bir yerde yeni bir klasör oluşturalım. Klasör içerisindeyken yo sample_generator komutunu çalıştıralım.\nVe sonuç:\nEk Kaynaklar\n https://scotch.io/tutorials/create-a-custom-yeoman-generator-in-4-easy-steps https://code.tutsplus.com/tutorials/build-your-own-yeoman-generator--cms-20040  ","permalink":"https://yazilim.aykutasil.com/yeoman-kullanimi/","summary":"Yeoman Kullanımı Yeoman ile kendi proje yapımızı kurgulayabilir ve opsiyonlar belirleyerek ona göre dosya içeriğimizi vs. düzenleyebiliriz. Ya da oluşturduğumuz projeye önceden belirlediğimiz bir dosyayı ekleyebilir ve gerekli ayarlamaları otomatik olarak yapmasını sağlayabiliriz. (yeni bir Controller eklemek gibi vs.)\nVe hazırladığımız bu proje yapısını paket yönetim sistemlerine yollayarak diğer kişilerin kullanımına açabilir veyahut kendimizin de istediğimiz yerden erişebilmesini sağlayabiliriz.\nÖncelikle bilgisayarınız da nodejs yüklü olduğunu varsayıyoruz. Eğer yüklü değilse buradan gerekli işlemleri yaparak kurabiliriz.","title":"Yeoman Kullanımı"},{"content":"C# ? ve ?? Operator Kullanımı Kısaca bahsedilecek olursa ? operatörü null kontrolü yapılmasını sağlar.\nYazılım geliştirme sırasında en çok rastlanan hatanın sebebi null dönen ifadelerdir. Bu bazen bir değişken bazen parametre vs. olabilir. Ama sebep ifadenin null olmasıdır.\nÖnceden şu şekilde kontrol ediyorduk.\nvar a; if(a != null) {  Console.Write(a); } şimdi\nvar a; Console.Write(a ?? \u0026#34;boş değer\u0026#34;); Yukarıdaki söz dizimi ile şunu söylüyoruz.\n Eğer a değeri null değil ise ekrana a nın değerini yaz. Eğer a değeri null ise ?? operatörünün sağındaki değeri yani burada boş değer ifedesini yaz.   int? length = customers?.Length; // null if customers is null  Customer first = customers?[0]; // null if customers is null  int? count = customers?[0]?.Orders?.Count(); // null if customers, the first customer, or Orders is null  Yukarıdaki örneği incelersek aslında kod kalitemizin ve okunabilirliğin ne kadar arttığını görebiliriz.\nCustomers customers = DbHelper.GetCustomers(); Yukarıdaki kodu çalıştırdığımızda DbHelper.GetCustomers() fonksiyonunda null döndüğünü düşünelim. Biz null kontrolü yapmadan customers.size()gibi bir fonksiyonu çağıracak olsak uygulamamız patlıcaktır. Çünkü null bir ifadenin size ı olamaz.\nint? size = customers?.size; yukarıda ki gibi kodumuzu geliştirirsek uygulamamızın patlamasını önlemiş oluruz.\n","permalink":"https://yazilim.aykutasil.com/csharp-soru-isareti-syntax/","summary":"C# ? ve ?? Operator Kullanımı Kısaca bahsedilecek olursa ? operatörü null kontrolü yapılmasını sağlar.\nYazılım geliştirme sırasında en çok rastlanan hatanın sebebi null dönen ifadelerdir. Bu bazen bir değişken bazen parametre vs. olabilir. Ama sebep ifadenin null olmasıdır.\nÖnceden şu şekilde kontrol ediyorduk.\nvar a; if(a != null) {  Console.Write(a); } şimdi\nvar a; Console.Write(a ?? \u0026#34;boş değer\u0026#34;); Yukarıdaki söz dizimi ile şunu söylüyoruz.\n Eğer a değeri null değil ise ekrana a nın değerini yaz.","title":"CSharp Null Kontrolü"},{"content":" Kısa Hikaye : Üstünde çalışmakta olduğum bir projede kredi kartı ile ödeme yapısı kurmam gerekti. Kısaca projenin yapısından bahsedecek olursak\n  Backend : .Net Client : Android (Java) Ödeme altyapısı : İyzico  Client tarafında rest isteğiyle tüm işlemlerimizi backend tarafında yapıyoruz. Ödeme yapımızı da bu doğrultuda geliştirdik.\nProblem : 3DS ile ödeme almaya çalıştığımızda malumunuz işin içerisine bankanın bize telefonumuza gelen şifreyi girmemiz için göndermiş olduğu web sayfası vs. giriyor. Bu durumda client ile web sayfası iletişimini de bir şekilde sağlamamız gerekiyor.\n Yukarıda ki hikayeyi anlatarak kafanızda bir problemi canlandırmaya çalıştım. Benzer bir çok durum ile karşı karşıya kalabilirsiniz.\nUlan ben webview de ki butonu vs nasıl android tarafında kontrol edicem ? gibi akılda deli sorular oluşabilir..\nTabiri caiz ise : PhoneGap tarzı bişiler.. 🙂 😉\nNeyse.\nÖrnek ver hacı abi;\nLayout.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;LinearLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;  android:layout_width=\u0026#34;match_parent\u0026#34;  android:layout_height=\u0026#34;match_parent\u0026#34;  android:orientation=\u0026#34;vertical\u0026#34;\u0026gt;   \u0026lt;WebView  android:id=\u0026#34;@+id/WebView\u0026#34;  android:layout_width=\u0026#34;match_parent\u0026#34;  android:layout_height=\u0026#34;match_parent\u0026#34; /\u0026gt;  \u0026lt;/LinearLayout\u0026gt; Activity – Fragment WebView webView = (WebView) findViewById(R.id.WebView);  WebSettings settings = webView.getSettings(); settings.setDefaultTextEncodingName(\u0026#34;utf-8\u0026#34;); settings.setJavaScriptEnabled(true);  webView.setWebViewClient(new MyWebViewClient()); webView.addJavascriptInterface(new MyWebViewJavascriptInterface(mContext, webView, callbackDialog), \u0026#34;Android\u0026#34;); // Buraya dikkat webView.loadDataWithBaseURL(null, response.getData().getThreeDSHtmlContent(), \u0026#34;text/html\u0026#34;, \u0026#34;utf-8\u0026#34;, null); // elimizde bulunan bir html dökümanı webview e basıyoruz. URL de verebilirsin istersen webView.addJavascriptInterface(new MyWebViewJavascriptInterface(mContext, webView, callbackDialog), \u0026#34;Android\u0026#34;); Yukarıda ki “Android” kısmına istediğimiz ismi verebiliriz. WebView yapısı, burada belirtmiş olduğumuz isim ile sayfaya yüklenen içeriğe bir eklenti yapıyor, yani bir instance alıyor. Biz bu instance ı kullanarak iletişimimizi sağlıyoruz.\nAz sabır. Nasıl olduğunu görüceksin..\nMyWebViewClient class MyWebViewClient extends WebViewClient {   @Override  public void onPageFinished(WebView view, String url) {  super.onPageFinished(view, url);  //view.loadUrl(\u0026#34;javascript:window.Android.processHTML(\u0026#39;\u0026lt;html\u0026gt;\u0026#39;+document.getElementsByTagName(\u0026#39;html\u0026#39;)[0].innerHTML+\u0026#39;\u0026lt;/html\u0026gt;\u0026#39;);\u0026#34;);  } } Bu blok ne yapıyor ?\nwindow.Android.processHTML de ki Android bizim yukarıda belirtmiş olduğumuz aracı.\nprocessHtml ise aşağıda tanımlıcak olduğumuz fonksiyon.\nDiğer kısımlar javascript fonksiyonu zaten. Yani sayfada ki ilk html tag ını bularak içindeki html kodu al.\nAşağıda ki processHtml e bakarsan görüceksin ki htmlContent parametresi bekliyor.Biz de bu parametreye sayfa içeriğinin html kodunu gönderiyoruz. Almış olduğun bu html içeriğiyle ne yaparsın sana kalmış.\nMyWebViewJavascriptInterface class MyWebViewJavascriptInterface {   Context mContext;  WebView mWebView;   MyWebViewJavascriptInterface(Context c, WebView webView) {  this.mContext = c;  this.mWebView = webView;  }   @JavascriptInterface  public void processHTML(String htmlContent) {  // işlem  // Toast ile html içeriğini gösterebiliriz  }   @JavascriptInterface  public void islemeDevamEt() {  // işlem  }   @JavascriptInterface  public void pencereyiKapat() {  // işlem  // dialog.dismiss();  } } WebView miz ile Android native kodumuzun iletişimini bu sınıf sağlıyor.\nAşşağıda ki kod ile bunu söylüyoruz.\nwebView.addJavascriptInterface(new MyWebViewJavascriptInterface(mContext, webView), \u0026ldquo;Android\u0026rdquo;);\nNot : Android 4.2 den sonra @JavascriptInterface annotations ını eklememiz gerekmekte. Yoksa nolur ? Çalışmaz 😉\nCustom Html Content WebView de gösterdiğimiz html contentinde bir buton ekleyelim.\n \u0026lt;button class=\u0026#34;btn btn-danger\u0026#34; onclick=\u0026#34;PencereyiKapat()\u0026#34;\u0026gt;Pencereyi Kapat\u0026lt;/button\u0026gt; WebView içinde ki bu butona basıldığını Android anlasın ve (WebView imizi Dialog içerisinde gösterildiğini varsayarak) dialog penceresini kapasın.\nButonumuzun olduğu sayfaya javascript kodumuzu ekliyoruz.\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt;  function PencereyiKapat() {  Android.pencereyiKapat();  } \u0026lt;/script\u0026gt; Yukarıda ki Android i hatırladınız dimi ? 🙂\nHTML sayfamız bu kadar.\nWebView içerisinde ki butona basıldığında javascript fonksiyonu çalışacak ve Android.pencereyiKapat() çalışacak. Yani native tarafta tanımlamış olduğumuz pencereyiKapat() fonksiyonu.\nYukarıda ki yapıyı kullanarak WebView – Android Native etkileşimli yapı kurabilirsin.\nHer zaman ki gibi hayal gücüne ve projeye kalmış 😉\nKalın sağlıcakla..\n","permalink":"https://yazilim.aykutasil.com/android-webview-etkilesimi/","summary":"Kısa Hikaye : Üstünde çalışmakta olduğum bir projede kredi kartı ile ödeme yapısı kurmam gerekti. Kısaca projenin yapısından bahsedecek olursak\n  Backend : .Net Client : Android (Java) Ödeme altyapısı : İyzico  Client tarafında rest isteğiyle tüm işlemlerimizi backend tarafında yapıyoruz. Ödeme yapımızı da bu doğrultuda geliştirdik.\nProblem : 3DS ile ödeme almaya çalıştığımızda malumunuz işin içerisine bankanın bize telefonumuza gelen şifreyi girmemiz için göndermiş olduğu web sayfası vs.","title":"Android ile WebView Etkileşimi"},{"content":"Docker Komutları ve Açıklamaları\n \u0026gt; docker images Docker hostuna yüklü olan image leri gösterir.\n \u0026gt; docker ps Docker hostunda yüklü olan imagelerle inşa edilmiş olan container ları listeler.\n \u0026gt; docker run hello-world İlk olarak Local de (bilgisayarımızda) hello-world isminde bir image var mı kontrol eder. Eğer varsa direkt olarak çalıştırır.\nLocal de verilen isimde bir image bulamaz ise cloud da arama yapar, bulur, local e indirir ve ardından çalıştırır.\n\u0026gt; docker pull hello-world \u0026gt; docker run hello-world komutlarının birleşimidir.\n \u0026gt; docker run -p 8080:80 nginx nginx image local de arar, eğer bulamazsa indirir ve local imize kurar.\n-p parametresi kendisinden sonra verilen parametredeki portlar arasında port forwarding yani port yönlendirme yapar.\n-p = host umuzdaki 8080 portunu container ımızda ki 80 portuna yönlendirme işlemini sağlıyoruz\n \u0026gt; docker exec -it \u0026lt;container_id\u0026gt; /bin/bash komutu ile Container’a bir Bash Shell açabiliriz. -i interaktif terminali -t ise terminalin attach olmasını istediğimizi belirtir. docker exec -it /bin/bash komutunu çalıştırın (Container ID’nin sadece baştan birkaç harfini vermemizin yettiğine -çakışma olmadığı müddetçe- dikkat edin).\nOluşturmuş olduğumuz container ın içine girerek komutları çalıştırmamıza olanak sağlar.\nContainer ın içindeyken;\n\u0026gt; ps -ef komutu ile container ın çalıştırmış olduğu tüm process leri listeleyebiliriz.\nKomutlar docker images\tLokal registery’de mevcut bulunan Image’ları listeler\ndocker ps\tHalihazırda çalışmakta olan Container’ları listeler\ndocker ps -a\tDocker Daemon üzerindeki bütün Container’ları listeler\ndocker ps -aq\tDocker Daemon üzerindeki bütün Container’ların ID’lerini listeler\ndocker pull \u0026lt;repository_name\u0026gt;/\u0026lt;image_name\u0026gt;:\u0026lt;image_tag\u0026gt;\tBelirtilen Image’ı lokal registry’ye indirir. Örnek: docker pull gsengun/jmeter3.0:1.7\ndocker top \u0026lt;container_id\u0026gt;\tİlgili Container’da top komutunu çalıştırarak çıktısını gösterir\ndocker run -it \u0026lt;image_id|image_name\u0026gt; CMD\tVerilen Image’dan terminal’i attach ederek bir Container oluşturur\ndocker pause \u0026lt;container_id\u0026gt;\tİlgili Container’ı duraklatır\ndocker unpause \u0026lt;container_id\u0026gt;\tİlgili Container pause ile duraklatılmış ise çalışmasına devam ettirilir\ndocker stop \u0026lt;container_id\u0026gt;\tİlgili Container’ı durdurur\ndocker start \u0026lt;container_id\u0026gt;\tİlgili Container’ı durdurulmuşsa tekrar başlatır\ndocker rm \u0026lt;container_id\u0026gt;\tİlgili Container’ı kaldırır fakat ilişkili Volume’lara dokunmaz\ndocker rm -v \u0026lt;container_id\u0026gt;\tİlgili Container’ı ilişkili Volume’lar ile birlikte kaldırır\ndocker rm -f \u0026lt;container_id\u0026gt;\tİlgili Container’ı zorlayarak kaldırır. Çalışan bir Container ancak -f ile kaldırılabilir\ndocker rmi \u0026lt;image_id|image_name\u0026gt;\tİlgili Image’ı siler\ndocker rmi -f \u0026lt;image_id|image_name\u0026gt;\tİlgili Image’ı zorlayarak kaldırır, başka isimlerle Tag’lenmiş Image’lar -f ile kaldırılabilir\ndocker info\tDocker Daemon’la ilgili özet bilgiler verir\ndocker inspect \u0026lt;container_id\u0026gt;\tİlgili Container’la ilgili detaylı bilgiler verir\ndocker inspect \u0026lt;image_id|image_name\u0026gt;\tİlgili Image’la ilgili detaylı bilgiler verir\ndocker rm $(docker ps -aq)\tBütün Container’ları kaldırır\ndocker stop $(docker ps -aq)\tÇalışan bütün Container’ları kaldırır\ndocker rmi $(docker images -aq)\tBütün Image’ları kaldırır\ndocker images -q -f dangling=true\tDangling (taglenmemiş ve bir Container ile ilişkilendirilmemiş) Image’ları listeler\ndocker rmi $(docker images -q -f dangling=true)\tDangling Image’ları kaldırır\ndocker volume ls -f dangling=true\tDangling Volume’ları listeler\ndocker volume rm $(docker volume ls -f dangling=true -q)\tDanling Volume’ları kaldırır\ndocker logs \u0026lt;container_id\u0026gt;\tİlgili Container’ın terminalinde o ana kadar oluşan çıktıyı gösterir\ndocker logs -f \u0026lt;container_id\u0026gt;\tİlgili Container’ın terminalinde o ana kadar oluşan çıktıyı gösterir ve -f follow parametresi ile o andan sonra oluşan logları da göstermeye devam eder\ndocker exec \u0026lt;container_id\u0026gt; \u0026lt;command\u0026gt;\tÇalışan bir Container içinde bir komut koşturmak için kullanılır\ndocker exec -it \u0026lt;container_id\u0026gt; /bin/bash\tÇalışan bir Container içinde terminal açmak için kullanılır. İlgili Image’da /bin/bash bulunduğu varsayımı ile\ndocker attach \u0026lt;container_id\u0026gt;\tÖnceden detached modda -d başlatılan bir Container’a attach olmak için kullanılır\nEk Kaynak : http://www.gokhansengun.com/docker-nedir-nasil-calisir-nerede-kullanilir/\n","permalink":"https://yazilim.aykutasil.com/docker-komutlari/","summary":"Docker Komutları ve Açıklamaları\n \u0026gt; docker images Docker hostuna yüklü olan image leri gösterir.\n \u0026gt; docker ps Docker hostunda yüklü olan imagelerle inşa edilmiş olan container ları listeler.\n \u0026gt; docker run hello-world İlk olarak Local de (bilgisayarımızda) hello-world isminde bir image var mı kontrol eder. Eğer varsa direkt olarak çalıştırır.\nLocal de verilen isimde bir image bulamaz ise cloud da arama yapar, bulur, local e indirir ve ardından çalıştırır.","title":"Docker Komutları"},{"content":"DOCKER Docker aldı başını gidiyor. Yeni bir devrim açıyor.\nE haliyle yazılım dünyası buna sessiz kalmamakla beraber bir çok Docker nedir? örnekleri vs. hazırlanıyor.\nBu nedenle biz Docker nedir? tanımlamasından daha çok hızlı ilerlemeler şeklinde ufak uygulamalar geliştiricez. Ben de bu yazı serisiyle paralel şekilde öğrenimimi sağlayacağımı belirtmek isterim ! 🙂\nBaşlıyoruz..\nİlk olarak makinemize Docker ı kuralım.\n Mac: https://docs.docker.com/docker-for-mac/ Windows : https://docs.docker.com/docker-for-windows/  İndirip kurulumu sağladıktan sonra terminali açarak\n\u0026gt; docker run hello-world\nkomutunu çalıştırıyoruz ve Docker a merhaba diyoruz.\nCannot connect to the Docker daemon. Is the docker daemon running on this host? Yukarıda ki mesajı alanlar için;\ndocker-machine start # start virtual machine for docker docker-machine env # it\u0026#39;s helps to get environment variables eval \u0026#34;$(docker-machine env default)\u0026#34; #set environment variables Komutlarını çalıştırarak Docker ın sistemimize tanıtıyoruz ve sonrasında tekrar docker run Hello-World komutunu çalıştırıyoruz.\nHadi bakalım hayırlı olsun.. 😉\nKaynaklar  http://www.enterprisecoding.com/post/yeni-baslayanlar-icin-docker  ","permalink":"https://yazilim.aykutasil.com/docker/","summary":"DOCKER Docker aldı başını gidiyor. Yeni bir devrim açıyor.\nE haliyle yazılım dünyası buna sessiz kalmamakla beraber bir çok Docker nedir? örnekleri vs. hazırlanıyor.\nBu nedenle biz Docker nedir? tanımlamasından daha çok hızlı ilerlemeler şeklinde ufak uygulamalar geliştiricez. Ben de bu yazı serisiyle paralel şekilde öğrenimimi sağlayacağımı belirtmek isterim ! 🙂\nBaşlıyoruz..\nİlk olarak makinemize Docker ı kuralım.\n Mac: https://docs.docker.com/docker-for-mac/ Windows : https://docs.docker.com/docker-for-windows/  İndirip kurulumu sağladıktan sonra terminali açarak","title":"Docker"},{"content":"ExecutorService submit() – execute() Link : http://javarevisited.blogspot.com.tr/2016/04/difference-between-ExecutorServie-submit-vs-Executor-execute-method-in-Java.html\n","permalink":"https://yazilim.aykutasil.com/java-executorservice-submit-and-execute/","summary":"ExecutorService submit() – execute() Link : http://javarevisited.blogspot.com.tr/2016/04/difference-between-ExecutorServie-submit-vs-Executor-execute-method-in-Java.html","title":"ExecutorService submit() – execute()"},{"content":"Executor newCachedThreadPool() newFixedThreadPool(n) newSingleThreadExecutor() Thread kullanımı, Java ile multi-threading yazılım geliştiriyorsanız mutlaka ama mutlaka bilmeniz gereken konulardan biridir.\nThreadPool Gün geldi çattı ve uygulamanız ilk kurulduğu amacın evrimleşmesi sonucu bambaşka bir hale büründü 🙂\nYani birçok uygulamada gidişat bu yöndedir ve olması gerekende budur.\nAynı anda 1000 den fazla kullanıcıya cevap verme gereksinimiz var artık. Sadece patron kullanmıyor sonuçta. Ya da patron öyle bir uygulama istemişki ağır işler gerektiriyor. Uzun süreler gerektiren işlemler sonucunda akış tamamlanıyor vs.\nSözün kısası;\nUygulamamız içerisinde ki akışları ayrı parçalara bölerek daha hızlı çalışmasını ve aynı anda birden fazla iş yapmamızı sağlayan yapıdır bu Thread ler.\nPeki en basitinden nasıl kullanırız bu yapıyı ? Tabi hödük gibi değil, olması gerektiği gibi.. 😉\nExecutors Executors sınıfı içerisinde statik olarak tanımlanmış ve kolayca thread pool oluşturabileceğimiz yapılar mevcuttur.\nEXECUTORS.NEWCACHEDTHREADPOOL() Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available. These pools will typically improve the performance of programs that execute many short-lived asynchronous tasks. Calls to execute will reuse previously constructed threads if available. If no existing thread is available, a new thread will be created and added to the pool. Threads that have not been used for sixty seconds are terminated and removed from the cache. Thus, a pool that remains idle for long enough will not consume any resources. Note that pools with similar properties but different details (for example, timeout parameters) may be created using ThreadPoolExecutor constructors.\nResmi kaynaklardan yukarıdaki tanımlama yapılmış.\nYani özetlicek olursak;\n Kısa süren işlemlerimizde bu yapıyı kullanmalıyız Bu yapı bizim için otomatik olarak bir thread oluşturur ve ihtiyacı oldukça yeni bir thread oluşturulmasını sağlar Oluşturulan thread ler boş kaldığında thread i kapatır. (60 saniye) Oluşturulan thread le işi bitti ve kapatılması için belli bir süre gerekiyor (60 saniye). Ama bu süre tamamlanmadan yeni bir iş geldi. Bu işi yapmak için yeni bir thread açmaz. Eğer önceden oluşturulan thread ler arasında uygun durumda olan varsa yeni gelen işi orada çalıştırır.  Peki süper. Herşey çok iyi. Olması gerektiği gibi. Peki aynı anda 10000 kişi işlem yapmaya çalıştı. Ve ağır işlemler olduğu için sürekli yeni thread oluşturmak zorunda kaldı. 10000 tane yeni thread. Thread oluşturmak da belli bir süre ve emek gerektiriyor unutma. Peki CPU ? … vs. vs. İşte bu yüzden kısa süreli ve hafif işler için bu yapıyı kullanıyoruz. 😉\nAga bana örnek söyle.\nTamam sakin ol.. :*\nprivate void executorServiceNewCachedThreadPool() {   ExecutorService executorService = Executors.newCachedThreadPool();   for (int a = 0; a \u0026lt; 40; a++) {  executorService.submit(new Runnable() {  @Override  public void run() {  Log.i(TAG, \u0026#34;ExecuterService: \u0026#34; + Thread.currentThread().getName());  }  });  } } Çıktı:\nI/MainActivity: ExecuterServicee: pool-7-thread-43 I/MainActivity: ExecuterServicee: pool-7-thread-10 I/MainActivity: ExecuterServicee: pool-7-thread-111 I/MainActivity: ExecuterServicee: pool-7-thread-47 I/MainActivity: ExecuterServicee: pool-7-thread-91 ... Yukarıda ki çıktıdan görüldüğü üzere 111 thread oluşturmuş. Ben 10000 satırın sadece bi kısmını yapıştırdım buraya. Belki 200 tane fln de oluşturmuş olabilir. Yani makineye ve işe bağlı olarak değişiyor. Kodun çalışmasıda ~6-7 saniye kadar sürdü. Yani baya uzun. Eee bu kadar thread açmak kapamak kolay değil.\nAma 60 saniye sonra tüm thread ler kapatılacak. Bu yönden de bakabilirsin.\nHangi yönden bakman gerektiğini projen söylücek sana. Kulak ver..\nNeyse..\npublic static ExecutorService newCachedThreadPool() {  return new ThreadPoolExecutor(0, Integer.MAX_VALUE,  60L, TimeUnit.SECONDS,  new SynchronousQueue\u0026lt;Runnable\u0026gt;()); } Not:\nYukarıda ki fonksiyonu kullanarak kendimize uygun cachedThreadPool oluşturabiliriz.\nTabi şuraya bakmakta fayda var : http://stackoverflow.com/a/1800583/3448461\nEXECUTORS.NEWFIXEDTHREADPOOL(N) Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue. At any point, at most nThreads threads will be active processing tasks. If additional tasks are submitted when all threads are active, they will wait in the queue until a thread is available. If any thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks. The threads in the pool will exist until it is explicitly shutdown.\nYani diyor ki;\n Uygulaman da daha fazla kontrol sahibi olmak istiyorsan bu yapıyı kullan. Thread e göndereceğin işler daha ağır ve uzun işler ise bu yapıyı kullan Ben senin tanımlamış olduğun kadar Thread oluşturucam. Ve bana iş yolladıkça hangi thread müsaitse onda çalıştırıcam. Tüm Thread ler dolu iken iş gelirse sıraya sokacam. Sen raad ol. Ben halledicem hepsini diyor.  private void executorServiceNewFixedThreadPool() {   ExecutorService executorService = Executors.newFixedThreadPool(5);   for (int a = 0; a \u0026lt; 10000; a++) {  executorService.execute(new Runnable() {  @Override  public void run() {  Log.i(TAG, \u0026#34;ExecuterServicee: \u0026#34; + Thread.currentThread().getName());  }  });  } } Çıktı:\nI/MainActivity: ExecuterServicee: pool-7-thread-5 I/MainActivity: ExecuterServicee: pool-7-thread-5 I/MainActivity: ExecuterServicee: pool-7-thread-1 I/MainActivity: ExecuterServicee: pool-7-thread-3 I/MainActivity: ExecuterServicee: pool-7-thread-3 I/MainActivity: ExecuterServicee: pool-7-thread-3 I/MainActivity: ExecuterServicee: pool-7-thread-3 Ortalama ~2 saniye sürdü.\nEXECUTORS.NEWSINGLETHREADEXECUTOR() private void executorServiceNewSingleThreadExecutor() {  ExecutorService executorService = Executors.newSingleThreadExecutor();   for (int a = 0; a \u0026lt; 10000; a++) {  executorService.execute(new Runnable() {  @Override  public void run() {  Log.i(TAG, \u0026#34;ExecuterServicee: \u0026#34; + Thread.currentThread().getName());  }  });  } } Çıktı:\nI/MainActivity: ExecuterServicee: pool-7-thread-1 I/MainActivity: ExecuterServicee: pool-7-thread-1 I/MainActivity: ExecuterServicee: pool-7-thread-1 I/MainActivity: ExecuterServicee: pool-7-thread-1 I/MainActivity: ExecuterServicee: pool-7-thread-1 Ortalama ~2 saniye sürdü.\nTek bir Thread oluşturarak tüm gelen işleri sıraya sokarak bu Thread üzerinde işlemi gerçekleştirir.\nPeki bir soru ?\nExecutors.newSingleThreadExecutor() ile Executors.newFixedThreadPool(1) arasında fark var mı ?\nUfakta olsa var tabi.\nAma ikiside tek bir Thread oluşturur ve gelen tüm işleri bu Thread üzerinden gerçekleştirir.\nFark :\nSimilirity newSingleThreadExecutor() returns ExecutorService with single thread worker and newFixedThreadPool(1) also returns ExecutorService with single thread worker. In both cases if thread terminates, new thread will be created.\nDifference ExecutorService returned by newSingleThreadExecutor(), can never increase its thread pool size more than one. ExecutorService returned by newFixedThreadPool(1), can increase its thread pool size more than one at run time by setCorePoolSize() of the class ThreadPoolExecutor.\nYani newFixedThreadPool(1) ile oluşturulan tek Thread yapısı sonradan artırılabilir. Ama newSingleThreadExecutor() ile oluşturulan yapı her zaman tek Thread üzerinden çalıştırılır.\nNasıl arttırabiliriz ?\nprivate void changeThreadSize() {   ExecutorService executorService = Executors.newFixedThreadPool(1);  ThreadPoolExecutor threadPoolExecutor = (ThreadPoolExecutor) executorService;  threadPoolExecutor.setCorePoolSize(2);  threadPoolExecutor.setMaximumPoolSize(2);   for (int a = 0; a \u0026lt; 10000; a++) {  threadPoolExecutor.execute(new Runnable() {  @Override  public void run() {  Log.i(TAG, \u0026#34;ExecuterServicee: \u0026#34; + Thread.currentThread().getName());  }  });  } } Çıktı:\nI/MainActivity: ExecuterServicee: pool-7-thread-1 I/MainActivity: ExecuterServicee: pool-7-thread-1 I/MainActivity: ExecuterServicee: pool-7-thread-2 I/MainActivity: ExecuterServicee: pool-7-thread-2 I/MainActivity: ExecuterServicee: pool-7-thread-2 ","permalink":"https://yazilim.aykutasil.com/java-executorservice/","summary":"Executor newCachedThreadPool() newFixedThreadPool(n) newSingleThreadExecutor() Thread kullanımı, Java ile multi-threading yazılım geliştiriyorsanız mutlaka ama mutlaka bilmeniz gereken konulardan biridir.\nThreadPool Gün geldi çattı ve uygulamanız ilk kurulduğu amacın evrimleşmesi sonucu bambaşka bir hale büründü 🙂\nYani birçok uygulamada gidişat bu yöndedir ve olması gerekende budur.\nAynı anda 1000 den fazla kullanıcıya cevap verme gereksinimiz var artık. Sadece patron kullanmıyor sonuçta. Ya da patron öyle bir uygulama istemişki ağır işler gerektiriyor. Uzun süreler gerektiren işlemler sonucunda akış tamamlanıyor vs.","title":"Executor newCachedThreadPool() newFixedThreadPool(n) newSingleThreadExecutor()"},{"content":"Runnable() \u0026amp; Callable() Ayrıntılı açıklama için bu siteyi kullanabilirsiniz.\n","permalink":"https://yazilim.aykutasil.com/java-runnable-and-callable/","summary":"Runnable() \u0026amp; Callable() Ayrıntılı açıklama için bu siteyi kullanabilirsiniz.","title":"Runnable() \u0026 Callable()"},{"content":"RxJava range() Kullanımı **Örnek kod:\u0026ndash;\nprivate void range() {  Observable.range(3, 5).subscribeOn(Schedulers.io())  .subscribe(success -\u0026gt; {  Log.i(TAG, \u0026#34;val: \u0026#34; + success.toString());  }); } Açıklama:\nİlk değer 3 kabul edilerek sonraki 5 sayı için teker teker onNext() çağırılır. Yani 3 , 4, 5, 6, 7\nYukarıda ki kodun çıktısı aşağıdaki gibidir.\nI/MainActivity: val: 3 I/MainActivity: val: 4 I/MainActivity: val: 5 I/MainActivity: val: 6 I/MainActivity: val: 7 RxJava candır. 😉\n","permalink":"https://yazilim.aykutasil.com/rxjava-range/","summary":"RxJava range() Kullanımı **Örnek kod:\u0026ndash;\nprivate void range() {  Observable.range(3, 5).subscribeOn(Schedulers.io())  .subscribe(success -\u0026gt; {  Log.i(TAG, \u0026#34;val: \u0026#34; + success.toString());  }); } Açıklama:\nİlk değer 3 kabul edilerek sonraki 5 sayı için teker teker onNext() çağırılır. Yani 3 , 4, 5, 6, 7\nYukarıda ki kodun çıktısı aşağıdaki gibidir.\nI/MainActivity: val: 3 I/MainActivity: val: 4 I/MainActivity: val: 5 I/MainActivity: val: 6 I/MainActivity: val: 7 RxJava candır. 😉","title":"RxJava range() Kullanımı"},{"content":"RxJava scan() Kullanımı RxJava da scan() kullanımı iki şekilde olur.\n   İlk değer ataması yapılarak    private void scan() {  Observable.just(3, 5, 7, 9)  .scan(10,(val1, val2) -\u0026gt; {  //  Log.i(TAG, \u0026#34;val1: \u0026#34; + val1.toString());  Log.i(TAG, \u0026#34;val2: \u0026#34; + val2.toString());  return val1 + val2;  }).subscribeOn(Schedulers.io())  .subscribe(success -\u0026gt; {  Log.i(TAG, \u0026#34;Sonuc:\u0026#34; + success.toString());  }); }   İlk değer ataması yapılmadan    private void scan() {  Observable.just(3, 5, 7, 9)  .scan((val1, val2) -\u0026gt; {  //  Log.i(TAG, \u0026#34;val1: \u0026#34; + val1.toString());  Log.i(TAG, \u0026#34;val2: \u0026#34; + val2.toString());  return val1 + val2;  }).subscribeOn(Schedulers.io())  .subscribe(success -\u0026gt; {  Log.i(TAG, \u0026#34;Sonuc:\u0026#34; + success.toString());  }); } Açıklama:\nObservable nesnesinin içindeki her bir item a fonksiyon uygulamamızı sağlar. Ve her iterasyon sonrası sonucu yayınlar yani subscribe.OnSuccess metoduna yollar. Başka bir deyişle scan() kod bloğu içeresinde tanımlamış olduğumuz fonksiyonu item lara sırayla uygulayarak onNext() fonksiyonunu çağırır.\nprivate void scan() {  Observable.just(3, 5, 7, 9)  .scan(10,(val1, val2) -\u0026gt; {  //  Log.i(TAG, \u0026#34;val1: \u0026#34; + val1.toString());  Log.i(TAG, \u0026#34;val2: \u0026#34; + val2.toString());  return val1 + val2;  }).subscribeOn(Schedulers.io())  .subscribe(success -\u0026gt; {  Log.i(TAG, \u0026#34;Sonuc:\u0026#34; + success.toString());  }); } Yukarıda ki örnek üzerinden gidecek olursak;\nI/MainActivity: Sonuc:10 I/MainActivity: val1: 10 I/MainActivity: val2: 3 I/MainActivity: Sonuc:13 I/MainActivity: val1: 13 I/MainActivity: val2: 5 I/MainActivity: Sonuc:18 I/MainActivity: val1: 18 I/MainActivity: val2: 7 I/MainActivity: Sonuc:25 böyle bir çıktı ile karşılaşırız.\nİlk değer ataması yaptığımız için (10) ilk olarak onSuccess in içine bu değer düşer. Daha sonra Observable nesnemizin ilk item ı olan 3 değeri ile toplama işlemi yapılır (10 + 3) ve sonuç onSuccess e yollanır (13). Daha sonra 13 ile ikinci item olan 5 toplanır (13 + 5) ve sonuç (18) onSuccess e aktarılır. Tüm item lar işlem görünceye kadar devam eder.\nRxJava candır 😉\n","permalink":"https://yazilim.aykutasil.com/rxjava-scan/","summary":"RxJava scan() Kullanımı RxJava da scan() kullanımı iki şekilde olur.\n   İlk değer ataması yapılarak    private void scan() {  Observable.just(3, 5, 7, 9)  .scan(10,(val1, val2) -\u0026gt; {  //  Log.i(TAG, \u0026#34;val1: \u0026#34; + val1.toString());  Log.i(TAG, \u0026#34;val2: \u0026#34; + val2.toString());  return val1 + val2;  }).subscribeOn(Schedulers.io())  .subscribe(success -\u0026gt; {  Log.i(TAG, \u0026#34;Sonuc:\u0026#34; + success.toString());  }); }   İlk değer ataması yapılmadan    private void scan() {  Observable.","title":"RxJava scan() Kullanımı"},{"content":"RxJava reduce() Kullanımı reduce() fonskyionu iki şekilde çalışır;\n 1.Kullanım  .reduce(new BiFunction\u0026lt;Integer, Integer, Integer\u0026gt;() {  @Override  public Integer apply(Integer val1, Integer val2) throws Exception {  return null;  } })  2.Kullanım  .reduce(10,new BiFunction\u0026lt;Integer, Integer, Integer\u0026gt;() {  @Override  public Integer apply(Integer val1, Integer val2) throws Exception {  return null;  } }) 1 ile 2 nin farkı, 2 de görüldüğü üzere fonksiyona başlangıç değeri atanabilmesidir.\nAşağıdaki örneklerde daha net görebilirsiniz.\nRxJava’nın reduce fonksiyonunu tanımlıcak olursak;\nObservable nesnesine ait her bir item a (1 , 3, 5) fonksiyon uygulanmasını sağlar. Bunu map() gibi fonksiyonlarda sağlıyor. Ama tabi reduce bunu farklı bir şekilde yapıyor.\nEğer ilk değer (seed) atanmamış ise ilk değer olarak (val1) ilk item ı (1) alıyor.\nDaha sonra biz her item\u0026rsquo;a yapması gereken işlem olarak iki değeri toplamasını söylediğimiz için, ilk değer ve ikinci değeri toplayıp bunu bir sonraki işlem için ilk değer olarak atıyor. İkinci iterasyonda kaldığı yerden devam ederek, ilk değer olarak bir önceki işlemin sonucu ve ikinci değer olarak 2. item ı alıyor. Yine toplama işlemi yaparak bir sonraki işlem için ilk değer ataması yapıyor.\nTüm item lar ile işlem yapıncaya kadar devam ediyor ve sonuç subscribe.onSuccess in içine düşüyor.\nprivate void reduce() {  Observable.just(1, 3, 5)  .reduce((val1, val2) -\u0026gt; {  Log.i(TAG, \u0026#34;val1: \u0026#34; + val1.toString());  Log.i(TAG, \u0026#34;val2: \u0026#34; + val2.toString());  return val1 + val2;  }).retry()  .subscribeOn(Schedulers.computation())  .subscribe(success -\u0026gt; {  Log.i(TAG, \u0026#34;Sonuc:\u0026#34; + success.toString());  }); } Çıktı:\nI/MainActivity: val1: 1 I/MainActivity: val2: 3 I/MainActivity: val1: 4 I/MainActivity: val2: 5 I/MainActivity: Sonuc:9 Burda yukarıda ki işlemden farklı olarak ek bir iterasyon daha yapılıyor. Çünkü ilk değer atamasını biz kendimiz yapıyoruz. İkinci değer olarak da her item sırayla bu görevi üstleniyor. Ve toplama işlemi yapılıp, toplam sonucunu ilk değer olarak atadıktan sonra döngü devam ediyor. Ve sonuç subscribe.onSuccess e düşüyor.\nprivate void reduce() {  Observable.just(1, 3, 5).reduce(10, (val1, val2) -\u0026gt; {  Log.i(TAG, \u0026#34;val1: \u0026#34; + val1.toString());  Log.i(TAG, \u0026#34;val2: \u0026#34; + val2.toString());  return val1 + val2;  }).retry()  .subscribeOn(Schedulers.computation())  .subscribe(success -\u0026gt; {  Log.i(TAG, \u0026#34;Sonuc:\u0026#34; + success.toString());  }); } Çıktı:\nI/MainActivity: val1: 10 I/MainActivity: val2: 1 I/MainActivity: val1: 11 I/MainActivity: val2: 3 I/MainActivity: val1: 14 I/MainActivity: val2: 5 I/MainActivity: Sonuc:19 RxJava candır 😉\n","permalink":"https://yazilim.aykutasil.com/rxjava-reduce/","summary":"RxJava reduce() Kullanımı reduce() fonskyionu iki şekilde çalışır;\n 1.Kullanım  .reduce(new BiFunction\u0026lt;Integer, Integer, Integer\u0026gt;() {  @Override  public Integer apply(Integer val1, Integer val2) throws Exception {  return null;  } })  2.Kullanım  .reduce(10,new BiFunction\u0026lt;Integer, Integer, Integer\u0026gt;() {  @Override  public Integer apply(Integer val1, Integer val2) throws Exception {  return null;  } }) 1 ile 2 nin farkı, 2 de görüldüğü üzere fonksiyona başlangıç değeri atanabilmesidir.","title":"RxJava reduce() Kullanımı"},{"content":"VS Code \u0026amp; Express \u0026amp; TypeScript \u0026amp; IntelliSense VS Code, Atom ile aynı çekirdeği paylaşan, Electron kullanılarak microsoft tarafından özelleştirilmiş ve birçok dil ile uygulama geliştirmeniz için çeşitli eklentileri bulunan bir editördür.\nGünümüzün lider dili malum Javascript ve belki de bunun böyle olmasının en temel sebeplerinden biri NodeJS.\nNodeJS ile çok hızlı bir şekilde ve tamamen javascript kullanarak web siteleri, uygulamaları, api service leri vb. geliştirebiliriz.\nBu yazımızda VS Code un nimetlerinden yararlanarak hızlı ve kolay bir şekilde nasıl NodeJS uygulaması yazabiliriz, bunu görücez.\nVe bu uygulamamızı geliştirirlem NodeJS in en temel kütüphanelerinden biri olan Express i kullanıcaz.\nCLI kullanarak express uygulaması oluşturabilmemiz için express-generator module ünün global olarak kaydediyoruz.\nAyrıntılı bilgi burada.\nnpm install express-generator -g\nDaha sonra projemizi oluşturacağımız path e giderek;\nexpress SampleNodeApp\nyazarak uygulamamızın temel yapısını kolayca oluşturuyoruz. Daha sonra istediğimiz şekilde özelleştirme yapabiliriz tabiki.\nDaha sonra oluşturduğumuz projeyi VS Code ile açıyoruz.\n VS Code un nimetlerinden faydalanabilmek için jsconfig.js dosyasını eklememiz gerekmekte. VS Code penceresinin sağ alt tarafında bulunan ampül e tıklarsanız kısa yoldan bu dosyayı oluşturabilirsiniz. Daha sonra VS Code un Debug sekmesine girerek sol üstte bulunan ayarlar simgesine tıklıyoruz ve Node seçeneğini seçerek launch.js dosyasını oluşturulmasını sağlıyoruz. Terminali açarak ilk olarak aşağıdaki satırı çalıştırarak typings modülünü yüklüyoruz.  npm install -g typings\n Daha sonra birçok dil için bulunan ve kod yazarken prompt çıkartarak bize öneride bulunan DefinitelyTyped ları ekliyoruz.Biz NodeJs uygulaması geliştirdiğimiz için node için olanı ve express module ünü kullanarak geliştirme yaptığımız içinde express için olanı yüklüyoruz. DefinetlyTyped ı buradan görebilirsiniz.  typings install dt~node --global typings install dt~express dt~serve-static dt~express-serve-static-core --global\nVe artık hızlı bir şekilde NodeJS uygulaması geliştirmeye hazırız.\n Uygulamızın ilk hali aşağıdaki gibidir. Yani express SampleNodeApp yazdığımızda aşağıdaki dosyaları otomatik olarak oluşur.   __dirname in üstüne geldiğimizde any yazısını görürüz. Yani herhangi bir öneri gözükmemektedir.   Sol tarafta en altta bulunan simgeye tıklayarak açtığımız Debug sayfasında Environment (Node.js) i seçiyoruz ve default yapılandırmanın oluşmasını sağlıyoruz.   Sağ altta bulunan ampül simgesine tıklayarak (yukarıda ki resimlerden görebilirsiniz) jsconfig.js dosyasını oluşturuyoruz.  VS Code tarafında yapmamız gerekenler bunlar. Şimdi IntelliSense için gerekli modülleri yüklememiz gerekiyor.\nGerekli modülleri yükledik. Biz NodeJS uygulaması geliştirdiğimiz için node ve express için olan modülleri kurdur. Diğer dillerden geliştirme yaparken o dile ait eklentileri kurmalısınız.\nVe sonuç olarak artık yazılan kodun üstüne gelerek açıklamayı ve nasıl kullanılması gerektiğine dair ipuçlarını görebiliriz.\n","permalink":"https://yazilim.aykutasil.com/vscode-intellisense/","summary":"VS Code \u0026amp; Express \u0026amp; TypeScript \u0026amp; IntelliSense VS Code, Atom ile aynı çekirdeği paylaşan, Electron kullanılarak microsoft tarafından özelleştirilmiş ve birçok dil ile uygulama geliştirmeniz için çeşitli eklentileri bulunan bir editördür.\nGünümüzün lider dili malum Javascript ve belki de bunun böyle olmasının en temel sebeplerinden biri NodeJS.\nNodeJS ile çok hızlı bir şekilde ve tamamen javascript kullanarak web siteleri, uygulamaları, api service leri vb. geliştirebiliriz.\nBu yazımızda VS Code un nimetlerinden yararlanarak hızlı ve kolay bir şekilde nasıl NodeJS uygulaması yazabiliriz, bunu görücez.","title":"VS Code \u0026 Express \u0026 TypeScript \u0026 IntelliSense"},{"content":"TCP/IP Nasıl Çalışır ? Bilgisayar ağları kullanılarak bilgisayarların birbirileriyle haberleşmeye başladıkları ilk yıllarda iki bilgisayarın birbiriyle haberleşebilmeleri için aynı marka/model cihazları kullanmaları gerekiyordu. Bunun üzerine farklı üreticiler tarafından üretilen cihazların birbiriyle sorunsuz ve belirli bir düzen içinde haberleşebilmesi için çeşitli standartlar geliştirilmiştir.\nBunlardan en çok kullanılanı Açık Sistem Bağlantıları komitesi tarafından geliştirilen 7 katmanlı OSI referans modeli ve Amerikan Savunma Bakanlığı tarafından geliştirilen TCP/IP referans modelidir. OSI iki bilgisayar arasındaki haberleşme problemini çözmek için 7 katmanlı (aşamalı) bir ağ sistemi önermiştir.\nOSI referans modelindeki 7 katmana karşılık TCP/IP referans modeli 4 katmanlı bir çözüm sunar ve 7 katmanlı OSI modeline göre daha hızlı bir iletişim imkânı sunar. OSI modeli iletişim standartlarını belirlemeye yöneliktir ve TCP/IP daha uygulanabilir bir model olduğu için daha çok uygulamaya yöneliktir.\nTCP/IP Nedir? TCP/IP birçok protokolün toplandığı bir protokoller ailesidir. Bu referans modeline en çok kullanılan iki protokolün ismi verilmiştir; TCP (Transmission Control Protocol) ve IP (Internet Protocol). Bu referans modelinde 4 farklı katmanda 15’ten fazla protokol vardır. Veriler bu katmanlar arasında sırasıyla paketlenerek gönderilir, alıcıda ise paketlemenin tersi sırayla teker teker açılarak veri ulaştırılmış olur.\n► Protokol: Protokoller cihazlar arası iletişimde kullanılan, iletişim kurallarını belirleyen ağ dilleridir. Referans modelinin her katmanda ayrı protokoller görev yapar. Farklı referans modellerinde aynı protokoller çalışabilir.\nTCP/IP Referans Modeli Katmanları ► Uygulama katmanı: Bu katmanda gönderilecek veri tipi ve veriyi işleyen uygulamalar bulunur. Örneğin bir HTML web sayfası ve bu veri tipini kullanan HTTP protokolü bu katmandadır. OSI modelindeki sunum ve oturum katmanları TCP/IP modelinde uygulama katmanı içerisinde yer alır. E-Posta gönderimi için kullanılan SMTP ve dosya gönderimi için kullanılan FTP protokolleri bu katmanda bulunur.\n► Taşıma katmanı: Bu katmanda verinin nasıl gönderileceği belirlenir. Veri güvenliği, hata kontrolü gibi işlemler yapılır. TCP ve UDP bu katmandadır. TCP klasik veri aktarımında UDP ise medya aktarımında kullanılır. TCP, UDP ye göre daha güvenli fakat daha yavaş çalışır. Çünkü TCP ‘de gönderilen her veri paketinin ardından verinin yerine doğru bir şekilde ulaşıp ulaşmadığı kontrol edilir.\n► Ağ katmanı: IP katmanı olarak da adlandırılan bu katman da verilerin gideceği adres veriye eklenir yani veri bu katmandan gönderilir ve yönlendirilir. IPv4 ün gelecekte yetersiz kalma durumuna karşı IPv6 sistemine geçmek için çalışmalar başlatılmıştır.IPv4 32 bit iken IPv6 ile 128 bitlik adresler kullanılacak. Bu sayede daha fazla cihaza IP adresi atanabilecek.\n► Fiziksel katman: Bu katman verinin hangi yolla gönderileceği belirlenir. İletişim ortamının özelliklerini, haberleşme hızını ve kodlama şemasını belirler. Ethernet, Wi-Fi, Token Ring, ATM gibi protokoller bu katmanda çalışır.\nKatmanlar ve Protokoller Nasıl İşler? Örneğin bir web sayfası bilgisayarınıza şu şekilde gelir;\n  ► Web sayfasının saklı olduğu sunucuda uygulamalar sayfanın HTML veri formatında bir çıktısını oluşturur. Ve bu veriyi HTTP protokolüyle gönder komutunu verir. Bunlar 4. katmanda yani uygulama katmanında olur. Buradan çıkan veri 3. katmana yani taşıma katmanına gönderilir.\n  ► Taşıma katmanında veriye taşıma katmanının bilgileri yani port bilgisi ve veri boyutu eklenir.\n  ► Üçüncü katmandan çıkan veri paketine ikinci katmanda verinin gönderileceği bilgisayarın (sunucunun) ve sizin bilgisayarınızın IP adresleri ve verinin son halinin boyutu eklenir.\n  ► Son katmanda yani fiziksel katmanda fiziksel adresler ve verinin yeni boyutu pakete eklenir.\n  ► Paket sunucudan çıkar ve sunucu ile sizin bilgisayarınız arasındaki binlerce kilometrelik yolu kat ederek bilgisayarınıza ulaşır.\n  Veri bilgisayarınıza ulaştığında bu sefer tersi sırayla katmanlardaki protokoller işletilir. Bilgisayarınız önce fiziksel katmanı ardından ağ katmanını, daha sonra taşıma ve uygulama katmanlarını işletir. Ve en sonunda kalan paketi web tarayıcınıza gönderir. Her katmanda ayrı donanımlar görev yapar. Fiziksel katmanda Switch, ağ katmanında Router, taşıma katmanında ise NAT gibi donanımlar kullanılır.\nKaynak\n","permalink":"https://yazilim.aykutasil.com/tcpip-nedir_nasil_calisir/","summary":"TCP/IP Nasıl Çalışır ? Bilgisayar ağları kullanılarak bilgisayarların birbirileriyle haberleşmeye başladıkları ilk yıllarda iki bilgisayarın birbiriyle haberleşebilmeleri için aynı marka/model cihazları kullanmaları gerekiyordu. Bunun üzerine farklı üreticiler tarafından üretilen cihazların birbiriyle sorunsuz ve belirli bir düzen içinde haberleşebilmesi için çeşitli standartlar geliştirilmiştir.\nBunlardan en çok kullanılanı Açık Sistem Bağlantıları komitesi tarafından geliştirilen 7 katmanlı OSI referans modeli ve Amerikan Savunma Bakanlığı tarafından geliştirilen TCP/IP referans modelidir. OSI iki bilgisayar arasındaki haberleşme problemini çözmek için 7 katmanlı (aşamalı) bir ağ sistemi önermiştir.","title":"TCP/IP Nasıl Çalışır ?"},{"content":"Android uygulaması yazarken bazı oluşturmuş olduğunuz yapıları tekrar tekrar yazmak durumunda kalıyorsanız, sizin de artık kendi kütüphanenizi yazmanızın zamanı gelmiş geçiyor demektir. Böyle bir durum söz konusu olmak zorunda değil tabi library oluşturmak için 🙂\nBu yazının konusu Android Library oluşturmak, oluşturmuş olduğumuz bu kütüphaneyi maven ve jcenter repository e deploy etmek olucak.\nVe başlayabiliriz.\nİlk olarak Android Studio yu açarak File \u0026gt; New \u0026gt; New Project e tıklayıp yeni bir proje oluşturalım.\nDaha sonra oluşturmuş olduğunuz app e sağ tıklayıp New \u0026gt; Module sekmesinden gerekli yerleri doldurup projemize ekleyelim.\nOluşturmuş olduğumuz module içerisine kodlarımızı yazıyoruz. Module ümüzün sanki bir projeymiş gibi kendine ait dosyaları vardır. Yani kendine ait bir AndroidManifest.xml dosyası , kendine ait drawable klasörü vs. vardı. İstediğimiz şekilde özelleştirme yapabilir ve istediğimiz herhangi bir projede bu kodları kullanabiliriz.(Zaten yapılmış olanları bu şekilde kullanıyoruz. Neyin nasıl yapıldığını anlamak her zaman için ufkumuzu genişletecektir…)\nKodlarımızı yazdık. Sıra geldi module ümüzün gradle dosyasını düzenlemeye.\nAma bundan önce Project düzeyindeki gradle dosyasını güncellememiz gerekli.\nbuildscript {  repositories {  jcenter()  }  dependencies {  classpath \u0026#39;com.android.tools.build:gradle:2.1.0\u0026#39;  classpath \u0026#39;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4\u0026#39;  classpath \u0026#39;com.github.dcendents:android-maven-gradle-plugin:1.3\u0026#39;  } }  allprojects {  repositories {  jcenter()  } }  task clean(type: Delete) {  delete rootProject.buildDir } Ve module ümüzün gradle dosyasını düzenliyoruz.\napply plugin: \u0026#39;com.android.library\u0026#39; apply plugin: \u0026#39;com.github.dcendents.android-maven\u0026#39; // maven repository e eklememiz için gerekli gradle plugin apply plugin: \u0026#34;com.jfrog.bintray\u0026#34; // bintray yapılandırması yapmamız için gerekli gradle plugin // Kodların devamında göreceğiniz hazır yazılmış gradle tasklerini getiren yapıda, güncellenmesi gereken yerleri // bu şekilde düzenliyoruz. ext { PUBLISH_GROUP_ID = \u0026#39;com.aykuttasil\u0026#39; PUBLISH_ARTIFACT_ID = \u0026#39;androidbasichelper\u0026#39; PUBLISH_VERSION = \u0026#39;1.0.0\u0026#39; } android { compileSdkVersion 23 buildToolsVersion \u0026#34;23.0.3\u0026#34; defaultConfig { minSdkVersion 17 targetSdkVersion 23 versionCode 1 versionName \u0026#34;1.0.0\u0026#34; } buildTypes { release { minifyEnabled false proguardFiles getDefaultProguardFile(\u0026#39;proguard-android.txt\u0026#39;), \u0026#39;proguard-rules.pro\u0026#39; } } } // Oluşturmuş olduğumuz kütüphane aşağıdaki bağımlılıklara sahip. Sanki bir uygulama geliştiriyormuş gibi // bağımlılık dosyalarını ekliyoruz. dependencies { testCompile \u0026#39;junit:junit:4.12\u0026#39; compile \u0026#39;com.android.support:appcompat-v7:23.4.0\u0026#39; compile \u0026#39;com.afollestad.material-dialogs:core:0.8.5.9\u0026#39; compile \u0026#39;com.joanzapata.iconify:android-iconify-fontawesome:2.1.1\u0026#39; compile \u0026#39;com.android.support:appcompat-v7:23.4.0\u0026#39; compile \u0026#39;com.android.support:design:23.4.0\u0026#39; } // Aşağıda ki linke girip bakarsanız aslında gradle task yazılmış olduğunu görürsünüz. Bu yazılan task ler ile // oluşturmuş olduğumuz module dosyalarından gerekli dosyalara dönüşümlerini sağlıyoruz. apply from: \u0026#39;https://raw.githubusercontent.com/blundell/release-android-library/master/android-release-aar.gradle\u0026#39; def siteUrl = \u0026#39;https://github.com/aykuttasil/AndroidBasicHelper\u0026#39; // Homepage URL of the library def gitUrl = \u0026#39;https://github.com/aykuttasil/AndroidBasicHelper.git\u0026#39; // Git repository URL group = \u0026#34;com.aykuttasil\u0026#34; install { repositories.mavenInstaller { pom { project { packaging \u0026#39;aar\u0026#39; name \u0026#39;com.aykuttasil:androidbasichelper\u0026#39; // TODO description = \u0026#39;Android Basic Helper\u0026#39; // TODO url siteUrl // Set your license licenses { license { name \u0026#39;The Apache Software License, Version 2.0\u0026#39; url \u0026#39;http://www.apache.org/licenses/LICENSE-2.0.txt\u0026#39; } } developers { developer { id \u0026#39;aykuttasil\u0026#39; // TODO name \u0026#39;Aykut Asil\u0026#39; // TODO email \u0026#39;aykuttasil@gmail.com\u0026#39; // TODO } } scm { connection gitUrl developerConnection gitUrl url siteUrl } } } } } Evet gradle dosyalarını düzenledik. Sıra geldi çalıştırmaya.\nBunun için Android Studio içerisinde ki Terminal kısmına giriyoruz ya da mac in kendi Terminal ini açarak projemizin dizinine giriyoruz.\nVe aşağıdaki komutu giriyoruz.\n./gradlew clean build generateRelease\nEvet işlemimize başarılı bir şekilde tamamladık ve gerekli dosyaların oluşturulmasını sağladık.\nProjemizi oluşturduğumuz klasöre gidelim ve ModuleName \u0026gt; build içerisine girerek oluşturulan zip dosyasını görebiliriz. Bu zip dosyasının içini açarak oluşturulan dosyaları görebilirsiniz. Ve maven repository e bu zip dosyasını ekliceğimizi unutmayın.\n Sıra geldi kütüphanemizi maven ve jcenter repository e deploy etmeye.\nİlk olarak https://bintray.com/ adresine girerek üyeliğimizi oluşturuyoruz. Ve sırasıyla aşağıdaki işlemleri yapıyoruz.\nHesabımızı oluşturduktan sonra maven içerisine girerek Add New Package diyoruz.\nAşağıdaki alanlara gerekli bilgileri giriyoruz.\nDaha sonra oluşturmuş olduğumuz package ın içerisine girerek New Version a tıklıyoruz ve 1.0.0 şeklinde ya da istediğiniz şekilde Name i düzenliyoruz.\nOluşturmuş olduğumuz versiyon içerisine girerek Upload Files diyoruz ve daha önce oluşturduğumuz zip dosyasını seçerek upload işlemini tamamlıyoruz.\nKütüphanemizi maven respository yüklemiş bulunmaktayız.\nFakat Android Studio default olarak jcenter resository kullanmakta. Biz de bu yüzden birkaç işlem daha yapmalıyız ki geliştiriciler kolayca, tek satır ekleyerek kütüphanemizi kullanmaya başlasınlar.\nAşağıda ki sayfaya gelerek Add to jCenter butonuna tıklıyoruz.\nVe aşağıdaki gibi gerekli yerleri doldurarak işlemimizi tamamlıyoruz.\nNot : Kütüphanemizin kullanımı için birkaç saat beklememiz gerekmektedir. Olmadı diye telaş yapıp kafayı yemeyin 😉\nBu arada oluşturmuş olduğumuz kütüphanemize aşağıda ki linkten erişip projelerinizde gönül rahatlığıyla kullanabilirsiniz 🙂\n  Gradle : compile ‘com.aykuttasil:androidbasichelper:1.0.0’\n  GitHub : https://github.com/aykuttasil/AndroidBasicHelper\n   Yukarıda ki yöntem ile local inizde aar dosyası oluşturarak manuel bir şekilde bu aar yi repository lere yükleyebilirsiniz.\nPeki bunu sadece birkaç komuta indirgesek ve otomatik yüklemeyi sağlasak nasıl olur ? Bencede güzel olur.\nYukarıda ki yöntemin yine bir benzeri (daha okunabilir ve kolay) ve artı ilaveleri şeklinde devam edelim.\nYeni dosya yapımız ve gradle dosyalarımızı yeri aşağıdaki resimdeki gibi olmalı. Burada 3 adet kendimizin oluşturduğu gradle dosyasını görüyorsunuz gradle klasörünün altında. Diğer gradle lar zaten Android Studio tarafından oluşturuluyor.\nbuild.gradle dosyalarımızın içeriği aşağıdaki gibidir.\next { bintrayRepo = \u0026#39;maven\u0026#39; // maven reposu olduğunu belirtiyoruz bintrayName = \u0026#39;basic-helper\u0026#39; orgName = \u0026#39;aykuttasil\u0026#39; publishedGroupId = \u0026#39;com.aykuttasil\u0026#39; libraryName = \u0026#39;Android Basic Helper\u0026#39; artifact = \u0026#39;androidbasichelperlib\u0026#39; // module ile aynı isimde olması gerekiyor !! libraryDescription = \u0026#39;Android Basic Helper\u0026#39; siteUrl = \u0026#39;https://github.com/aykuttasil/AndroidBasicHelper\u0026#39; gitUrl = \u0026#39;https://github.com/aykuttasil/AndroidBasicHelper.git\u0026#39; libraryVersion = rootProject.ext.libraryVersion developerId = \u0026#39;aykuttasil\u0026#39; developerName = \u0026#39;Aykut Asil\u0026#39; developerEmail = \u0026#39;aykuttasil@gmail.com\u0026#39; licenseName = \u0026#39;The Apache Software License, Version 2.0\u0026#39; licenseUrl = \u0026#39;http://www.apache.org/licenses/LICENSE-2.0.txt\u0026#39; allLicenses = [\u0026#34;Apache-2.0\u0026#34;] } if (project.rootProject.file(\u0026#39;local.properties\u0026#39;).exists()) { apply from: rootProject.file(\u0026#39;gradle/install-v1.gradle\u0026#39;) apply from: rootProject.file(\u0026#39;gradle/bintray-android-v1.gradle\u0026#39;) } // ./gradlew clean install bintrayUpload ext { sdk = 24 buildTools = \u0026#34;24.0.1\u0026#34; minSdk = 17 libraryVersion = \u0026#34;1.0.20\u0026#34; libraryVersionCode = 11 supportVersion = \u0026#34;24.2.0\u0026#34; } Aşağıda ki resimde gördüğünüz gibi (Android Studio Project görünümüne geçmelisiniz) 3 adet gradle dosyamızı hazırladık. Kod kalabalığı olmasın ve neyin nerede olduğu belli olsun diye bu şekilde yaptık. Yoksa direk build.gradle dosyamızın içine de yazabilirdik.\napply plugin: \u0026#39;com.github.dcendents.android-maven\u0026#39; group = publishedGroupId // Maven Group ID for the artifact install { repositories.mavenInstaller { // This generates POM.xml with proper parameters pom { project { packaging \u0026#39;aar\u0026#39; groupId publishedGroupId artifactId artifact // Add your description here name libraryName description libraryDescription url siteUrl // Set your license licenses { license { name licenseName url licenseUrl } } developers { developer { id developerId name developerName email developerEmail } } scm { connection gitUrl developerConnection gitUrl url siteUrl } } } } } //from https://github.com/workarounds/bundler/blob/master/gradle/install-v1.gradle apply plugin: \u0026#39;com.jfrog.bintray\u0026#39; version = libraryVersion task sourcesJar(type: Jar) { from sourceSets.main.allSource classifier = \u0026#39;sources\u0026#39; } task javadocJar(type: Jar, dependsOn: javadoc) { classifier = \u0026#39;javadoc\u0026#39; from javadoc.destinationDir } artifacts { archives javadocJar archives sourcesJar } // Bintray Properties properties = new Properties() properties.load(project.rootProject.file(\u0026#39;local.properties\u0026#39;).newDataInputStream()) bintray { user = properties.getProperty(\u0026#34;bintray.user\u0026#34;) key = properties.getProperty(\u0026#34;bintray.apikey\u0026#34;) configurations = [\u0026#39;archives\u0026#39;] pkg { repo = bintrayRepo name = bintrayName desc = libraryDescription userOrg = orgName websiteUrl = siteUrl vcsUrl = gitUrl licenses = [\u0026#39;Apache-2.0\u0026#39;] publish = true publicDownloadNumbers = true version { desc = libraryDescription gpg { sign = true //Determines whether to GPG sign the files. The default is false passphrase = properties.getProperty(\u0026#34;bintray.gpg.password\u0026#34;) //Optional. The passphrase for GPG signing\u0026#39; } } } } //from https://github.com/workarounds/bundler/blob/master/gradle/bintray-java-v1.gradle apply plugin: \u0026#39;com.jfrog.bintray\u0026#39; version = libraryVersion task sourcesJar(type: Jar) { from android.sourceSets.main.java.srcDirs classifier = \u0026#39;sources\u0026#39; } task javadoc(type: Javadoc) { failOnError = false source = android.sourceSets.main.java.srcDirs classpath += project.files(android.getBootClasspath().join(File.pathSeparator)) } task javadocJar(type: Jar, dependsOn: javadoc) { classifier = \u0026#39;javadoc\u0026#39; from javadoc.destinationDir } artifacts { archives javadocJar archives sourcesJar } // Bintray Properties properties = new Properties() properties.load(project.rootProject.file(\u0026#39;local.properties\u0026#39;).newDataInputStream()) bintray { user = properties.getProperty(\u0026#34;bintray.user\u0026#34;) key = properties.getProperty(\u0026#34;bintray.apikey\u0026#34;) configurations = [\u0026#39;archives\u0026#39;] pkg { repo = bintrayRepo name = bintrayName desc = libraryDescription userOrg = orgName websiteUrl = siteUrl vcsUrl = gitUrl licenses = allLicenses publish = true publicDownloadNumbers = true version { desc = libraryDescription gpg { sign = true //Determines whether to GPG sign the files. The default is false passphrase = properties.getProperty(\u0026#34;bintray.gpg.password\u0026#34;) //Optional. The passphrase for GPG signing\u0026#39; } } } } Tüm bu dosya yapısını hazırladıktan sonra bintray konfigürasyonu için birkaç işlem daha kaldı.\nlocal.properties dosyamızın içine bintray bilgilerimizi giriyoruz. Bu bilgileri direk build.gradle içerisine girebilirdik fakat bu bilgilere sadece biz sahip olmalıyız 🙂 ve gitignore un içinde local.properties dosyasının ekli olduğuna dikkat edelim !!\nBintray api key almak için bintray sitesine giderek gerekli sayfaya ulaşıyoruz.\nEvet tüm işlemler bu kadar.\nArtık terminalden aşağıdaki komutu yazarak otomatik yüklenmeyi sağlayabiliriz.\n./gradlew clean install bintrayUpload\n","permalink":"https://yazilim.aykutasil.com/android-create-library-upload-bintray/","summary":"Android uygulaması yazarken bazı oluşturmuş olduğunuz yapıları tekrar tekrar yazmak durumunda kalıyorsanız, sizin de artık kendi kütüphanenizi yazmanızın zamanı gelmiş geçiyor demektir. Böyle bir durum söz konusu olmak zorunda değil tabi library oluşturmak için 🙂\nBu yazının konusu Android Library oluşturmak, oluşturmuş olduğumuz bu kütüphaneyi maven ve jcenter repository e deploy etmek olucak.\nVe başlayabiliriz.\nİlk olarak Android Studio yu açarak File \u0026gt; New \u0026gt; New Project e tıklayıp yeni bir proje oluşturalım.","title":"Android Library \u0026 Bintray"},{"content":"Yavaş yavaş mevcut android cihazlarının API level düzeyi doğal olarak yükselmekte ve bizlerinde tabi ki buna ayak uydurması gerekmekte.\nBunlardan biri de Android M – Marshmallow (23) ile gelen Runtime Permissions olayı.\nKullanıcı açısından bakıldığında oldukça yararlı birşey gibi duruyor ama tabi ki biz kullanıcılar runtime sırasında çıkan permission dialog daki yazıyı ne kadar okuruz ve buna göre onay veririz meçhul. Aslına bakarsanız çok da okunacağını düşünmüyorum ama olsun yine de güzel. İlerleyen zamanlarda illa ki bu alışkanlığı edinecek insanlar olacaktır 😉\nFazla uzatmadan birkaç link ve ipucu vericem.\nAndroid Runtime Permissions olayının nasıl yapıldığını görmek için\n  Link : https://github.com/googlesamples/android-RuntimePermissions burada süper bir örnek var.\n  Link : http://android-developers.blogspot.com.tr/2015/08/building-better-apps-with-runtime.html burada kısa bir özet var.\n  Takıldığınız yeri yorumlarda belirtebilirsiniz.\nNot : Örneği incelediğiniz de şu satırı yazarken dikkat edin.\nActivityCompat.requestPermissions(this, new String[]{android.Manifest.permission.CAMERA},123456);\nburada sadece\nManifest.permission.CAMERA\nyerine\nandroid.Manifest.permission.CAMERA\nkullanacaksınız. Yoksa izin listesini bulamaz.\n","permalink":"https://yazilim.aykutasil.com/android-runtime-permission/","summary":"Yavaş yavaş mevcut android cihazlarının API level düzeyi doğal olarak yükselmekte ve bizlerinde tabi ki buna ayak uydurması gerekmekte.\nBunlardan biri de Android M – Marshmallow (23) ile gelen Runtime Permissions olayı.\nKullanıcı açısından bakıldığında oldukça yararlı birşey gibi duruyor ama tabi ki biz kullanıcılar runtime sırasında çıkan permission dialog daki yazıyı ne kadar okuruz ve buna göre onay veririz meçhul. Aslına bakarsanız çok da okunacağını düşünmüyorum ama olsun yine de güzel.","title":"Android Runtime Permission"},{"content":"Sizde benim gibi klon Arduino Uno kartınızı çalıştıramayıp bozuk zannettiyseniz doğru yerdesiniz.\nArduino Uno klon kartlarında orijinal Arduino Uno kartına göre farklı bir işlemci kullanılmış ( daha ucuz olanından 😉 ) ve bu yüzden Mac OS kullanıyorsanız ayrı bir driver dosyası indirmeniz gerekmekte.\nOrijinal Arduino Kartlarının yapımı iki koldan yürüyor. Bir taraf open source u destekleyen diğer taraf parayı destekleyen insanlardan oluşuyor(muş).\n  http://www.arduino.cc Parayı destekleyen tarafın sitesi\n  http://www.arduino.org Open source u destekleyen taraf\n  Ben arduino.org daki Arduino IDE yi kurdum çünkü diğerinde birkaç sorun yaşamıştım ama günün sonunda her iki siteden indirdiğiniz IDE ile de geliştirme yapabilirsiniz.\nDedikten sonra;\nMac OS a klon Arduino Uno driverını yüklemek için (CH341) -\u0026gt; http://www.wch.cn/download/CH341SER_MAC_ZIP.html linkinden dosyayı indirin. Çince ama idare edin, Download a basmanız yeter 😉\nYa da bu linki kullanabilirsiniz : http://javacolors.blogspot.com.tr/2014/08/dccduino-usb-drivers-ch340-ch341-chipset.html\nDaha sonra terminal e açarak aşağıdaki komutu yazın.\nsudo nvram boot-args=\u0026#34;kext-dev-mode=1\u0026#34; Makineye yeniden başlatın. Artık Arduino Uno yu Mac OS görüyor olması lazım.\nOlmadı şu linke bir göz atabilirsin : http://arduino.stackexchange.com/questions/12133/mac-osx-yosemite-no-serial-ports-showing-for-uno-r3\nYa da şu video yu izleyebilirsin : https://www.youtube.com/watch?v=oHqYK1ezRzo\nOlduysa Arduino IDE nizden port ayarlarını yapmayı unutmayın.\n","permalink":"https://yazilim.aykutasil.com/macos-arduino-uno-klon-kurulum/","summary":"Sizde benim gibi klon Arduino Uno kartınızı çalıştıramayıp bozuk zannettiyseniz doğru yerdesiniz.\nArduino Uno klon kartlarında orijinal Arduino Uno kartına göre farklı bir işlemci kullanılmış ( daha ucuz olanından 😉 ) ve bu yüzden Mac OS kullanıyorsanız ayrı bir driver dosyası indirmeniz gerekmekte.\nOrijinal Arduino Kartlarının yapımı iki koldan yürüyor. Bir taraf open source u destekleyen diğer taraf parayı destekleyen insanlardan oluşuyor(muş).\n  http://www.arduino.cc Parayı destekleyen tarafın sitesi\n  http://www.","title":"Mac OS Arduino Uno (Klon) Kurulumu"},{"content":"Kısaca özetlemek gerekirse : insert ile kayıt edilen tablo satırının id\u0026rsquo;sini getirir.\nYapılan son kaydın id sini almak için uzun yol olarak insert sorgusunu çalıştırdıktan sonra bir select sorgusu atarak ve order by id desc diyerek ilk sıradaki kaydı okuyabilir ve bu kaydın id sini alabiliriz.\nTüm bunları yapmaktansa:\nDECLARE @son_satir_id INT;  INSERT INTO tbQwerty  (  Ad ,  Soyad  ) VALUES (  \u0026#39;Aykut\u0026#39;  \u0026#39;Asil\u0026#39;  ) SET @son_satir_id = SCOPE_IDENTITY(); Ayrıntılı Bilgi : https://technet.microsoft.com/tr-tr/library/ms190315(v=sql.110).aspx\nAyrıntılı Bilgi : https://ahmetrende.com/2010/11/23/sql-serverda-son-kaydin-id-degerini-almak-scope_identity/\n","permalink":"https://yazilim.aykutasil.com/sql-scope-identity/","summary":"Kısaca özetlemek gerekirse : insert ile kayıt edilen tablo satırının id\u0026rsquo;sini getirir.\nYapılan son kaydın id sini almak için uzun yol olarak insert sorgusunu çalıştırdıktan sonra bir select sorgusu atarak ve order by id desc diyerek ilk sıradaki kaydı okuyabilir ve bu kaydın id sini alabiliriz.\nTüm bunları yapmaktansa:\nDECLARE @son_satir_id INT;  INSERT INTO tbQwerty  (  Ad ,  Soyad  ) VALUES (  \u0026#39;Aykut\u0026#39;  \u0026#39;Asil\u0026#39;  ) SET @son_satir_id = SCOPE_IDENTITY(); Ayrıntılı Bilgi : https://technet.","title":"SQL SCOPE_IDENTITY()"},{"content":"Saatlerdir uğraştığım ve javascriptle temel düzeyden biraz daha ileri düzeyde uğraşan kişilerin başına gelebilecek bir saçmalığı belirtmek istiyorum.\nHer dilde var olan Replace fonksiyonu Javascript de saçma sapan bir şekilde yapılandırılmış. Bu kadar basit bir şeyi bu kadar komplike bir vaziyete sokmak gerçekten harika.\nÖrneğin elinizde\nvar degisken = ‘İSTANBUL’ ;\nşeklinde bir değişkeniniz var. Ve siz ihtiyacınız doğrultusunda bu kelimeyi veritabanından çektiğiniz ‘istanbul’ kelimesi ile karşılaştırmak istiyorsunuz.\n $(\u0026#39;#Iller \u0026gt; option\u0026#39;).each(function(index) {  var il = \u0026#39;istanbul\u0026#39;; // veritabanından çektiğimizi düşünelim   var txt = $(this).text() // -\u0026gt; \u0026#39;İSTANBUL\u0026#39;  if (txt === il) {  // Diğer işlemler  }  }); Yukarıda\nif (txt === il) ile eşitlik kontrol ediliyor.\nVe true değeri dönmüyor. Çünkü biri küçük diğeri büyük harfle yazılmış. Gayet normal.\nPeki tamam.\nBüyük yazılan ‘İSTANBUL’ kelimesini javascript in çok değerli toLowerCase() fonksiyonu ile küçültüyoruz.\nvar txt = txt.toLowerCase(); // -\u0026gt; 'istanbul'\nEvet ikisi de ‘istanbul’ oldu artık. Peki şimdi yukarıda belirttiğimiz eşitlik sağlanıcak mı ?\nHAYIR !\nÇünkü ‘İSTANBUL’ değişkenini Javascript abimiz küçültürken, büyük ‘İ’ harfiyle sevişiyor. Ve eşitlik bir türlü sağlanamıyor.\nBirde çok değerli Javascript abimizin ( dünya ahiret bacım bu saatten sonra) replace fonksiyonu efsane çalışıyor.\nReplace olmasını istediğimiz değerin sadece ilkini değiştiriyor. Diğerleri pek umrunda değil. Bu nedenle /İ/g fln saçma salak bişiler yapmak gerekiyor.\nAşağıda ki fonksiyonu çözüm için kullanabilirsiniz.\nBu dile şuan – günümüzde (31/03/2016) çok da güvenmeyin abiler ablalar !. Zaten kısa bir araştırma sonrasında Javascript tutarsızlıklarıyla ilgili bir sürü dökümana ulaşabilirsiniz. Not: Esneklik beraberinde hata getirir.\nÇözüm (Gerçekten bu yazıyı yazarken sinirliyim !)\n function clearText(text) {  return text.replace(/İ/g, \u0026#34;i\u0026#34;).replace(/Ş/g, \u0026#34;s\u0026#34;).replace(/Ü/g, \u0026#34;u\u0026#34;).replace(/Ö/g, \u0026#34;o\u0026#34;).replace(/Ç/g, \u0026#34;c\u0026#34;)  .toLowerCase()  .replace(/ü/g, \u0026#34;u\u0026#34;).replace(/ı/g, \u0026#34;i\u0026#34;).replace(/ç/g, \u0026#34;c\u0026#34;)  .replace(/ğ/g, \u0026#34;g\u0026#34;).replace(/ş/g, \u0026#34;s\u0026#34;).replace(/ö/g, \u0026#34;o\u0026#34;);   } ","permalink":"https://yazilim.aykutasil.com/javascript-gariplikleri/","summary":"Saatlerdir uğraştığım ve javascriptle temel düzeyden biraz daha ileri düzeyde uğraşan kişilerin başına gelebilecek bir saçmalığı belirtmek istiyorum.\nHer dilde var olan Replace fonksiyonu Javascript de saçma sapan bir şekilde yapılandırılmış. Bu kadar basit bir şeyi bu kadar komplike bir vaziyete sokmak gerçekten harika.\nÖrneğin elinizde\nvar degisken = ‘İSTANBUL’ ;\nşeklinde bir değişkeniniz var. Ve siz ihtiyacınız doğrultusunda bu kelimeyi veritabanından çektiğiniz ‘istanbul’ kelimesi ile karşılaştırmak istiyorsunuz.\n $(\u0026#39;#Iller \u0026gt; option\u0026#39;).","title":"Javascript Gariplikleri"},{"content":"Google ın resim işlemleri için geliştirmiş olduğu Glide kütüphanesi Android kaynaklarını, cache mekanizmasını vs. verimli şekilde kullanarak uygulamanıza hız ve kalite kazandırır.\nSizde projenizde resimlerle ilgili herhangi bir işlem yapıyorsanız bu kütüphaneyi incelemenizi tavsiye ediyorum.\n  Github : https://github.com/bumptech/glide\n  Gradle : compile ‘com.github.florent37:glidepalette:1.0.6’\n  Google ın geliştirmiş olduğu Palette kütüphanesi ise, resimlerinizin renkleriyle ilgilenir. Daha farklı işlemler içinde kullanılabilir resim boyutlandırma vs. gibi. Ama renklerle ilgili işlemler için oldukça güzel bir kütüphanedir.\nLink : Android Developer\n Gradle : compile ‘com.android.support:palette-v7:23.1.1’  Bu iki güzel kütüphanenin birlikte kullanımı ile oldukça güzel işler çıkabilir\nBunun için de bir kütüphane mevcut 🙂\n Github : https://github.com/florent37/GlidePalette   Glide.with(mContext).load(\u0026#34;ImageAdress\u0026#34;)  // Her resim için farklı bir signature belirtmeliyiz. Bu sayede resimlerin tekrar tekrar yüklenmesini engellemiş oluruz.  .signature(new StringSignature(\u0026#34;ImageSignature\u0026#34;))  .centerCrop()  .listener(GlidePalette.with(\u0026#34;ImageAdress\u0026#34;)  .use(GlidePalette.Profile.VIBRANT_LIGHT)  .intoTextColor(txt, GlidePalette.Swatch.BODY_TEXT_COLOR)  .crossfade(true)   // Belirttiğimiz ImageAdress den gelen resmimiz kullanılmaya hazır olduğunda burada yakalayabilir ve  // istediğimiz özelleştirmeyi yapabiliriz.  // Biz burada yüklenen resmin palette.getDarkMutedColor(DefaultColor) fonksiyonu ile rengini yakalıyoruz ve CollapsingToolbar ın expand olduğu durumda ki title rengini değiştiriyoruz.  .intoCallBack(new BitmapPalette.CallBack() {  @Override  public void onPaletteLoaded(@Nullable Palette palette) {  mCollapsingToolbar.setExpandedTitleColor(palette.getDarkMutedColor(Color.BLACK));  }  })  /* .setGlideListener(new RequestListener\u0026lt;String, GlideDrawable\u0026gt;() { @Override public boolean onException(Exception e, String model, Target\u0026lt;GlideDrawable\u0026gt; target, boolean isFirstResource) { return false; } @Override public boolean onResourceReady(GlideDrawable resource, String model, Target\u0026lt;GlideDrawable\u0026gt; target, boolean isFromMemoryCache, boolean isFirstResource) { return false; } }) // optional: do stuff with the builder .setPaletteBuilderInterceptor(new BitmapPalette.PaletteBuilderInterceptor() { @NonNull @Override public Palette.Builder intercept(Palette.Builder builder) { return builder.resizeBitmapSize(100); } }) */  )  .into(mCollapsingImageView); ","permalink":"https://yazilim.aykutasil.com/android-glide-ve-palette-kullanimi/","summary":"Google ın resim işlemleri için geliştirmiş olduğu Glide kütüphanesi Android kaynaklarını, cache mekanizmasını vs. verimli şekilde kullanarak uygulamanıza hız ve kalite kazandırır.\nSizde projenizde resimlerle ilgili herhangi bir işlem yapıyorsanız bu kütüphaneyi incelemenizi tavsiye ediyorum.\n  Github : https://github.com/bumptech/glide\n  Gradle : compile ‘com.github.florent37:glidepalette:1.0.6’\n  Google ın geliştirmiş olduğu Palette kütüphanesi ise, resimlerinizin renkleriyle ilgilenir. Daha farklı işlemler içinde kullanılabilir resim boyutlandırma vs. gibi. Ama renklerle ilgili işlemler için oldukça güzel bir kütüphanedir.","title":"Android Glide ve Palette Kullanımı"},{"content":"Android ViewPager yapısı içerisinde birçok hazır fonksiyonu, animasyonu ve özelleştirilebilir kontrolleri barındırır.\nİhtiyaçlarımız doğrultusunda bu yapıyı özelleştirebilir ve ViewPager ın bize sunmuş olduğu rahatlığı kullanabiliriz.\n","permalink":"https://yazilim.aykutasil.com/android-viewpager/","summary":"Android ViewPager yapısı içerisinde birçok hazır fonksiyonu, animasyonu ve özelleştirilebilir kontrolleri barındırır.\nİhtiyaçlarımız doğrultusunda bu yapıyı özelleştirebilir ve ViewPager ın bize sunmuş olduğu rahatlığı kullanabiliriz.","title":"Android ViewPager"},{"content":"Collections.swap Swap kelime anlamı ile takas anlamına gelmektedir. Mevcut dizimiz içerisinde elemanların yerlerini değiştirmeye yarar.\nprivate static final String[] STRINGS = new String[]{  \u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34; };  private final List mItems = new ArrayList\u0026lt;\u0026gt;(); public void setArray() {  mItems.addAll(Arrays.asList(STRINGS)); } mItems listemizi yazdırdığımızda sonuç şu şekilde olacaktır.  // 1,2,3,4,5  private void elemanYerDegistir() {  Collections.swap(mItems, 0, 4); } mItems listemizi yazdırdığımızda sonuç şu şekilde olacaktır.  // 5,2,3,4,1 ","permalink":"https://yazilim.aykutasil.com/java-collections/","summary":"Collections.swap Swap kelime anlamı ile takas anlamına gelmektedir. Mevcut dizimiz içerisinde elemanların yerlerini değiştirmeye yarar.\nprivate static final String[] STRINGS = new String[]{  \u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34; };  private final List mItems = new ArrayList\u0026lt;\u0026gt;(); public void setArray() {  mItems.addAll(Arrays.asList(STRINGS)); } mItems listemizi yazdırdığımızda sonuç şu şekilde olacaktır.  // 1,2,3,4,5  private void elemanYerDegistir() {  Collections.swap(mItems, 0, 4); } mItems listemizi yazdırdığımızda sonuç şu şekilde olacaktır.","title":"Java Collections"},{"content":"Android Toolbar Android Toolbar bileşeni çok yönlü bir yapıya sahiptir. Android Design Library kullanarak ve AppBarLayout içerisinde tanımlanarak oldukça farklı şekillere bürünebilir.\nGenel kullanımı aşağıdaki gibidir.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;android.support.design.widget.CoordinatorLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;  xmlns:app=\u0026#34;http://schemas.android.com/apk/res-auto\u0026#34;  xmlns:tools=\u0026#34;http://schemas.android.com/tools\u0026#34;  android:layout_width=\u0026#34;match_parent\u0026#34;  android:layout_height=\u0026#34;match_parent\u0026#34;  android:background=\u0026#34;@color/primary_dark\u0026#34;  tools:context=\u0026#34;.MainActivity\u0026#34;\u0026gt;   \u0026lt;FrameLayout  android:id=\u0026#34;@+id/container\u0026#34;  android:layout_width=\u0026#34;match_parent\u0026#34;  android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt;   \u0026lt;/FrameLayout\u0026gt;    \u0026lt;android.support.design.widget.FloatingActionButton  android:id=\u0026#34;@+id/fab\u0026#34;  android:layout_width=\u0026#34;wrap_content\u0026#34;  android:layout_height=\u0026#34;wrap_content\u0026#34;  android:layout_gravity=\u0026#34;bottom|end\u0026#34;  android:layout_margin=\u0026#34;@dimen/fab_margin\u0026#34;  android:src=\u0026#34;@android:drawable/ic_dialog_email\u0026#34; /\u0026gt;    \u0026lt;android.support.design.widget.AppBarLayout  android:layout_width=\u0026#34;match_parent\u0026#34;  android:layout_height=\u0026#34;wrap_content\u0026#34;  app:elevation=\u0026#34;0dp\u0026#34;\u0026gt;   \u0026lt;android.support.v7.widget.Toolbar  android:id=\u0026#34;@+id/toolbar\u0026#34;  android:layout_width=\u0026#34;match_parent\u0026#34;  android:layout_height=\u0026#34;wrap_content\u0026#34;  android:background=\u0026#34;@color/primary_dark\u0026#34;  android:minHeight=\u0026#34;?attr/actionBarSize\u0026#34;  app:popupTheme=\u0026#34;@style/AppTheme.PopupOverlay\u0026#34;/\u0026gt;    \u0026lt;/android.support.design.widget.AppBarLayout\u0026gt;  \u0026lt;/android.support.design.widget.CoordinatorLayout\u0026gt; app:elevation=\u0026quot;0dp\u0026quot; // AppBarLayout içerisinde ki bu tanımlama default olarak tanımlanmış gölgeyi kaldırır.\nTanımlamış olduğumuz Toolbar a Activity içerisinden (ya da Fragment vb) erişerek gerekli tanımlamaları vs yapabilirsiniz.\n### Toolbar Custom Title\nToolbarınızı tanımladığınız yerde aşağıdaki değişiklikleri yaparak Title ınızı istediğiniz gibi özelleştirebilirsiniz.\n\u0026lt;android.support.design.widget.AppBarLayout  android:layout_width=\u0026#34;match_parent\u0026#34;  android:layout_height=\u0026#34;wrap_content\u0026#34;  app:elevation=\u0026#34;0dp\u0026#34;\u0026gt;   \u0026lt;android.support.v7.widget.Toolbar  android:id=\u0026#34;@+id/toolbar\u0026#34;  android:layout_width=\u0026#34;match_parent\u0026#34;  android:layout_height=\u0026#34;wrap_content\u0026#34;  android:background=\u0026#34;@color/primary_dark\u0026#34;  android:minHeight=\u0026#34;?attr/actionBarSize\u0026#34;  app:popupTheme=\u0026#34;@style/AppTheme.PopupOverlay\u0026#34;\u0026gt;   \u0026lt;TextView  android:id=\u0026#34;@+id/toolbar_title\u0026#34;  style=\u0026#34;@style/ToolbarTitleStyle\u0026#34;  android:layout_width=\u0026#34;wrap_content\u0026#34;  android:layout_height=\u0026#34;wrap_content\u0026#34;  android:layout_gravity=\u0026#34;center\u0026#34; /\u0026gt;  \u0026lt;/android.support.v7.widget.Toolbar\u0026gt;   \u0026lt;/android.support.design.widget.AppBarLayout\u0026gt; FragmentX  private void setToolbar() {  Toolbar toolbar = (Toolbar) mActivity.findViewById(R.id.toolbar);  mActivity.setSupportActionBar(toolbar);  mActivity.getSupportActionBar().setHomeButtonEnabled(true);  mActivity.getSupportActionBar().setDisplayHomeAsUpEnabled(true);  mActivity.getSupportActionBar().setDisplayShowTitleEnabled(false); // Default olarak tanımlanmış Title ın gösterilmemesini belirtiyoruz.  ((TextView) toolbar.findViewById(R.id.toolbar_title)).setText(\u0026#34;SORU SOR\u0026#34;); // Custom olarak belirlenmiş TextView e text ataması yapıyoruz. } ","permalink":"https://yazilim.aykutasil.com/android-custom-toolbar/","summary":"Android Toolbar Android Toolbar bileşeni çok yönlü bir yapıya sahiptir. Android Design Library kullanarak ve AppBarLayout içerisinde tanımlanarak oldukça farklı şekillere bürünebilir.\nGenel kullanımı aşağıdaki gibidir.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;android.support.design.widget.CoordinatorLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34;  xmlns:app=\u0026#34;http://schemas.android.com/apk/res-auto\u0026#34;  xmlns:tools=\u0026#34;http://schemas.android.com/tools\u0026#34;  android:layout_width=\u0026#34;match_parent\u0026#34;  android:layout_height=\u0026#34;match_parent\u0026#34;  android:background=\u0026#34;@color/primary_dark\u0026#34;  tools:context=\u0026#34;.MainActivity\u0026#34;\u0026gt;   \u0026lt;FrameLayout  android:id=\u0026#34;@+id/container\u0026#34;  android:layout_width=\u0026#34;match_parent\u0026#34;  android:layout_height=\u0026#34;match_parent\u0026#34;\u0026gt;   \u0026lt;/FrameLayout\u0026gt;    \u0026lt;android.support.design.widget.FloatingActionButton  android:id=\u0026#34;@+id/fab\u0026#34;  android:layout_width=\u0026#34;wrap_content\u0026#34;  android:layout_height=\u0026#34;wrap_content\u0026#34;  android:layout_gravity=\u0026#34;bottom|end\u0026#34;  android:layout_margin=\u0026#34;@dimen/fab_margin\u0026#34;  android:src=\u0026#34;@android:drawable/ic_dialog_email\u0026#34; /\u0026gt;    \u0026lt;android.","title":"Android Custom Toolbar Title"},{"content":"MSSQL oldukça gelişmiş ve birçok firma – kişi tarafından kullanılan bir veritabanın sistemidir. Oldukça büyük miktarda verinizi, doğru şekilde tasarlayarak tatmin edici derecede hızlı bir şekilde kontrol edebilirsiniz.\nSenaryomuz şu şekilde;\nMac OS yüklü bilgisayarımızdan MSSQL yüklü sunucumuza bağlantı kurmak istiyoruz.\nNot : Aşağıda bahsedecek olduğum uygulamayı Windows yüklü bilgisayarınızda da SQL Management Studio alternatifi olarak kullanabilirsiniz.\nDbeaver http://dbeaver.jkiss.org/download/\nTüm işletim sistemleri için sürüm mevcuttur. Kendi işletim sisteminize göre olanı indirip kullanmaya başlayabilirsiniz.\nDatabase Connection\nConnections a sağ tıklayarak Create New Connection diyoruz.\nBurada SSH yapılandırması yapabiliriz.\nConnection Type için seçenekler mevcut.Edit diyerek arasındaki farkları görebiliriz. Biz Test seçeneğini seçiyoruz.\nAşağıdaki gibi gerekli yerleri dolduruyoruz.\nHangi veritabanına bağlanmak istiyorsak onu seçiyoruz. Eğer ilk defa seçmiş iseniz bazı dosyalar indirmek isteyecektir.\nBiz MS SQL Server ve Microsoft Driver seçeneğini seçiyoruz.\nTest Connection butonuna basarak bağlantı durumunu kontrol edebiliriz.\n","permalink":"https://yazilim.aykutasil.com/macos-mssql-connection/","summary":"MSSQL oldukça gelişmiş ve birçok firma – kişi tarafından kullanılan bir veritabanın sistemidir. Oldukça büyük miktarda verinizi, doğru şekilde tasarlayarak tatmin edici derecede hızlı bir şekilde kontrol edebilirsiniz.\nSenaryomuz şu şekilde;\nMac OS yüklü bilgisayarımızdan MSSQL yüklü sunucumuza bağlantı kurmak istiyoruz.\nNot : Aşağıda bahsedecek olduğum uygulamayı Windows yüklü bilgisayarınızda da SQL Management Studio alternatifi olarak kullanabilirsiniz.\nDbeaver http://dbeaver.jkiss.org/download/\nTüm işletim sistemleri için sürüm mevcuttur. Kendi işletim sisteminize göre olanı indirip kullanmaya başlayabilirsiniz.","title":"Mac OS ile MSSQL Bağlantısı Kurmak"},{"content":"SQL Management Studio kullanarak MSSQL e erişim yapmanız size birçok fayda sağlayacaktır. Tabi dezavantajları da yok değil !.\nSenaryomuz şu şekilde; Test veritabanında çalışarak kendinizi production veritabanında izole ettiniz ve güvenlik konusunda bir adım öne geçtiniz. Test veritabanı ile işlemleriniz bittikten sonra artık sıra geldi oluşturmuş olduğumuz tüm yapıları taşımaya ! Bu kısım biraz sıkıcı olsa da SQL Management Studio nun buna getirmiş olduğu kolaylıklar var.\nOluşturmuş olduğumuz tabloların sadece şemasını yani içiindeki veriler olmaksızın taşımak istersek, ( ki bu durum default olarak yapılandıırlmış durumdur ) işimiz oldukça kolay.\nTest veritabanında ki tabloya sağ tıklayarak aşağıdaki gibi seçim yapmak.\n File seçeneği oluşturulan script in bir dosyaya kaydedilmesini Clipboard seçeneği hafızaya alınmasını ( NotDefteri \u0026gt; CTRL + V diyerek yapıştırabiliriz ) sağlar.  Tüm oluşturmuş olduğumuz yapıyı bu yöntem ile script haline getirebiliriz. Lakin şöyle bir sıkıntımız olduğunu varsayalım. Tablomuzu içindeki verilerle beraber taşımak istiyoruz. Yani script in verileride kapsamasını istiyoruz.\nBunun için ilk olarak tablomuzun bulunduğu veritabanına sağ tıklayarak aşağıdaki adımları gerçekleştiriyoruz.\n Aşağıdaki resimde görmüş olduğunuz Data only seçeneği sadece tabloda kayıtlı olan verilerin scriptini çıkarır. Schema and data seçeneği hem schema\u0026rsquo;nın hem de verilerin scriptini çıkarır. Schema only sadece tablonun schema sının scriptini çıkarır.  Son ekranda scriptimizin başarılı şekilde oluştuğunu görüyoruz.\n\u0026lt;/a\nOluşturmuş olduğumuz script i hangi veritabanında kullanmak istiyorsak oraya giderek query penceresine yapıştırmamız ve çalıştırmamız yeterli olacaktır.\n","permalink":"https://yazilim.aykutasil.com/sqlmanagement-custom-generate-scripts/","summary":"SQL Management Studio kullanarak MSSQL e erişim yapmanız size birçok fayda sağlayacaktır. Tabi dezavantajları da yok değil !.\nSenaryomuz şu şekilde; Test veritabanında çalışarak kendinizi production veritabanında izole ettiniz ve güvenlik konusunda bir adım öne geçtiniz. Test veritabanı ile işlemleriniz bittikten sonra artık sıra geldi oluşturmuş olduğumuz tüm yapıları taşımaya ! Bu kısım biraz sıkıcı olsa da SQL Management Studio nun buna getirmiş olduğu kolaylıklar var.\nOluşturmuş olduğumuz tabloların sadece şemasını yani içiindeki veriler olmaksızın taşımak istersek, ( ki bu durum default olarak yapılandıırlmış durumdur ) işimiz oldukça kolay.","title":"SQL Management Studio Custom Generate Scripts"},{"content":"Android service yapısı, Android’in temel bileşenlerinden olup genel kullanım amacı yan iş parçacığı oluşturmaktır. Uzun süren işlemler (download vb.) için olmazsa olmaz bileşendir. Android in service bileşenini kendi ihtiyaçlarınız doğrultusunda özelleştirebilir ve uygulamanızı modern bir yapıya kavuşturabilirsiniz.\nBurada yapacağımız örnekte kısaca şu aşamaları görücez;\n Service i foreground olarak başlatmak Ongoing(devamlı gözüken) notification oluşturmak GoogleApiClient a bağlanmak Location bilgisini notification da göstermek  İlk olarak Service imiz kodlarını yazalım. Gerekli açıklamalar kodların arasında mevcuttur.\nForegroundService.java\npublic class ForegroundService extends Service implements GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener {   private static final int LOCATION_NOTIF_ID = 859;  private static int LocationPeriod = 1000 * 30 ;   private static Notification notification;  private static GoogleApiClient _googleApiClient = null;  private static Context mContext;  private static NotificationCompat.Builder mBuilder;     @Override  public void onCreate() {  super.onCreate();  mContext = this;  mBuilder = new NotificationCompat.Builder(mContext);  }   @Nullable  @Override  public IBinder onBind(Intent intent) {  return null;  }   @Override  public int onStartCommand(Intent intent, int flags, int startId) {    // Eğer Service ilk defa çalıştırılıyor ise buildGoogleApiClient fonksiyonu ile GoogleApiClient build ediliyor  if (_googleApiClient == null) {  buildGoogleApiClient();  }  // GoogleApiClient a bağlanılıyor  _googleApiClient.connect();   // Notificaiton gösteriyoruz  LocationNotification(null, \u0026#34;Konum Bilgisi Yok\u0026#34;);   // Service imizi foreground olarak başlatıyoruz  // Foreground service bizden bir notification parametresi ister. Bunun sebebi sürekli ayakta olduğunu kullanıcıya bildirmektir.  startForeground(LOCATION_NOTIF_ID, notification);   // Herhangi bir sebeple service imizi durması halinde kendiliğinden tekrar başlaması için START_STICKY dönüyoruz.  return START_STICKY;  }    public synchronized void buildGoogleApiClient() {  if (_googleApiClient == null) {  _googleApiClient = new GoogleApiClient.Builder(this)  .addConnectionCallbacks(this)  .addOnConnectionFailedListener(this)  .addApi(LocationServices.API)  .build();  }  }    @Override  public void onConnected(@Nullable Bundle bundle) {  // GoogleApiClient a bağlanıldığında Location isteğinde bulunuyoruz.  LocationRequest();  }    @Override  public void onConnectionSuspended(int i) {   }    @Override  public void onConnectionFailed(ConnectionResult result) {  // tekrar bağlanmayı deniyoruz  _googleApiClient.connect();  }    private void LocationRequest() {    // PRIORITY_BALANCED_POWER_ACCURACY -\u0026gt; hassas konum bilgisine ihtiyacımız yok ise (Network, Cell Tower)  // PRIORITY_HIGH_ACCURACY -\u0026gt; hassas konum bilgisine ihtiyacımız var ise (GPS)   final LocationRequest locationRequest = LocationRequest.create()  .setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY)  .setInterval((LocationPeriod * 1000))  .setFastestInterval(LOCATION_FASTEST_INTERVAL);    //final LocationRequest locationRequest1 = LocationRequest.create()  // .setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY)  // .setInterval((LocationPeriod * 1000))  // .setFastestInterval(LOCATION_FASTEST_INTERVAL);   // İhtiyaçlarımız doğrultusunda yapılandırdığımız LocationRequest in gerekliliklerini kontrol ederek, cihazın davranışının otomatik olarak ayarlanması için  // gerekli Dialog penceresinin çıkmasını sağlar ve Kullanıcının onayını ister   // Örnek olarak eğer PRIORITY_HIGH_ACCURACY olrarak belirlenmişse ve cihazın GPS i kapalı ise bir Dialog çıkartarak GPS i açmanızı ister  LocationSettingsRequest locationSettingsRequest = new LocationSettingsRequest.Builder()  .addLocationRequest(locationRequest)  .setAlwaysShow(true)  .build();   PendingResult\u0026lt;LocationSettingsResult\u0026gt; result =  LocationServices.SettingsApi.checkLocationSettings(_googleApiClient, locationSettingsRequest);   // Gösterilen Dilag penceresi ile Kullanıcının etkileşimi sonucunun yakalar  result.setResultCallback(new ResultCallback\u0026lt;LocationSettingsResult\u0026gt;() {  @DebugLog  @Override  public void onResult(LocationSettingsResult locationSettingsResult) {   // locationSettingsStates ile cihazın durumunu kontrol ederek akışımızı yönlendirebiliriz  LocationSettingsStates locationSettingsStates = locationSettingsResult.getLocationSettingsStates();   // Konum dinlenmeye başlanır  // mLocationListener ile konum değişikliği yakalanır.  FusedLocationApi.requestLocationUpdates(_googleApiClient, locationRequest, mLocationListener);   //FusedLocationApi.requestLocationUpdates(_googleApiClient, locationRequest1, mLocationListener);   }  });    }    private static LocationListener mLocationListener = new LocationListener() {  @Override  public void onLocationChanged(Location location) {    // Location değişikliğini burada yakalayabiliriz.  // Belirlemiş olduğumuz periyodik zaman aralığında Location değişikliği kontrol edilecektir.  }  };     public ForegroundService() {  }   // Bu fonksiyon yardımı ile başka bir sınıftan konum bilgisine erişebiliriz.  // static olarak tanımlanmış olması bize kolaylık sağlıcaktır.  public static Location getLastLocation() {  if (_googleApiClient != null) {  return FusedLocationApi.getLastLocation(_googleApiClient);  } else {  return null;  }  }    // GoogleApiClient nesnemize erişmek istersek bu kod bloğunu kullanabiliriz.  public static GoogleApiClient getGoogleApiClient() {  return _googleApiClient;  }    public static void removeLocationUpdates() {  if (_googleApiClient != null) {  FusedLocationApi.removeLocationUpdates(_googleApiClient, mLocationListener);  }  }   @DebugLog  private static void LocationNotification(Location location, String subText) {  NotificationManager notificationManager = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);  //   mBuilder.setSmallIcon(R.drawable.ic_stat_device_gps_fixed);  mBuilder.setTicker(\u0026#34;Konum\u0026#34;);  //.setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION))  mBuilder.setSubText(subText);  mBuilder.setOnlyAlertOnce(true);  mBuilder.setPriority(Notification.PRIORITY_HIGH);    if (location != null) {  mBuilder  .setContentTitle(\u0026#34;Sapma: \u0026#34; + String.valueOf(location.getAccuracy()))  .setContentText(\u0026#34;Lat: \u0026#34; + String.valueOf(location.getLatitude()) + \u0026#34; , \u0026#34; +  \u0026#34;Long: \u0026#34; + String.valueOf(location.getLongitude()))  .setWhen(System.currentTimeMillis())  .setShowWhen(true)  .setUsesChronometer(true)  .setContentIntent(pendingIntent);    } else {  mBuilder  .setContentTitle(\u0026#34;\u0026#34;)  .setContentText(\u0026#34;\u0026#34;);  }    notification = mBuilder.build();  notificationManager.notify(LOCATION_NOTIF_ID, notification);  }   @DebugLog  @Override  public void onDestroy() {  if (_googleApiClient != null) {  if (_googleApiClient.isConnected()) {  FusedLocationApi.removeLocationUpdates(_googleApiClient, mLocationListener);  _googleApiClient.disconnect();  }  }  PeriodicHandler.removeMessages(1);  stopForeground(true);  super.onDestroy();  }   } Tanımlamış olduğumuz servisi başlatmak için istediğimiz yerden ( Activity , Fragment vb.) aşağıdaki kod bloğunu çalıştırmamız yeterli olucaktır.\nIntent serviceIntent = new Intent(context, ForegroundService.class); startService(serviceIntent); ","permalink":"https://yazilim.aykutasil.com/foregroundservice-ve-fusedlocationapi-kullanimi/","summary":"Android service yapısı, Android’in temel bileşenlerinden olup genel kullanım amacı yan iş parçacığı oluşturmaktır. Uzun süren işlemler (download vb.) için olmazsa olmaz bileşendir. Android in service bileşenini kendi ihtiyaçlarınız doğrultusunda özelleştirebilir ve uygulamanızı modern bir yapıya kavuşturabilirsiniz.\nBurada yapacağımız örnekte kısaca şu aşamaları görücez;\n Service i foreground olarak başlatmak Ongoing(devamlı gözüken) notification oluşturmak GoogleApiClient a bağlanmak Location bilgisini notification da göstermek  İlk olarak Service imiz kodlarını yazalım. Gerekli açıklamalar kodların arasında mevcuttur.","title":"Foreground Service ile FusedLocationApi Kullanımı"},{"content":"Retrofit Multipart File Upload  @DebugLog  public BelgeResponse BelgeSync(BelgeRequest request, String apiVersion, String appVersion) {  try {   Map\u0026lt;String, RequestBody\u0026gt; map = new HashMap\u0026lt;\u0026gt;();  String belgeDirPath = SuperHelper.getInternalIztopBelgeDir(mContext, request.getGonderiNo());  File belgeDir = new File(belgeDirPath);  boolean isDir = belgeDir.isDirectory();  if (isDir) {  File[] files = belgeDir.listFiles();  for (File file : files) {  RequestBody requestBody = RequestBody.create(MediaType.parse(\u0026#34;image/jpg\u0026#34;), file);  map.put(\u0026#34;file\\\u0026#34;; filename=\\\u0026#34;\u0026#34; + file.getName(), requestBody);  }  }   //RequestBody requestBodyGonderiNo = RequestBody.create(MediaType.parse(\u0026#34;text/plain\u0026#34;), request.getGonderiNo());  //RequestBody requestBodyMusId = RequestBody.create(MediaType.parse(\u0026#34;text/plain\u0026#34;), String.valueOf(request.getMusId()));   RestClient restClient = RestClient.getInstance();  Call\u0026lt;BelgeResponse\u0026gt; responseCall = restClient.getApiService().Belge(  apiVersion,  appVersion,  request.getGonderiNo(),  String.valueOf(request.getMusId()),  map);  BelgeResponse resp = responseCall.execute().body();  return resp;  } catch (Exception ex) {  SuperHelper.CrashlyticsLog(ex);  return null;  }  } ","permalink":"https://yazilim.aykutasil.com/retrofit-multipart-file-upload/","summary":"Retrofit Multipart File Upload  @DebugLog  public BelgeResponse BelgeSync(BelgeRequest request, String apiVersion, String appVersion) {  try {   Map\u0026lt;String, RequestBody\u0026gt; map = new HashMap\u0026lt;\u0026gt;();  String belgeDirPath = SuperHelper.getInternalIztopBelgeDir(mContext, request.getGonderiNo());  File belgeDir = new File(belgeDirPath);  boolean isDir = belgeDir.isDirectory();  if (isDir) {  File[] files = belgeDir.listFiles();  for (File file : files) {  RequestBody requestBody = RequestBody.create(MediaType.parse(\u0026#34;image/jpg\u0026#34;), file);  map.put(\u0026#34;file\\\u0026#34;; filename=\\\u0026#34;\u0026#34; + file.","title":"Retrofit Multipart File Upload"},{"content":"GcmNetworkManager kullanarak Android de network tabanlı işlemlerinizi olabildiğince kontrollü bir şekide yapabilirsiniz.\nGcmNetworkManager ın kullanım alanı daha çok asenkron ve periodic network işlemlerinizi yapılandırmaktır.\nTek sefer çalışacak veya Periodic olarak çalışacak işlemleriniz için 2 tip belirlenmiştir.\n OneoffTask PeriodicTask   OneoffTask Kullanımı\nOneoffTask oneoff = new OneoffTask.Builder()  // Uygulamanızı kapatsanız bile tekrar açtığınız da network işleminiz işleme konulur.  // Yani isteğinizin kalıcı olup olmamasını bu parametre ile ayarlayabilirsiniz.  .setPersisted(true)  // Belirtilen network işlemlerinin çalışacağı service i belirtir.  .setService(MyGcmTaskService.class)  // İşleminiz için tag belirleyebilirsiniz.  // Aynı tag ile yeni bir istek yaptığınız da \u0026#39;.setUpdateCurrent(true)\u0026#39; olarak belirlenmiş ise isteğinizi yeni istek ile günceller. Yani eski isteğiniz geçersiz olacaktır. \u0026#39;setUpdateCurrent(false)\u0026#39; olarak belirlenir ise aynı tag ile yeni istekte bulunsanız bile her iki isteğiniz de çalışacaktır.  .setTag(tag)  // Network isteğinizin çalışma zamanı parametrelerini belirler  .setExecutionWindow(0, 10)  // İşleminiz için internet gerekliliği veya wireless gerekliliği parametrelerini belirler  .setRequiredNetwork(required_network_state)  // İşleminiz için cihazın şarja bağlı olup olmaması gerekliliğini belirler  .setRequiresCharging(false)  // Aynı tag ile yeni istek yapıldığı takdirde güncellenip güncellenmemesi durumunu belirler  .setUpdateCurrent(true)  // Bundle ile işleminiz için gerekli parametreleri belirleyebilirsiniz  .setExtras(bundle)  // build eder  .build();  GcmNetworkManager.getInstance(context).schedule(oneoff);  MyGcmTaskService\n// Cihazınızı yeniden başlatma gibi durumlar da önceden belirlenmiş task lerinizin çalışmasını devam ettirmesini istiyorsanız // burada tekrar belirlemelisiniz. @Override public void onInitializeTasks() {  }  // GcmNetworkManager ın kendi algoritması ile seçilen, tanımlamış olduğunuz istek bu kod bloğuna girecek. @Override public int onRunTask(TaskParams taskParams) {  try {  Bundle bundle = taskParams.getExtras();  return SchedulerRandevuTask(bundle);  } catch (Exception e) {  ErrorEvent errorEvent = new ErrorEvent();  errorEvent.setErrorContent(e.getMessage());  EventBus.getDefault().post(errorEvent);  return GcmNetworkManager.RESULT_RESCHEDULE;  } }  private int SchedulerZiyaretTask(Bundle bundle) {  try {  // isteğimiz sırasında bundle olarak yüklemiş olduğumuz nesneyi burada yakalıyoruz  String jsonModel = bundle.getString(Const.IZTOP_TASK_BUNDLE);  ZiyaretRequest request = new Gson().fromJson(jsonModel, ZiyaretRequest.class);  ZiyaretResponse ziyaretResponse = sendZiyaretProcess(request);  switch (ziyaretResponse.getCode()) {  case 0: {  EventBus.getDefault().post(ziyaretResponse);  // işlemlerimiz başarılı bir şekilde gerçekleşmiş ise result değeri olarak RESULT_SUCCESS dönüyoruz.  // GcmNetworkManager bu işlemi başarılı olduğu için listeden silecek ve tekrar çalıştırmayı denemicektir.  return GcmNetworkManager.RESULT_SUCCESS;  }  default: {  // işlemlerimiz başarısız olması durumunda ( burada sunucuya istekte bulunulmuş ve dönen değer 0 değil ise başarısız olarak belirlenmiştir )isteğin tekrar çalışması için result değeri olarak RESULT_RESCHEDULE dönüyoruz.  return GcmNetworkManager.RESULT_RESCHEDULE;  }  }  } catch (Exception e) {  SuperHelper.CrashlyticsLog(e);  e.printStackTrace();  return GcmNetworkManager.RESULT_RESCHEDULE;  }   } private ZiyaretResponse sendZiyaretProcess(ZiyaretRequest request) {  return ApiManager.getInstance(getApplicationContext()).Ziyaret(request); } ApiManager / Ziyaret\npublic ZiyaretResponse Ziyaret(ZiyaretRequest request) {  try {  RestClient restClient = RestClient.getInstance();  Call\u0026lt;ZiyaretResponse\u0026gt; responseCall = restClient.getApiService().Ziyaret(request);  ZiyaretResponse ziyaretResponse = responseCall.execute().body();  return ziyaretResponse;  } catch (Exception ex) {  return null;  } } Retrofit ApiService\n@POST(\u0026#34;sunucu/ziyaret/api/adresi\u0026#34;) Call\u0026lt;ZiyaretResponse\u0026gt; Ziyaret(@Body ZiyaretRequest ziyaretRequest);\u0026lt;/pre\u0026gt;  ","permalink":"https://yazilim.aykutasil.com/android-gcmnetworkmanager-kullanimi/","summary":"GcmNetworkManager kullanarak Android de network tabanlı işlemlerinizi olabildiğince kontrollü bir şekide yapabilirsiniz.\nGcmNetworkManager ın kullanım alanı daha çok asenkron ve periodic network işlemlerinizi yapılandırmaktır.\nTek sefer çalışacak veya Periodic olarak çalışacak işlemleriniz için 2 tip belirlenmiştir.\n OneoffTask PeriodicTask   OneoffTask Kullanımı\nOneoffTask oneoff = new OneoffTask.Builder()  // Uygulamanızı kapatsanız bile tekrar açtığınız da network işleminiz işleme konulur.  // Yani isteğinizin kalıcı olup olmamasını bu parametre ile ayarlayabilirsiniz.","title":"Android GcmNetworkManager Kullanımı"},{"content":"Android SMS Receiver Android de gelen sms leri dinlemek ve uygulamanızın akışını gelen sms lere göre şekillendirmek için aşağıdaki yapıyı kullanabilirsiniz.\nİlk olarak AndroidManifest.xml dosyanızda receiver tanımlamalısınız. Fakat biz bu receiver ı dinamik olarak tanımlıcaz. Bunu yapmamızın sebebi SMS i dinledikten sonra bu receiver ı silmek ve daha sonra gelen SMS lerin dinlenmesini önlemek.\nSiz uygulamınız da sürekli bir SMS dinlemeye ihtiyaç duyarsanız receiver ı AndroidManifest.xml dosyanızda tanımlamalısınız.\nBiz burda SMS dinlemesi yaparken önlem amaçlı olarak CPU nun uyumasını önlüyoruz. Eğer bir işlem sonucunda sms gelmesini bekliyorsak, beklediğimiz SMS geciktiği takdirde ve bu sırada cihazın ekranını vs. kapattığımız da Android cihazımız kendini uyku moduna almak isteyecektir. Bunu önlemek için WakefulBroadcastReceiver yapısını kullanıyoruz. Bu yapı aslında Android in WakeLock özelliğini kullanan serviceler için özel olarak tasarlanmış bir yapıdır. Cihazı uyanık tutar ve işimiz bittiği takdirde bu WakeLock u kaldırmamız gerekir. Bunu da service in içerisinde tanımlarız.\nAşağıdaki fonksiyonu Activity miz içerisinde ihtiyacımız olan yerde çağırır ve SMS receiver ı çalıştırmıış oluruz.\nLoginActivity public void RegisterSmsReceiver() {  SmsReceiver smsReceiver = new SmsReceiver();  IntentFilter intentFilter = new IntentFilter(\u0026#34;android.provider.Telephony.SMS_RECEIVED\u0026#34;);  android.os.Handler handler = new android.os.Handler();  registerReceiver(smsReceiver, intentFilter, \u0026#34;android.permission.GET_TASKS\u0026#34;, handler); } SmsReceiver public class SmsReceiver extends WakefulBroadcastReceiver {   private static final String TAG = \u0026#34;SmsReceiver\u0026#34;;   public SmsReceiver() {  super();  }   @Override  public void onReceive(Context context, Intent intent) {  Intent myIntent = intent;  myIntent.setClass(context, SmsReceiverService.class);   // startWakeFulService ile AndroidManifest.xml dosyamız içerisinde tanımlamış olduğumuz Service e yönlendiriyoruz.  // Ve cihazın uyanık kalmasını sağlıyoruz.  startWakefulService(context, myIntent);   } } AndroidManifest.xml dosyasında Service imizi tanımlıyoruz.\n\u0026lt;service  android:name=\u0026#34;.SmsReceiverService\u0026#34;  android:exported=\u0026#34;false\u0026#34; /\u0026gt; exported=\u0026quot;false\u0026quot; tanımı servisin cihazda ki diğer uygulamalar tarafından çalıştırılamayacağını belirtir.\nSmsReceiverService public class SmsReceiverService extends IntentService {   private static final String TAG = \u0026#34;SmsReceiverService\u0026#34;;  private Context context;   public SmsReceiverService() {  super(TAG);  }   @Override  public void onCreate() {  super.onCreate();  context = getApplicationContext();  }    @Override  protected void onHandleIntent(Intent intent) {   String msg_from = null;  String msgBody = null;  if (intent.getAction().equals(\u0026#34;android.provider.Telephony.SMS_RECEIVED\u0026#34;)) {  Bundle bundle = intent.getExtras(); //---get the SMS message passed in---  SmsMessage[] msgs = null;   if (bundle != null) {  //---retrieve the SMS message received---  try {  Object[] pdus = (Object[]) bundle.get(\u0026#34;pdus\u0026#34;);  msgs = new SmsMessage[pdus.length];  for (int i = 0; i \u0026lt; msgs.length; i++) {  msgs[i] = SmsMessage.createFromPdu((byte[]) pdus[i]);  msg_from = msgs[i].getOriginatingAddress();  msgBody = msgs[i].getMessageBody();   }  } catch (Exception e) {  // Log.d(\u0026#34;Exception caught\u0026#34;,e.getMessage());  }  }  }   SmsEvent smsEvent = new SmsEvent();  smsEvent.setActivationCode(\u0026#34;357\u0026#34;);  smsEvent.setMsgBody(msgBody);  smsEvent.setMsgFrom(msg_from);   // EventBus ile sonucu istediğimiz yere gönderebiliriz.  EventBus.getDefault().post(smsEvent);   // Service in işini tamamladığını ve artık cihazın WakeLock u serbest bırakabileceğini söylüyoruz.  SmsReceiver.completeWakefulIntent(intent);  } } SmsEvent\npublic class SmsEvent {  private String activationCode;  private String msgFrom;  private String msgBody;    public String getActivationCode() {  return activationCode;  }   public void setActivationCode(String activationCode) {  this.activationCode = activationCode;  }   public String getMsgFrom() {  return msgFrom;  }   public void setMsgFrom(String msgFrom) {  this.msgFrom = msgFrom;  }   public String getMsgBody() {  return msgBody;  }   public void setMsgBody(String msgBody) {  this.msgBody = msgBody;  } } ","permalink":"https://yazilim.aykutasil.com/android-smsreceiver/","summary":"Android SMS Receiver Android de gelen sms leri dinlemek ve uygulamanızın akışını gelen sms lere göre şekillendirmek için aşağıdaki yapıyı kullanabilirsiniz.\nİlk olarak AndroidManifest.xml dosyanızda receiver tanımlamalısınız. Fakat biz bu receiver ı dinamik olarak tanımlıcaz. Bunu yapmamızın sebebi SMS i dinledikten sonra bu receiver ı silmek ve daha sonra gelen SMS lerin dinlenmesini önlemek.\nSiz uygulamınız da sürekli bir SMS dinlemeye ihtiyaç duyarsanız receiver ı AndroidManifest.xml dosyanızda tanımlamalısınız.\nBiz burda SMS dinlemesi yaparken önlem amaçlı olarak CPU nun uyumasını önlüyoruz.","title":"Android SMS Receiver"},{"content":"Uygulamanızın akışını internet kontrolü yaparak yönetmeniz gerekebilir.\nBunun için ilk olarak AndroidManifest.xml dosyasına receiver tanımı yapmalısınız.\n\u0026lt;receiver android:name=\u0026#34;.InternetConnectionReceiver\u0026#34;\u0026gt;  \u0026lt;intent-filter\u0026gt;  \u0026lt;action android:name=\u0026#34;android.net.conn.CONNECTIVITY_CHANGE\u0026#34; /\u0026gt;  \u0026lt;/intent-filter\u0026gt; \u0026lt;/receiver\u0026gt; InternetConnectionReceiver\npublic class InternetConnectionReceiver extends BroadcastReceiver {    @Override  public void onReceive(Context context, Intent intent) {   if (CheckConnection(context)) {   }  } } Yukarıda tanımlanmış olan receiver, cihazın ağ yapısında herhangi bir değişiklik olduğunda bunu yakalar. Örneğin wireless açıkken kapattığınız da veya kapalıyken açtığınız da bunu yakayabilirsiniz.\nCheckConnection\npublic static boolean checkConnection(Context con) {  ConnectivityManager cm = (ConnectivityManager) con.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo netInfo = cm.getActiveNetworkInfo();  return netInfo != null \u0026amp;\u0026amp; netInfo.isConnectedOrConnecting(); } Yukarıda ki kod bloğu da cihazın internete bağlı olması durumunu kontrol eder.\n","permalink":"https://yazilim.aykutasil.com/android-internet-connection-receiver/","summary":"Uygulamanızın akışını internet kontrolü yaparak yönetmeniz gerekebilir.\nBunun için ilk olarak AndroidManifest.xml dosyasına receiver tanımı yapmalısınız.\n\u0026lt;receiver android:name=\u0026#34;.InternetConnectionReceiver\u0026#34;\u0026gt;  \u0026lt;intent-filter\u0026gt;  \u0026lt;action android:name=\u0026#34;android.net.conn.CONNECTIVITY_CHANGE\u0026#34; /\u0026gt;  \u0026lt;/intent-filter\u0026gt; \u0026lt;/receiver\u0026gt; InternetConnectionReceiver\npublic class InternetConnectionReceiver extends BroadcastReceiver {    @Override  public void onReceive(Context context, Intent intent) {   if (CheckConnection(context)) {   }  } } Yukarıda tanımlanmış olan receiver, cihazın ağ yapısında herhangi bir değişiklik olduğunda bunu yakalar. Örneğin wireless açıkken kapattığınız da veya kapalıyken açtığınız da bunu yakayabilirsiniz.","title":"Android Internet Connection Receiver"},{"content":"POSTMAN Postman HTTP Request lerinizi istediğiniz şekilde düzenleyip çalıştırabileceğiniz ve test edebileceğiniz bir Chrome eklentisidir.\nBu linkten Chrome a ekleyebilirsiniz.\nPostman kullanarak API lerinizi test edebilirsiniz..\nTek bir butona tıklayarak istediğiniz kadar Request i çalıştırabilir ve bu Requst lerden gelen değerleri başka bir Requestinize parametre olarak gönderebilrsiniz.\nYukarıdaki ekran Postman i yüklediğinizde açılan ilk ekrandır.\nEnter request URL here yazan kutucuğa End Point yani istek yapacağımız adres yazılır.\nŞuan GET olarak gözüken yerden yapılacak olan istediğin cinsi seçilir.(POST , GET ,PUT ,DELETE vs.)\n  Authorization tabından Request gönderilecek adreste bir kimlik doğrulama var ise burdan gerekli parametreler girilebilir.\n  Headers tabından yapılacak olan istekte bulunması gereken Header bilgileri girilir.(Content-Type gibi)\n  Body tabından End Point i belirtilmiş adrese gönderilecek veriler girilir.Bu veriiler form-data , urlencoded , raw , binary şeklinde olabilir.\n  Pre-request script tabını kullanarak istek yapmadan hemen önce otomatik olarak yapılacak işlemleri belirleyebiliriz.\n  Tests tabından yapılan isteklere ait çeşitli testler yazabiliriz.\n  Ve SEND butouna tıklayarak istek gönderilir.\n No Environment yazan kısma tıklayarak farklı projeler için Environment tanımlayabilriz.Ve her proje kendine ait Environment Variable ları kullanır.\nEnvironment variable lar Global olarak ta tanımlanabilir.Bu şekilde tanımlanmış variable lar tüm oluşturulmuş olan Environment lar içinden erişilebilir.\nSabit environment lar oluşturmak için No Environment tabına tıklanarak bir Environment oluşturulur ve Manage Environment diyerek sabit değişkenler oluşturulabilir.\nDinamik olarak oluşturmak için Tests tabı kullanılır.\nVe kullanım şekli :\npostman.setEnvironmentVariable(\u0026#34;key\u0026#34;,\u0026#34;value\u0026#34;) Global variable oluşturmak için:\npostman.setGlobalEnvironmentVariable(\u0026#34;key\u0026#34;,\u0026#34;value\u0026#34;);  Yukarıda görüldüğü gibi Requestimize ait sabit değerleri bu şekilde environment variable olarak kaydedebiliriz.\n Yukarıda görüldüğü gibi oluşturmuş olduğumuz environment variable ı adres çubuğunda kullandık.Ve url nin devamını kendimiz el ile yazdık.Response olarak dönen değeride yukarıda ki gibi görebiliyoruz.\n Yaptığımız istek sonucu dönen Responsumuzu test etmeye geldi sıra.\nYukarıda ki resimde gördüğünüz gibi gelen response değerinde status diye bir property bulunuyor mu ? ve responce code değeri 200 mü ? diye basit bir test yazıyoruz.\nSEND dediğimizde yazdığımız testlerde çalışacak ve Response sonucunu gördüğümüz ekranın üstünde bulunan Tests(2/2) tabına tıklayarak test sonçlarını görebilicez.\n Şimdi bir Blog yazısı kayıt etmeye çalışalım.\nBu şekilde yazıp SEND e bastığımız da Response olarak Invalid hatası vericektir.Çünkü Authorization bilgilerini girmemizi istemektedir.Bunu yapabilmemiz aşağıdaki gibi bir token oluşturuyoruz.\nVe oluşturduğumuz token bilgileriniz Blog post ederken kullanabilmek için Environment Variable olarak atıyoruz.\n Ve aşağıdaki gibi Blog Post değerlerimizi güncelliyoruz.\n Bir Blog mesajı yazarken\n{  \u0026#34;post\u0026#34; : \u0026#34;Merhaba\u0026#34; } bu şekilde oluşturabileceğiniz gibi\n{  \u0026#34;post\u0026#34; : \u0026#34;{{token}}\u0026#34; } bu şekilde de kaydetmiş olduğunuz Environment Variable ları değer olarak atayabilirsiniz.\nBu şekil de zincirleme reaksiyonlar oluşturabilir ve bir istek sonucu dönen değeri diğer isteğinize parametre olarak gönderebilirsiniz.\n Yukarıda görüldüğü gibi environment variable değerinizi Url nize parametre olarak yerleştirebilirsiniz.\nPostman de test yazarken kullanabileceğiniz ve çok yararlı olabilecek console.log u aktif etmek için bir kaç ayar yapmanız gerekmekte.\n Chromu u açın ve adres satırına chrome://flags yazın. Çıkan pencerece “package” diye arama yapın (CTRL + F) Ve #debug-packed-apps enable yapın.  Şimdi Postman ekranına gelin ve herhangi bir yere sağ tıklayarak öğeyi denetle diyin ve Console tabını açın.\nBu ekran da postman de test yazarken kullanmış olduğunuz console.log(“xyz”) komutunun sonucunu görebilirsiniz.\n","permalink":"https://yazilim.aykutasil.com/postman-api-test/","summary":"POSTMAN Postman HTTP Request lerinizi istediğiniz şekilde düzenleyip çalıştırabileceğiniz ve test edebileceğiniz bir Chrome eklentisidir.\nBu linkten Chrome a ekleyebilirsiniz.\nPostman kullanarak API lerinizi test edebilirsiniz..\nTek bir butona tıklayarak istediğiniz kadar Request i çalıştırabilir ve bu Requst lerden gelen değerleri başka bir Requestinize parametre olarak gönderebilrsiniz.\nYukarıdaki ekran Postman i yüklediğinizde açılan ilk ekrandır.\nEnter request URL here yazan kutucuğa End Point yani istek yapacağımız adres yazılır.\nŞuan GET olarak gözüken yerden yapılacak olan istediğin cinsi seçilir.","title":"Postman ile API Test Yazımı"},{"content":"Anroid ile ORM (Object Relational Mapping) kullanarak veritabanı işlemlerinizi oldukça kolay yapabilirsiniz.\nActiveAndroid kütüphanesi ORM kütüphanelerinden biridir.\nKütüphaneyi buradan indirebilirsiniz.\nKullanımı oldukça basittir. Sadece birkaç noktaya özellikle dikkat edilmesi gerekiyor. Bunlardan biri oluşturmuş olduğunuz tabloya yeni alanlar eklediğiniz de tablonuzu güncellemek. Veya herhangi bir sebeple tabloda çeşitli işlemler yapmak.\nAşağıda kısaca Tablo oluşturmaktan ve gerektiğinde Tablo yu nasıl güncelleyeceğimizden bahsedicem.\n@Table(name = \u0026#34;Items\u0026#34;) public class ModelSampleItem extends Model {   @Column(name = \u0026#34;Name\u0026#34;)  public String name;   @Column(name = \u0026#34;Surname\u0026#34;)  public String surname;   @Column(name = \u0026#34;Phone\u0026#34;)  public String phoneNumber;   @Column(name = \u0026#34;Xyz\u0026#34;)  public String xyz;   @Column(name = \u0026#34;EMail\u0026#34;)  public String email;   @Column(name = \u0026#34;TryColumn\u0026#34;)  public String tryColumn;    @Column(name = \u0026#34;Column3\u0026#34;)  public String column3;     public ModelSampleItem() {  super();   } } Yukarıda ki yapıyı kullanarak istediğiniz Tablo yu oluşturmanız mümkün.\nTabi bundan önce yapmamız gereken birkaç ayar var.\nAndroid uygulamamızın Manifest dosyasına custom Application Name tanımlıyoruz ve bu isimde bir Class oluşturuyoruz.\n\u0026lt;application  android:name=\u0026#34;.app.AppController\u0026#34; ve Application dan türeyen sınıfımız\npublic class AppController extends com.activeandroid.app.Application {    @Override  public void onCreate() {  super.onCreate();   } } com.activeandroid.app.Application\nYukarıda ki sınıftan türetmek aslında onCreate() içerisinde ActiveAndroid.initializ(this) ile aynı anlama gelmektedir.Ama yukarıda ki gibi yaparsak daha güzel bir görünüm olacaktır.\nVe aşağıdaki meta-taglarını \u0026lt;application\u0026gt; tagları arasıne ekliyoruz.\n\u0026lt;meta-data  android:name=\u0026#34;AA_DB_NAME\u0026#34;  android:value=\u0026#34;newiztop1.db\u0026#34; /\u0026gt; \u0026lt;meta-data  android:name=\u0026#34;AA_DB_VERSION\u0026#34;  android:value=\u0026#34;1\u0026#34; /\u0026gt; Yapılandırma ayarlarımız bu kadar. Artık Items benzeri tablolarınızı yukarıda ki gibi yazmanız ve uygulamanızı çalıştırmanız yeterli olacaktır.\nYukarıda ki tabloya sonradan bir alan eklememiz gerekti. Uygulamamız büyüdükçe nelere ihtiyacı olacağını kestirmek imkansıza yakındır.\n@Column(name = \u0026#34;Column4\u0026#34;)  public String column4; Alanımızı Items sınıfımıza ekliyoruz. Ama çalıştırdığımız da uygulamamız hata verecektir.\nUygulamamıza yeni alan eklediğimizi bildirmek için biraz kıvranmamız gerekmekte.\nÖncelikle assets klasörünün içine migrations isilmli bir klasör oluşturuyoruz. Bu ismi vermek zorunludur. assets/migrations\nVe oluşturduğumuz migrations klasörüne 2.sql isimli bir dosya oluşturuyoruz.Niye 2 peki?\n\u0026lt;meta-data  android:name=\u0026#34;AA_DB_NAME\u0026#34;  android:value=\u0026#34;newiztop1.db\u0026#34; /\u0026gt;  \u0026lt;meta-data  android:name=\u0026#34;AA_DB_VERSION\u0026#34;  android:value=\u0026#34;1\u0026#34; /\u0026gt; Android Manifest dosyasına yapılandırırken DB_VERSION olarak 1 verdik. Bura da belirttiğimiz sayının bir fazlası olması gerekiyor *.sql dosyamızın ismi.\nVe 2.sql dosyamızın içine\nBEGIN TRANSACTION; ALTER TABLE Items ADD COLUMN Column4 TEXT; COMMIT; ekliyoruz.\nVe çalıştırdığımız da Items tablomuza Column4 isimli bir alan eklenmiş olacaktır.Artık bu alanımızı da gönül rahatlığıyla kullanabiliriz.\nItems Tablomuza herhangi bir satır eklemek istersek :\nModelSampleItem msi = new ModelSampleItem(); msi.name = \u0026#34;Aykut\u0026#34;; msi.surname = \u0026#34;Asil\u0026#34;; msi.phoneNumber = \u0026#34;535\u0026#34;; msi.email = \u0026#34;huuuu@gmail.com\u0026#34;; msi.xyz = \u0026#34;xy\u0026lt;\u0026#34;; msi.Column4 = \u0026#34;merhaba\u0026#34;; msi.save(); dememiz yeterli olacaktır.\nKaydedilmiş bir veriyi okumak istersek :\nModelSampleItem myModel = Model.load(ModelSampleItem.class, 6); // id si 6 olan veriyi getirir veya\nList\u0026lt;ModelSampleItem\u0026gt; listMOdel = new Select().from(ModelSampleItem.class).execute(); // Tüm verileri List şeklinde getirir. İhityacınıza yönelik sorgulamalar yapabilirsiniz. Tek yapmanız gereken biraz kurcalamak.\n","permalink":"https://yazilim.aykutasil.com/activeandroid/","summary":"Anroid ile ORM (Object Relational Mapping) kullanarak veritabanı işlemlerinizi oldukça kolay yapabilirsiniz.\nActiveAndroid kütüphanesi ORM kütüphanelerinden biridir.\nKütüphaneyi buradan indirebilirsiniz.\nKullanımı oldukça basittir. Sadece birkaç noktaya özellikle dikkat edilmesi gerekiyor. Bunlardan biri oluşturmuş olduğunuz tabloya yeni alanlar eklediğiniz de tablonuzu güncellemek. Veya herhangi bir sebeple tabloda çeşitli işlemler yapmak.\nAşağıda kısaca Tablo oluşturmaktan ve gerektiğinde Tablo yu nasıl güncelleyeceğimizden bahsedicem.\n@Table(name = \u0026#34;Items\u0026#34;) public class ModelSampleItem extends Model {   @Column(name = \u0026#34;Name\u0026#34;)  public String name;   @Column(name = \u0026#34;Surname\u0026#34;)  public String surname;   @Column(name = \u0026#34;Phone\u0026#34;)  public String phoneNumber;   @Column(name = \u0026#34;Xyz\u0026#34;)  public String xyz;   @Column(name = \u0026#34;EMail\u0026#34;)  public String email;   @Column(name = \u0026#34;TryColumn\u0026#34;)  public String tryColumn;    @Column(name = \u0026#34;Column3\u0026#34;)  public String column3;     public ModelSampleItem() {  super();   } } Yukarıda ki yapıyı kullanarak istediğiniz Tablo yu oluşturmanız mümkün.","title":"Android ActiveAndroid Kullanımı"},{"content":"Unit Test birçok yazıılımcı tarafından es geçillen ama bir o kadar da önemli ve yapılması gerekli olan bir durumdur.\nProje büyüdükçe ve ilerledikçe teste duyulan ihtiyaç ta doğru orantılı olarak artmaktadır.\nUnit Test neden yapılır sorusunun daha ayrıntılı cevabı için unit test nedir nicin ve nasil yapilir bu yazıyı okuyabilirsiniz.\nAndroid Studio da Robolectric kullanarak Unit Test Yazımı\nAşağıdaki adımları sırası ile ve düzgün bir şekilde uygularsanız herhangi bir sorun çıkmadan testi çalıştırabileceksiniz.(Ben gerektiğinden uzun bi zaman harcadım, siz harcamayın !)\nbuild.gradle\napply plugin: \u0026#39;com.android.application\u0026#39;  android {  compileSdkVersion 22  buildToolsVersion \u0026#34;23.0.0\u0026#34;   defaultConfig {  applicationId \u0026#34;com.a.aykut.tryrobolectric1\u0026#34;  minSdkVersion 16  targetSdkVersion 21  versionCode 1  versionName \u0026#34;1.0\u0026#34;  }  buildTypes {  release {  minifyEnabled false  proguardFiles getDefaultProguardFile(\u0026#39;proguard-android.txt\u0026#39;), \u0026#39;proguard-rules.pro\u0026#39;  }  } }  dependencies {  compile fileTree(dir: \u0026#39;libs\u0026#39;, include: [\u0026#39;*.jar\u0026#39;])  compile \u0026#39;com.android.support:appcompat-v7:22.2.1\u0026#39;  compile \u0026#39;com.jakewharton:butterknife:7.0.1\u0026#39;   testCompile \u0026#39;junit:junit:4.12\u0026#39;  testCompile \u0026#39;com.squareup.assertj:assertj-android:1.1.0\u0026#39;  testCompile \u0026#39;org.robolectric:robolectric:3.0\u0026#39; } MainActivity\n@Bind(R.id.button) Button button;  @Bind(R.id.textView) TextView textView;  @Override protected void onCreate(Bundle savedInstanceState) {  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_main);  ButterKnife.bind(this); }  @OnClick(R.id.button) public void buttonClick(View vi) {  textView.setText(\u0026#34;tiklandi\u0026#34;); } AndroidManifest.xml dosyasında herhangi bir değişiklik yapmanıza gerek yok.\nTest sınıfımızı yazmaya başlayalım.\nİlk olarak Android Studio nun sol tarafında yer alan Build Variant tabından Test Artifact kısmını Unit Tests olarak değiştirin.\nUnit Test yazmak için src klasörüne test isminde bir klasör ve test klasörünün içine de java isimli bir klasör oluşturmanız gerekmektedir.\nyani src/test ve src/test/java klasörlerini oluşturmalısınız.\nOluşturmuş olduğunuz java klasörüne sağ tıklayarak new \u0026gt; Package diyin ve normal Package isminizle aynı isimde bir Package oluşturun.Burda biz com.a.aykut.tryrobolectric1 ismini kullandık.\nOluşturmuş olduğunuz Package sağ tıklayarak new \u0026gt; Java Class diyin ve test sınıfını oluşturun. Anlaşılabilirlik açısından Test*(Test Edilecek Sınıf ismi) olarak isimlendirebilirsiniz.\nTestMainActivity\nimport android.app.Activity;  import android.widget.Button; import android.widget.TextView;  import org.junit.Before; import org.junit.Test; import org.junit.runner.RunWith; import org.robolectric.Robolectric; import org.robolectric.RobolectricGradleTestRunner; import org.robolectric.annotation.Config;  import static junit.framework.Assert.assertEquals; import static junit.framework.Assert.assertTrue;  @RunWith(RobolectricGradleTestRunner.class) @Config(constants = BuildConfig.class,sdk = 21) public class TestMainActivity {   Activity activity;  TextView textView;  Button button;   @Before  public void setUp() {  activity = Robolectric.setupActivity(MainActivity.class);  textView = (TextView) activity.findViewById(R.id.textView);  button = (Button) activity.findViewById(R.id.button);  }   @Test  public void shouldMainActivityNotBeNull() throws Exception {  Robolectric.buildActivity(MainActivity.class).create().pause().resume().get();  assertTrue(Robolectric.buildActivity(MainActivity.class).create().get() != null);  String hello = new MainActivity().getResources().getString(R.string.hello_world);  assertEquals(hello, \u0026#34;Hello world!\u0026#34;);    }   @Test  public void buttonClickChangeTextView() throws Exception {  String text = textView.getText().toString();  assertEquals(text, \u0026#34;Hello world!\u0026#34;);  button.performClick();  text = textView.getText().toString();  assertEquals(text, \u0026#34;tiklandi\u0026#34;);   } } Evet.Test sınıfımızı da yazdık.Artık çalıştırabiliriz.\nTestimizi çalıştırmak için yazmış olduğumuz Test Sınıfına sağ tıklayarak Run diyoruz.\nRun dediğiniz de Test çalışacaktır. Fakat aşağıdaki hataya benzer bir hata alırsanız endişelenmeyin.\njava.lang.RuntimeException: build\\intermediates\\bundles\\debug\\AndroidManifest.xml not found or not a file; it should point to your project\u0026#39;s AndroidManifest.xml at org.robolectric.manifest.AndroidManifest.validate(AndroidManifest.java:121) at org.robolectric.manifest.AndroidManifest.getResourcePath(AndroidManifest.java:469) at org.robolectric.manifest.AndroidManifest.getIncludedResourcePaths(AndroidManifest.java:475) at org.robolectric.RobolectricTestRunner.createAppResourceLoader(RobolectricTestRunner.java:491) at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140) ... .. . Resim de görüldüğü gibi Edit Configurations a tıklayın.\nResim deki gibi Working directory yolunun sonuna \\app ekleyin.\nVe şimdi tekrar Test Sınıfına sağ tıklayarak Run diyin.\nVe sonuç aşağıdaki gibi olmalıdır.\nKaynak kodlarını aşağıdaki linkten indirebilirsiniz.\nhttps://github.com/aykuttasil/RobolectricUnitTest\n","permalink":"https://yazilim.aykutasil.com/android-robolectric/","summary":"Unit Test birçok yazıılımcı tarafından es geçillen ama bir o kadar da önemli ve yapılması gerekli olan bir durumdur.\nProje büyüdükçe ve ilerledikçe teste duyulan ihtiyaç ta doğru orantılı olarak artmaktadır.\nUnit Test neden yapılır sorusunun daha ayrıntılı cevabı için unit test nedir nicin ve nasil yapilir bu yazıyı okuyabilirsiniz.\nAndroid Studio da Robolectric kullanarak Unit Test Yazımı\nAşağıdaki adımları sırası ile ve düzgün bir şekilde uygularsanız herhangi bir sorun çıkmadan testi çalıştırabileceksiniz.","title":"Robolectric ile UnitTest Yazımı"},{"content":"Unit Test Nedir ? Niçin ve Nasıl Yapılır ?\nYıl olmuş 2014 hala birim test makalesi mi yazıyorsun diye düşünüyor olabilirsiniz. Ancak, birim testi uzun zamandır kullanılan bir yöntem olmasına rağmen tam olarak ne işe yaradığı, neden yapıldığı ve nasıl yapılması gerektiği konusunda açıklayıcı bir Türkçe yazı bulmak malesef zor. Bu yüzden, yazılım mühendisi adaylarına ve kariyerine yeni başlayan arkadaşlara faydalı olabilmek adına bu yazıyı yazmak uygun olur diye düşündüm.\nBirim Testi Nedir?\nBirim testi adından anlaşıldığı üzere yazılım birimlerinin test edilmesidir. Burada yazılım birimi dediğimiz şey ise test edilebilen en küçük yazılım bileşenidir. Nesneye yönelik programlama yaklaşımını ele alacak olursak, yazılım birimleri sınıflardır diyebiliriz. Yapılan şey basit olarak sınıf davranışlarının (metodlar) belirli girdiler sağlandığı zaman doğru bir şekilde çalışıp, istediğimiz sonucu üretip üretmediğini kontrol etmektir. Bu şekilde yazılımın küçük birimleri test edildiği zaman, bütünü oluşturan parçaların en azından kendi içlerinde çalıştığından emin olmuş oluruz. Buraya kadar söylediklerimiz birim testinin genel tanımıdır, ama yazılım geliştiren kişiler olarak asıl anlamamız gereken şey birim testini niçin yaptığımızdır.\nBirim Test Niçin Yapılır?\nBu soruyu eminim ki birçok yazılımcı kendi kendine sormuştur. Bir kısmımız tam olarak neye hizmet ettiğini anlamasak da, faydalı olduğunu düşündüğümüz için ve kendimizi daha güvende hissetmek adına birim test yazarız. Bazılarımız ise birim test yazmanın faydalı olduğunu bilmemize rağmen çeşitli bahaneler üreterek birim test yazmaktan kaçarız. Bunun arkasındaki asıl sebep ise birim testlerin ve test odaklı yazılım geliştirme tekniğinin (test-driven development) asıl amacını kavrayamamış olmamızdır. Her şeyden önce şunu söylemek gerekir: Birim testleri yazılımları test etmek için yazılmaz. İsmi “birim test” olan bir yöntem için “asıl amacı yazılımları test etmek değildir” demek ilk başta çok mantıklı gelmeyebilir ama yazıyı okudukça bana hak vereceğinizi düşünüyorum.\nBirim testler hata bulmak için değildir\nBir yazılım sistemindeki hataları (bug) bulmak birim testler ile mümkün değildir. Çünkü birim testlerin yaptığı iş yazılımın en küçük parçalarını kendi içerisinde test etmektir. Peki bu küçük parçaların kendi içlerinde çalışıyor olması, yazılımın gerçek kullanıcılar tarafından kullanılmaya başladığı zaman bir bütün olarak çalışacağını gösterir mi? Kesinlikle hayır. Bir yazılım sistemi, onu oluşturan parçaların toplamından çok daha fazlasıdır. Dolayısıyla bu bütünü test etmek için farklı yöntemler kullanmak gerekir. İşlevsel test (functional testing), bütünleştirme testi (integration testing) bunlara örnek verilebilir ancak konumuz birim test olduğu için bunlara değinmeyeceğim.\nHataları bulamıyorsa birim testler ne işe yarıyor?\nBirim test yazmanın sağladığı gerçek fayda, bizi kaliteli kod yazmaya teşvik etmesidir. Peki bu nasıl olur? Öncelikle şunu söylemek gerekir ki, birim test yazmanın birinci kuralı test etmekte olduğumuz sınıfı, bağımlı olduğu diğer bütün bileşenlerden izole etmektir. Örnek verecek olursak, test ettiğiniz sınıfın bir Google servisine bağlanarak veri çektiğini düşünün. Ancak birim test esnasında bu sınıfın Google servisine bağlanıp veri çekmesini istemeyiz. Çünkü birim testin amacı yazılımın Google servisleriyle çalışabildiğini kanıtlamak değildir. Birim test yazarken, bağlantılı olduğumuz diğer bütün parçaların sorunsuz biçimde çalıştığını varsayarak yazarız, çünkü odaklandığımız şey sınıfın kendisidir, bağımlı olduğu diğer bileşenler değil. Bu varsayımı yapabilmek için de, mocking dediğimiz tekniği kullanarak test esnasında gerçek Google servisine bağlanmak yerine bizim yarattığımız sahte bir servise (mock object) bağlanıp sınıfın ihtiyacı olan veriyi döndürürüz. Bu şekilde test ettiğimiz sınıf dışarıda bir servise bağlanmadan ihtiyacı olan veriyi alır ve işletimini tamamlar.\nŞimdi test etmekte olduğumuz bu sınıfın dışarıdaki Google servisiyle sıkı sıkıya bağlı (tightly coupled) olduğunu düşünün. Sınıf Google servisiyle ilgili bütün bilgileri içinde barındırıyor ve bağlantıyı yaratıp kullanıyor, veri alışverişini yapıyor. Biz bu sınıfa gerçek Google servisine değil de bizim belirlediğimiz sahte servise (mock object) bağlanmasını nasıl söyleyeceğiz? Bu şekilde birbirine sıkıca bağlanmış yazılım bileşenlerini birbirlerinden bağımsız bir şekilde test etmek mümkün değildir. Ancak bu bileşenler gevşek bağlı (loosely coupled) olsaydı, biz sınıfımıza test esnasında sahte servisi, gerçek işletim esnasında ise Google servisini kullanmasını söyleyebilirdik. Bu şekilde yazılım bileşenlerini birbirlerine gevşek bir biçimde bağlamak Dependency Injection tekniğiyle mümkündür ve gevşek bağlı sistemler çok daha kolay bakım yapılabilen, test edilebilen ve eklemeler yapması çok daha kolay olan sistemlerdir.\nTest odaklı yazılım geliştirme yapıyorsak (test-driven development), birim testleri sınıfın kendisinden önce yazmamız gerektiği için bu tarz tasarım detaylarını henüz işin başındayken doğru bir şekilde belirlemiş oluruz. Doğru biçimde birim test yazmak, yazılım bileşenlerini birbirlerine sıkı sıkıya bağlamamızı engelleyerek daha tasarım aşamasındayken daha kaliteli bir yazılım çıkarmamıza yardımcı olur. Özet olarak şunu söylemekte fayda var, bütün bileşenleri birbirinden bağımsız olarak test edilebilen yazılımlar, bakımı nispeten daha kolay olan ve kaliteli yazılımlardır. İşe birim testleri yazarak başlamak da bunu başarmamıza yardımcı olur.\nBirim test yazmak kodda iyileştirme yapmayı (refactoring) kolaylaştırır\nBirim test yazmanın bir diğer büyük faydası da kodda iyileştirme yaparken (refactoring) ortaya çıkar. Hiçbir kod mükemmel değildir ve iyileştirme her zaman bir ihtiyaçtır. Ancak birçok yazılımcı çalışan sistemi bozmaktan korktuğu için iyileştirme yapmaz. Ancak kapsamlı birim testleriniz varsa, değişiklik yaptığınız sınıfın hala çalışıp çalışmadığını anlamak için birim testlerinizi kullanabilirsiniz. Daha önce birim testlerin hataları bulmak için kullanılmadığını söylemiş olsak da iyileştirme esnasında üzerinde çalıştığımız sınıfı bozup bozmadığımızı anlamak mümkün olabilir. Dolayısıyla birim test yazmak sadece kodu yazarken kaliteli yazmaya teşvik etmekle kalmaz, aynı zamanda ileride kodu iyileştirmemize de yardımcı olur.\nDoğru birim test nasıl yazılır?\nBirim testin nasıl yazılması gerektiği de çok önemlidir. Doğru yazılmayan birim testler bize hiçbir şey kazandırmayacağı gibi en ufak değişiklikte hatalar vermeye başlayıp başımızı ağrıtırlar. Üstüne bir de testlere bakım yapmakla uğraşmak zorunda kalacağımız için de fayda sağlamanın aksine zararlı olabilirler. O yüzden birim test yazarken aşağıdaki noktalara dikkat etmekte fayda var:\nTek bir şeye odaklanın: Her testin tek bir şeyi test ettiğinden emin olun. Çok gerekli değilse aynı test içerisine birden fazla assert ifadesi koymayın. Bağımlılıkları (dependency) değil, tek bir sınıfı test edin: Yazıda daha önce de değindiğimiz gibi, bir sınıfı test ederken o sınıfı bağımlı olduğu diğer yazılım bileşenlerinden izole edin, aksi taktirde yazdığınız test birim test değildir. Yazdığınız testler birbirini etkilemesin: Yazdığınız her test birbirinden bağımsız bir şekilde tek başına sorunsuz çalışabilmelidir. Eğer yazdığınız bir birim test başka bir birim testin üreteceği veriye bağımlıysa yanlış yapıyorsunuz demektir. Testlerinizi doğru isimlendirin: Test sayısı arttıkça isimlendirmenin önemi de artar. Kafa karıştırıcı test isimleri kullanmak ileride problemlere yol açar. Açıklayıcı olması için test isimlerini uzun tutmanız gerekiyorsa öyle yapın, uzun isimler yanlış isimlerden daha faydalıdır. Test koduna ikinci sınıf kod muamelesi yapmayın: Testler de yazılımın bir parçasıdır. Dolayısıyla normal program kodunu yazarken ne kadar özen gösteriyorsanız test kodlarına da aynı özeni gösterin, kod tekrarlarından kaçının, okunabilir test kodu yazın.\nKaynak  http://www.seckintozlu.com/etiketler/unit-test  ","permalink":"https://yazilim.aykutasil.com/unittest-nedir/","summary":"Unit Test Nedir ? Niçin ve Nasıl Yapılır ?\nYıl olmuş 2014 hala birim test makalesi mi yazıyorsun diye düşünüyor olabilirsiniz. Ancak, birim testi uzun zamandır kullanılan bir yöntem olmasına rağmen tam olarak ne işe yaradığı, neden yapıldığı ve nasıl yapılması gerektiği konusunda açıklayıcı bir Türkçe yazı bulmak malesef zor. Bu yüzden, yazılım mühendisi adaylarına ve kariyerine yeni başlayan arkadaşlara faydalı olabilmek adına bu yazıyı yazmak uygun olur diye düşündüm.","title":"Unit Test Nedir ? Niçin ve Nasıl Yapılır ?"},{"content":"Azure Mobile Services çok hızlı ve kolay bir şekilde uygulama geliştirmeniz için önceden veya uygulama yazımı sırasında yapılması gereken işlemleri minimize eden bir servistir.\nKullanımı oldukça kolay olmakla beraber ilk bir kaç adımı gerçekleştirmek bazen can sıkıcı olabilmekte.\nBunun için ufak bir örnekle bu ilk birkaç adımı beraber atıcaz.\nhttps://azure.microsoft.com/tr-tr/ adresinden portal a girdiniz.Ve mobile services tab ından new diyerek yeni bir mobile services oluşturdunuz.\nOluşturduğunuz Mobile Service tıkladınız ve çıkan ekranda Push tabına girdiniz.Bu taba tıkladıktan sonra notification gönderebilieceğiniz platformları göreceksiniz.\nBiz bu örneğimizde Android Platformu için push gönderimini anlatıcaz ve bunun için GCM API kısmına https://console.developers.google.com/ linkinden oluşturduğumuz yeni proje nin API KEY ini yazıyoruz.Bu API KEY i bulmak için yeni proje oluşturduğunuzda Credentials sekmesinden \u0026gt; Add Credentials \u0026gt; API Key ve Server Key tıklıyoruz ve buradaki API KEY i kullanıyoruz.\nNOT : APIS sekmesinden Cloud Messaging for Android API sini aktif etmeyi unutmayın.\nAzure tarafında yapmanız gerekenler bunlar.\nClient tarafında ki kodlar için ise her platforma özel kodlar bulunmaktadır.\nAndroid Client ı için örnek kodlara https://github.com/aykuttasil/AzureMobileService linkinden erişebilirsiniz.\n Azure tarafında bir çok farklı işlem gerçekleştirebilirsiniz.\nÖrneğin herhangi bir client da (android , ios , http vs.) mobile service altyapısını kullanarak veritabanına veri eklediniz.Ve her veri girişi yapıldığda uygulamanın yüklü olduğu tüm cihazlara bildirim göndermek istiyorsunuz.\nBu ve buna benzer işlemlerinizi Azure Server tarafında halledebilirsiniz.\nAşağıdaki resimde her Item tablosuna veri eklendiğin de bildirim gönderen kod bloğunu görebilirsiniz.\n","permalink":"https://yazilim.aykutasil.com/azure-notification-hubs-kullanimi/","summary":"Azure Mobile Services çok hızlı ve kolay bir şekilde uygulama geliştirmeniz için önceden veya uygulama yazımı sırasında yapılması gereken işlemleri minimize eden bir servistir.\nKullanımı oldukça kolay olmakla beraber ilk bir kaç adımı gerçekleştirmek bazen can sıkıcı olabilmekte.\nBunun için ufak bir örnekle bu ilk birkaç adımı beraber atıcaz.\nhttps://azure.microsoft.com/tr-tr/ adresinden portal a girdiniz.Ve mobile services tab ından new diyerek yeni bir mobile services oluşturdunuz.\nOluşturduğunuz Mobile Service tıkladınız ve çıkan ekranda Push tabına girdiniz.","title":"Azure Mobile Services ve Notification Hubs Kullanımı"},{"content":"ReCaptcha Sitenize gelebilecek saldıralara karşı bir önlem olarak kullanılacak eklentilerden biridir ReCaptcha.\nKolay bir şekilde entegre edilir ve kolay bir şekilde güvenlik sağlanır.\nBunun için aşağıdaki adımları uygulamanız yeterli olacaktır.\n https://www.google.com/recaptcha/admin#list sitesine gidiniz.Ve gerekli yerleri doldurunuz. Label kısmına ReCaptcha i hangi sayfada kullanacaksınız,(örneğin giriş sayfası için) GirişCaptcha diyin. Domain kısmına sitenizin domain i ekleyin.Her biri bir satır olacak şekilde.Birden fazla domain girerek aynı kodu farklı domainlerde çalıştırabilirsiniz. Owner kısmına ise Adınız yazın. div kısmını ReCaptcha\u0026rsquo;nın nerede gözükmesini istiyorsanız oraya koyun.(form elementinin içersinde olmalıdır.) script kısmını site kodunuzun en altına, body tagınızın bi üstüne koyun. Client tarafında yapacaklarınız bu kadar. Server tarafına geçtiğimizde ise Client tarafındaki formdan gönderilen bilgileri alır gibi “g-recaptcha-response” parametresiyle değeri alıyoruz.Ve ReCaptcha api sinin kullanarak eşleşmenin sağlanığ sağlanmadığına bakıyoruz. Bunun için server kısmına   private static bool ControlReCaptcha(string secretKey, string reCaptcha, string remoteIp)  {  var secretkey = secretKey;  var recaptcha = reCaptcha;  var remoteip = remoteIp;  var recaptchacommand = \u0026#34;https://www.google.com/recaptcha/api/siteverify?secret=\u0026#34; + secretkey +  \u0026#34;\u0026amp;response=\u0026#34; + recaptcha + \u0026#34;\u0026amp;remoteip=\u0026#34; + remoteip;   var resp = WebRequest.Create(recaptchacommand).GetResponse();  var str = resp.GetResponseStream();  var sr = new StreamReader(str);  var a = sr.ReadToEnd();  JObject obj = JObject.Parse(a);  var sonuc = obj[\u0026#34;success\u0026#34;].ToString().ToLower();  return sonuc == \u0026#34;true\u0026#34;;  } fonksiyonunu ekliyoruz.Ve gerekli parametreleri girdiğimizde fonksiyon bize true – false olacak şekilde sonucu döndürüyor.\n","permalink":"https://yazilim.aykutasil.com/recaptcha-kullanimi/","summary":"ReCaptcha Sitenize gelebilecek saldıralara karşı bir önlem olarak kullanılacak eklentilerden biridir ReCaptcha.\nKolay bir şekilde entegre edilir ve kolay bir şekilde güvenlik sağlanır.\nBunun için aşağıdaki adımları uygulamanız yeterli olacaktır.\n https://www.google.com/recaptcha/admin#list sitesine gidiniz.Ve gerekli yerleri doldurunuz. Label kısmına ReCaptcha i hangi sayfada kullanacaksınız,(örneğin giriş sayfası için) GirişCaptcha diyin. Domain kısmına sitenizin domain i ekleyin.Her biri bir satır olacak şekilde.Birden fazla domain girerek aynı kodu farklı domainlerde çalıştırabilirsiniz. Owner kısmına ise Adınız yazın.","title":"ReCaptcha Kullanımı"},{"content":"Android Key Hashes \u0026amp; SHA1 Windows komut satırına aşağıdaki komutu yazarak ulaşabilirsiniz.\nkeytool -exportcert -alias androiddebugkey -keystore %HOMEPATH%\\.android\\debug.keystore | openssl sha1 -binary | openssl base64 openssl hatası alırsanız https://code.google.com/p/openssl-for-windows/downloads/detail?name=openssl-0.9.8k_X64.zip adresindeki dosyayı indirdikten sonra çıkan dosyadaki bin klasörünü ortam değişkenlerindeki PATH kısmına eklerseniz sorun ortadan kalkacaktır.\nOrtam değişkenlerine ulaşmak için : Denetim Masası \u0026gt; Sistem \u0026gt; Gelişmiş Sİstem Ayarları\nSHA1 ulaşmak için komut satırına aşağıdaki kodu yazmanız yeterli olacaktır.\nyour_user_name yerine kendi kullanıcı adınızı yazmayı unutmayın.\nkeytool -list -v -keystore c:\\users\\your_user_name\\.android\\debug.keystore -alias androiddebugkey -storepass android -keypass android ","permalink":"https://yazilim.aykutasil.com/android-keyhashes-sha1/","summary":"Android Key Hashes \u0026amp; SHA1 Windows komut satırına aşağıdaki komutu yazarak ulaşabilirsiniz.\nkeytool -exportcert -alias androiddebugkey -keystore %HOMEPATH%\\.android\\debug.keystore | openssl sha1 -binary | openssl base64 openssl hatası alırsanız https://code.google.com/p/openssl-for-windows/downloads/detail?name=openssl-0.9.8k_X64.zip adresindeki dosyayı indirdikten sonra çıkan dosyadaki bin klasörünü ortam değişkenlerindeki PATH kısmına eklerseniz sorun ortadan kalkacaktır.\nOrtam değişkenlerine ulaşmak için : Denetim Masası \u0026gt; Sistem \u0026gt; Gelişmiş Sİstem Ayarları\nSHA1 ulaşmak için komut satırına aşağıdaki kodu yazmanız yeterli olacaktır.\nyour_user_name yerine kendi kullanıcı adınızı yazmayı unutmayın.","title":"Android Key Hashes \u0026 SHA1"},{"content":"Uygulamanızı geliştirme sırasında Local IIS e sitenizi tanımlamanız gerekebilir. Sanki uzak sunucuda sitenizi custom domain ile host eder gibi (yani site kodlarınızı uzaktaki hostunuzda çalıştırır gibi) çalıştırabilirsiniz. İstediğiniz domain adresini belirtebilir, işlemlerinizi bu domaini kullanarak gerçekleştirebilirsiniz. Eğer bu yazıyı okuyor iseniz muhtemelen bunu yapmaya gerek duymuşsunuzdur.\nİlk olarak windows yüklü bilgisayarımızın başlat menüsüne tıklayarak “Windows özellikleriniz Aç veya Kapat” yazıp arama yapıyoruz.\nYukarıda ki resimde görmüş olduğunuz gibi gerekli kutucukları işaretleyip kurulumu sağıyoruz.\nVisual Studio .Net Uygulamamızı IIS e Tanıtma Visual Studio da uygulamızın ayarlar kısmına girerek yukarıdaki gibi yapılandırıyoruz.\nServers\u0026rsquo;ın alt kısmında görmüş olduğunuz Local IIS\u0026rsquo;i seçmeyi unutmayalım. Bu seçenek Local\u0026rsquo;imize IIS kurduktan sonra geldi.\nŞimdi sıra IIS yapılandırmasında.\nBunun için yine başlat tuşuna basarak iis yazalım ve Internet Information Services (IIS) Yöneticisi\u0026rsquo;ne girelim.\nSiteler e sağ tıklayarak Web Sitesi Ekle diyelim.\nAşağıdaki gibi gerekli yerleri dolduralım.\nSite adı : Herhangi bir isim girebiliriz.\nFiziksel Yol : uygulamamızın kodlarının bulunduğu klasörü göstermeliyiz.\nNot : Web.Config dosyasının bulunduğu klasörün adresi gösterilmelidir.\nAna bilgisayar adı : Visual Studio da girdiğimiz adresin aynısını girmeliyiz.\nHost dosyası yapılandırması IIS\u0026rsquo;e kaydetmiş olduğumuz domain adresini Windows a söylemeliyiz.\nBunun için Windows/System32/drivers/etc klasörünün içinde bulunan Host dosyasını açarak adresimizi eklemeliyiz.\nNot: Host dosyasını masaüstünüze kopyalayın. Gerekli düzenlemeleri yaptıktan sonra dosyayı kopyalayıp tekrar etc klasörünün içine yapıştırın.\nAşağıdaki resimdeki gibi adresimizi ekleyip kaydediyoruz.\nArtık Visual Studio muzda uygulamızı derleyebilir ve belirlediğimiz domainden erişim sağlayabiliriz.\n","permalink":"https://yazilim.aykutasil.com/windows-local-iis-kurulumu/","summary":"Uygulamanızı geliştirme sırasında Local IIS e sitenizi tanımlamanız gerekebilir. Sanki uzak sunucuda sitenizi custom domain ile host eder gibi (yani site kodlarınızı uzaktaki hostunuzda çalıştırır gibi) çalıştırabilirsiniz. İstediğiniz domain adresini belirtebilir, işlemlerinizi bu domaini kullanarak gerçekleştirebilirsiniz. Eğer bu yazıyı okuyor iseniz muhtemelen bunu yapmaya gerek duymuşsunuzdur.\nİlk olarak windows yüklü bilgisayarımızın başlat menüsüne tıklayarak “Windows özellikleriniz Aç veya Kapat” yazıp arama yapıyoruz.\nYukarıda ki resimde görmüş olduğunuz gibi gerekli kutucukları işaretleyip kurulumu sağıyoruz.","title":"Local IIS Site Kurulumu"},{"content":"TSQL NULLIF fonksiyonu NULLIF fonksiyonu verilen iki parametre birbirine esit ise NULL deger döndürür eger degerleri fakli iki parametre verilirse sonuç olarak birinci parametrenin degerini döndürür.\nKullanimi ve anlamasi kolay bir fonksiyon oldugu için basit bir örnekle anlatmaya çalisalim.\nIlk olarak kullanacagimiz geçici tabloyu asagidaki gibi çalistirip içine insert komutu ile veri kaydedelim.\nCREATE TABLE #Urun ( UrunID TINYINT, ListeFiyati DECIMAL NULL);  GO  INSERT #Urun VALUES(1,100); INSERT #Urun VALUES(2,NULL); INSERT #Urun VALUES(3,0); INSERT #Urun VALUES(7,250); INSERT #Urun VALUES(9,458); ListeFiyati kolonuna göre count yaparsak sonuç olarak 4 dönecegini görürsünüz, çünkü UrunID’si 2 olan ürünün liste fiyati girilmemistir. Count fonksiyonu null degerleri saymayacagi için 5 degil 4 degerini döndürür. Count(*) veya count(UrunID) yazarsaniz ID kolonu hiç null olmadigi için 5 degerini görürsünüz.\nselect count(*) from #Urun --sonuç : 5  select count(UrunID) from #Urun --sonuç : 5  select count(ListeFiyati) from #Urun --sonuç 4 Simdi gelelim NULLIF fonksiyonuna. Liste fiyati 0 olarak girilen ürünlerin sayiya dahil etmek istemiyorsak, Liste fiyati 0 olanlari NULL ‘a çevirerek count islemini yapabiliriz.\nselect NULLIF(ListeFiyati,0) from #Urun /* Liste Fiyati 0 olanlari NULL yap. Sonuç: 100 NULL NULL 250 458 */  --Liste Fiyati 0 olanlar hariç sayiyi bulmak istiyorsak. (count fonksiyonunun NULL degerleri saymadigini unutmayalim) select count(NULLIF(ListeFiyati,0)) from #Urun --sonuç : 3. --Çünkü bir ürüne ait liste fiyati 0 di. Onu NULL’ a degistirdik ve ----sayisini getirdik. Kaynak\n","permalink":"https://yazilim.aykutasil.com/sql-nullif-fonksiyonu-kullanimi/","summary":"TSQL NULLIF fonksiyonu NULLIF fonksiyonu verilen iki parametre birbirine esit ise NULL deger döndürür eger degerleri fakli iki parametre verilirse sonuç olarak birinci parametrenin degerini döndürür.\nKullanimi ve anlamasi kolay bir fonksiyon oldugu için basit bir örnekle anlatmaya çalisalim.\nIlk olarak kullanacagimiz geçici tabloyu asagidaki gibi çalistirip içine insert komutu ile veri kaydedelim.\nCREATE TABLE #Urun ( UrunID TINYINT, ListeFiyati DECIMAL NULL);  GO  INSERT #Urun VALUES(1,100); INSERT #Urun VALUES(2,NULL); INSERT #Urun VALUES(3,0); INSERT #Urun VALUES(7,250); INSERT #Urun VALUES(9,458); ListeFiyati kolonuna göre count yaparsak sonuç olarak 4 dönecegini görürsünüz, çünkü UrunID’si 2 olan ürünün liste fiyati girilmemistir.","title":"TSQL NULLIF Fonksiyonu Nedir ve Nasıl Kullanılır"},{"content":"Dinamik Olarak Spinner Text Güncelleme Android de Spinner yapısı açılır menü (dropdown) olarak kullanlan kullanışlı bir componenttir.\nFarklı ihtiyaçlarınız doğrultusunda Spinner ınızın elemanlarının değerini değiştirmek isteyebilirsiniz.\nÖrneğin bir ListView iniz var.Ve içerisinde aynı kategoriden ama değişik durumlara sahip itemlar var ve siz bu itemları durumuna göre gruplandırıp sayısını Spinner da göstermek istiyorsunuz. Bunun için aşağıda belirtecek olduğum yapıyı kullanabilirsiniz.\nÖncellikle String.xml dosyasına Spinner ımızda göstereceğimiz elemanları tanımlıyoruz.\nString.xml\n\u0026lt;string name=\u0026#34;pazartesi\u0026#34;\u0026gt;Pazartesi\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;sali\u0026#34;\u0026gt;Salı\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;carsamba\u0026#34;\u0026gt;Çarşamba\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;persembe\u0026#34;\u0026gt;Perşembe\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;cuma\u0026#34;\u0026gt;Cuma\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;cumartesi\u0026#34;\u0026gt;Cumartesi\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;pazar\u0026#34;\u0026gt;Pazar\u0026lt;/string\u0026gt;   \u0026lt;string-array name=\u0026#34;array_gonderi_list_haftalik\u0026#34;\u0026gt;  \u0026lt;item\u0026gt;@string/pazartesi\u0026lt;/item\u0026gt;  \u0026lt;item\u0026gt;@string/sali\u0026lt;/item\u0026gt;  \u0026lt;item\u0026gt;@string/carsamba\u0026lt;/item\u0026gt;  \u0026lt;item\u0026gt;@string/persembe\u0026lt;/item\u0026gt;  \u0026lt;item\u0026gt;@string/cuma\u0026lt;/item\u0026gt;  \u0026lt;item\u0026gt;@string/cumartesi\u0026lt;/item\u0026gt;  \u0026lt;item\u0026gt;@string/pazar\u0026lt;/item\u0026gt; \u0026lt;/string-array\u0026gt; SpinnerHelper.java\npublic static String[] getChangedSpinnerItemText(Context context) {  String[] originalList = context.getResources().getStringArray(R.array.array_gonderi_list_haftalik);   Resources resources = context.getResources();  for (int a = 0; a \u0026lt; originalList.length; a++) {  int count = 0;  if (originalList[a].equals(resources.getString(R.string.pazartesi))) {  count = 2;  originalList[a] += \u0026#34; ( \u0026#34; + count + \u0026#34; )\u0026#34;;  } else if (originalList[a].equals(resources.getString(R.string.sali))) {  count = 4;  originalList[a] += \u0026#34; ( \u0026#34; + count + \u0026#34; )\u0026#34;;  } else if (originalList[a].equals(resources.getString(R.string.carsamba))) {  count = 7;  originalList[a] += \u0026#34; ( \u0026#34; + count + \u0026#34; )\u0026#34;;  } else {  count = 8  originalList[a] += \u0026#34; ( \u0026#34; + count + \u0026#34; )\u0026#34;;  }  }  return originalList; } Daha sonra spinnerımızı tanımladığımız yere giderek spinnerımızı yapılandırıyoruz.\nFragmentX.java\npublic void setSpinnerNavToolbar() {   // Guncelledikten sonra spinner görünümü örneği  // Pazartesi ( 2 )  // Salı ( 4 )  // ...   // Spinner itemlarının güncellenmiş halini barındıran listeyi getiriyoruz.  String[] changedList = getChangedSpinnerItemText(context);   // Spinner adapterımıza eklemeler yapılmış String Arrayi veriyoruz.  ArrayAdapter\u0026lt;CharSequence\u0026gt; adapter = new ArrayAdapter\u0026lt;CharSequence\u0026gt;(mContext, R.layout.spinner_nav_item_layout,changedList);  Spinner spinner = (Spinner) findViewById(R.id.spinner_nav);  spiner.setAdapter(adapter);  spinner.setVisibility(NavigationView.VISIBLE);  spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {  @Override  public void onItemSelected(AdapterView\u0026lt;?\u0026gt; parent, View view, int position, long id) {   // Original Liste elemanlarımızı getiriyoruz  String[] originalList = context.getResources().getStringArray(R.array.array_gonderi_list_haftalik);   // Original Liste elemanını baz alarak işlem yapmak  // Bu sayede Pazartesi , Salı gibi değerleri alıyoruz. Değiştirilmiş (güncellenmiş) değerleri sadece görünüm için kullanıyoruz.  String secilendeger = originalList[position];   // Pazartesi seçildiğinde yapmak istediğimiz işlemleri burada belirtebiliriz.  if (secilendeger.equals(getResources().getString(R.string.pazartesi))) {   }  // Salı seçildiğinde yapmak istediğimiz işlemleri burada belirtebiliriz.  else if(secilendeger.equals(getResources().getString(R.string.pazartesi)))  {   }  }   @DebugLog  @Override  public void onNothingSelected(AdapterView\u0026lt;?\u0026gt; parent) {   }  }); } ","permalink":"https://yazilim.aykutasil.com/android-spinner-dynamic-text/","summary":"Dinamik Olarak Spinner Text Güncelleme Android de Spinner yapısı açılır menü (dropdown) olarak kullanlan kullanışlı bir componenttir.\nFarklı ihtiyaçlarınız doğrultusunda Spinner ınızın elemanlarının değerini değiştirmek isteyebilirsiniz.\nÖrneğin bir ListView iniz var.Ve içerisinde aynı kategoriden ama değişik durumlara sahip itemlar var ve siz bu itemları durumuna göre gruplandırıp sayısını Spinner da göstermek istiyorsunuz. Bunun için aşağıda belirtecek olduğum yapıyı kullanabilirsiniz.\nÖncellikle String.xml dosyasına Spinner ımızda göstereceğimiz elemanları tanımlıyoruz.\nString.xml\n\u0026lt;string name=\u0026#34;pazartesi\u0026#34;\u0026gt;Pazartesi\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;sali\u0026#34;\u0026gt;Salı\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;carsamba\u0026#34;\u0026gt;Çarşamba\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;persembe\u0026#34;\u0026gt;Perşembe\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;cuma\u0026#34;\u0026gt;Cuma\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;cumartesi\u0026#34;\u0026gt;Cumartesi\u0026lt;/string\u0026gt; \u0026lt;string name=\u0026#34;pazar\u0026#34;\u0026gt;Pazar\u0026lt;/string\u0026gt;   \u0026lt;string-array name=\u0026#34;array_gonderi_list_haftalik\u0026#34;\u0026gt;  \u0026lt;item\u0026gt;@string/pazartesi\u0026lt;/item\u0026gt;  \u0026lt;item\u0026gt;@string/sali\u0026lt;/item\u0026gt;  \u0026lt;item\u0026gt;@string/carsamba\u0026lt;/item\u0026gt;  \u0026lt;item\u0026gt;@string/persembe\u0026lt;/item\u0026gt;  \u0026lt;item\u0026gt;@string/cuma\u0026lt;/item\u0026gt;  \u0026lt;item\u0026gt;@string/cumartesi\u0026lt;/item\u0026gt;  \u0026lt;item\u0026gt;@string/pazar\u0026lt;/item\u0026gt; \u0026lt;/string-array\u0026gt; SpinnerHelper.","title":"Android Spinner Text Güncelleme"},{"content":"PendingIntent resultPendingIntent = PendingIntent.getActivity(  getApplicationContext(),  100,  intent,  PendingIntent.FLAG_CANCEL_CURRENT ); PendingIntent ler Android uygulama geliştirilmesi sırasında birçok yerde karşımıza çıkabilir.\nÖzetle PendingIntent kullanılarak asenkron işlem başlatılımı yapılır.\nEn genel kullanım alanlarından bir tanesi de Notification lar iledir.\nKullanıcı, hazırlamış olduğumuz notification a tıkladığında alacak olduğu tepki nasıl olmalı? sorusuna cevap vermek için PendingIntent imizin flag parametresini uygun şekilde düzenlemeliyiz.\n Not: PendingIntent düzenlenirken requestCode aynı olmalıdır. Eğer her notif için farklı requestCode verirsek her biri farklı notif gibi davranır. Yani verdiğimiz flag in bir değeri kalmaz. Uygulamanın akışına göre kimi zaman da requestCode u farklı vermemiz gerekebilir.\nHangi amaçla kullanacağınız tabi ki size ve uygulamanıza kalmış. ;)\n PendingIntent.FLAG_CANCEL_CURRENT FLAG_CANCEL_CURRENT ile şunu söylüyoruz. Arka arkaya birden fazla notification gelirse eğer, sen en son geleni dikkate al sadece. Diğerlerinin artık hiç bir önemi yok. En son hariç diğer notificationlardan birine tıklandığında herhangi bir işlem yapma diyoruz.\n PendingIntent.FLAG_ONE_SHOT FLAG_ONE_SHOT ile şunu söylüyoruz. Arka arkaya birden fazla notification gelirse eğer, sen sadece ilk geleni dikkate al. Diğer gelenlerin bi önemi yok. İlk gelen notif hariç diğerlerinden birine tıklanırsa herhangi bir işlem yapma diyoruz.\n PendingIntent.FLAG_UPDATE_CURRENT FLAG_UPDATE_CURRENT ile şunu söylüyoruz. Arka arkaya birden fazla notification gelirse eğer, sen en son geleni dikkate al sadece. Diğerleri önemli değil. En son hariç diğer notification a tıkladığımızda en son gelen parametrelere göre işlem yap diyoruz.\n ","permalink":"https://yazilim.aykutasil.com/android-pendingintent-flags/","summary":"PendingIntent resultPendingIntent = PendingIntent.getActivity(  getApplicationContext(),  100,  intent,  PendingIntent.FLAG_CANCEL_CURRENT ); PendingIntent ler Android uygulama geliştirilmesi sırasında birçok yerde karşımıza çıkabilir.\nÖzetle PendingIntent kullanılarak asenkron işlem başlatılımı yapılır.\nEn genel kullanım alanlarından bir tanesi de Notification lar iledir.\nKullanıcı, hazırlamış olduğumuz notification a tıkladığında alacak olduğu tepki nasıl olmalı? sorusuna cevap vermek için PendingIntent imizin flag parametresini uygun şekilde düzenlemeliyiz.\n Not: PendingIntent düzenlenirken requestCode aynı olmalıdır. Eğer her notif için farklı requestCode verirsek her biri farklı notif gibi davranır.","title":"PendingIntent Flags"},{"content":"Docker ile ayağa kaldırmış olduğunuz bir container olduğunu varsayalım ve bu docker container a erişerek komut satırı çalıştırmanız gerekiyor.\nhttps://docs.docker.com/engine/reference/commandline/exec/\nYukarıdaki linki takip ederek nasıl komut çalıştıracağınızı öğrenebilirsiniz. Ya da Kitematic gibi bir uygulama yüklü ise bu uygulamayı açarak ve çalışan image e tıklayarak exe butonuna basmamız yeterli olucaktır.\nBu sayfada anlatmak istediğim şey tüm bunları yaptınız ve container ın içindeyken bir dosya oluşturdunuz. Ve bu dosyanın içeriğini düzenlemeniz gerekmekte.\nNasıl yaparız ?\nContainer ın içerisinde olduğumuzdan bir görsel arayüz yok. open .  fln diyerek dosya yoluna erişim yapamayız.\nnano gibi birşeye ihtiyacımız var ki bash penceresi üzerinden değişiklik yapabilelim.\nÖncelikle\n# apt-get update komutunu çalıştırarak linux paketlerini güncelliyoruz.\nDaha sonra\n# export TERM=xterm komutunu çalıştırıyoruz ve ardından\n# apt-get install nano komutu ile nano yu container ımıza yüklüyoruz.\nArtık istediğimiz dosyanın path ine ulaşarak ve\n# nano dosya_adi.txt diyerek command penceresi üzerindeyken düzenleme yapabiliriz.\nKolay gelsin gençler..\n","permalink":"https://yazilim.aykutasil.com/docker-nano-setup/","summary":"Docker ile ayağa kaldırmış olduğunuz bir container olduğunu varsayalım ve bu docker container a erişerek komut satırı çalıştırmanız gerekiyor.\nhttps://docs.docker.com/engine/reference/commandline/exec/\nYukarıdaki linki takip ederek nasıl komut çalıştıracağınızı öğrenebilirsiniz. Ya da Kitematic gibi bir uygulama yüklü ise bu uygulamayı açarak ve çalışan image e tıklayarak exe butonuna basmamız yeterli olucaktır.\nBu sayfada anlatmak istediğim şey tüm bunları yaptınız ve container ın içindeyken bir dosya oluşturdunuz. Ve bu dosyanın içeriğini düzenlemeniz gerekmekte.","title":"Docker Container Install nano"},{"content":"","permalink":"https://yazilim.aykutasil.com/posts/kotlin_coroutine/","summary":"","title":""}]