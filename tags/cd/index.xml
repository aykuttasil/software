<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cd on Aykut Asil</title>
    <link>https://yazilim.aykutasil.com/tags/cd/</link>
    <description>Recent content in cd on Aykut Asil</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 05 Jan 2021 23:50:00 +0300</lastBuildDate><atom:link href="https://yazilim.aykutasil.com/tags/cd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Teamcity Slack Entegrasyonu</title>
      <link>https://yazilim.aykutasil.com/teamcity-slack-integration/</link>
      <pubDate>Tue, 05 Jan 2021 23:50:00 +0300</pubDate>
      
      <guid>https://yazilim.aykutasil.com/teamcity-slack-integration/</guid>
      <description>Senaryo Kendi sunucunuz üzerine kurmuş olduğunuz Teamcity&amp;rsquo;e Slack entegrasyonu yaparak, build &amp;gt; deploy adımlarını Slack üzerinden nasıl izleriz?
Çözüm  Öncelikle Slack yapılandırmaları ile başlayalım.  https://api.slack.com/apps adresine giriyoruz ve yeni bir App oluşturuyoruz.
 OAuth &amp;amp; Permissions tabına geçerek ilgili yetkilendirmeleri yapıyoruz.   Botumuza, ihtiyaç duyacağı tüm izinleri verdikten sonra Install to Workspace diyerek yetkilendirmeyi tamamlıyoruz. Oluşan tokenı Teamcity tarafında kullanıcaz.   Slack tarafında App&amp;lsquo;imizi oluşturduktan sonra şimdi Teamcity tarafında gerekli ayarlamaları yapabiliriz.</description>
    </item>
    
    <item>
      <title>Android CircleCI Configuration</title>
      <link>https://yazilim.aykutasil.com/android-circleci/</link>
      <pubDate>Sat, 01 Dec 2018 14:20:45 +0300</pubDate>
      
      <guid>https://yazilim.aykutasil.com/android-circleci/</guid>
      <description>CircleCI Android Yapılandırması .circleci/config.yml version: 2 jobs:  build:  working_directory: ~/code  docker:  - image: circleci/android:api-28-alpha  environment:  JVM_OPTS: -Xmx3200m  steps:  - checkout  - run:  name: Initialize Keystore File  command: echo $KEYSTORE_BASE64 | base64 --decode &amp;gt; app/aykutasilkeystore  - run:  name: Initialize Fabric Properties  command: |echo &amp;#34;apiKey=$FABRIC_API_KEY&amp;#34; &amp;gt;&amp;gt; app/fabric.properties echo &amp;#34;apiSecret=$FABRIC_API_SECRET&amp;#34; &amp;gt;&amp;gt; app/fabric.properties cat app/fabric.properties  - run:  name: Initialize Keystore File  command: |echo &amp;#34;signingKeyAlias=$KEYSTORE_KEY_ALIAS&amp;#34; &amp;gt;&amp;gt; keystore.</description>
    </item>
    
    <item>
      <title>CircleCI Configuration</title>
      <link>https://yazilim.aykutasil.com/circleci-configuration/</link>
      <pubDate>Tue, 27 Nov 2018 14:20:45 +0300</pubDate>
      
      <guid>https://yazilim.aykutasil.com/circleci-configuration/</guid>
      <description>CI/CD Uygulamaların build/test/depleyment süreçlerini otomatize etmemizi sağlayan CI/CD kavramları günümüz yazılım dünyasında olmazsa olmaz, bilinmezse ayıp olurlar arasına girmiş bulunmaktadır. Manuel yapılan bu işlemlerin otomatize edilmesi bize ve takım üyelerine çeşitli konularda fayda sağlayacak ve eğer manuel yöntemler ile ilerlendiği takdirde oluşabilecek hataları minimuma indirecektir. Projenizin build/test/deployment adımlarında çeşitli sorunlar yaşamaya başlamışsanız ya da başlamadan bitirmek istiyorsanız bu kavramları öğrenmekte fayda var.
Çeşitli CI/CD araçları bulunmaktadır. Travis, Bitrise, AppCenter, CircleCI bunlardan bazılarıdır.</description>
    </item>
    
  </channel>
</rss>
